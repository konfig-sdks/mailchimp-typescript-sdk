/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ABTestOptionsProperty } from '../models';
// @ts-ignore
import { BatchDeliveryProperty } from '../models';
// @ts-ignore
import { CampaignSettingsProperty1 } from '../models';
// @ts-ignore
import { CampaignSettingsProperty2 } from '../models';
// @ts-ignore
import { CampaignSocialCardProperty } from '../models';
// @ts-ignore
import { CampaignTrackingOptionsProperty } from '../models';
// @ts-ignore
import { CampaignsAddFeedback200Response } from '../models';
// @ts-ignore
import { CampaignsAddFeedbackRequest } from '../models';
// @ts-ignore
import { CampaignsAddFeedbackResponse } from '../models';
// @ts-ignore
import { CampaignsAddFeedbackdefaultResponse } from '../models';
// @ts-ignore
import { CampaignsCancelSendActionResponse } from '../models';
// @ts-ignore
import { CampaignsCancelSendActiondefaultResponse } from '../models';
// @ts-ignore
import { CampaignsCreateNewMailchimpCampaign200Response } from '../models';
// @ts-ignore
import { CampaignsCreateNewMailchimpCampaignRequest } from '../models';
// @ts-ignore
import { CampaignsCreateNewMailchimpCampaignResponse } from '../models';
// @ts-ignore
import { CampaignsCreateNewMailchimpCampaigndefaultResponse } from '../models';
// @ts-ignore
import { CampaignsGetAll200Response } from '../models';
// @ts-ignore
import { CampaignsGetAllResponse } from '../models';
// @ts-ignore
import { CampaignsGetAlldefaultResponse } from '../models';
// @ts-ignore
import { CampaignsGetContent200Response } from '../models';
// @ts-ignore
import { CampaignsGetContentResponse } from '../models';
// @ts-ignore
import { CampaignsGetContentdefaultResponse } from '../models';
// @ts-ignore
import { CampaignsGetFeedbackMessage200Response } from '../models';
// @ts-ignore
import { CampaignsGetFeedbackMessageResponse } from '../models';
// @ts-ignore
import { CampaignsGetFeedbackMessagedefaultResponse } from '../models';
// @ts-ignore
import { CampaignsGetInfo200Response } from '../models';
// @ts-ignore
import { CampaignsGetInfoResponse } from '../models';
// @ts-ignore
import { CampaignsGetInfodefaultResponse } from '../models';
// @ts-ignore
import { CampaignsGetSendChecklist200Response } from '../models';
// @ts-ignore
import { CampaignsGetSendChecklistResponse } from '../models';
// @ts-ignore
import { CampaignsGetSendChecklistdefaultResponse } from '../models';
// @ts-ignore
import { CampaignsListFeedback200Response } from '../models';
// @ts-ignore
import { CampaignsListFeedbackResponse } from '../models';
// @ts-ignore
import { CampaignsListFeedbackdefaultResponse } from '../models';
// @ts-ignore
import { CampaignsPauseRssCampaignResponse } from '../models';
// @ts-ignore
import { CampaignsPauseRssCampaigndefaultResponse } from '../models';
// @ts-ignore
import { CampaignsRemoveCampaignResponse } from '../models';
// @ts-ignore
import { CampaignsRemoveCampaigndefaultResponse } from '../models';
// @ts-ignore
import { CampaignsRemoveFeedbackMessageResponse } from '../models';
// @ts-ignore
import { CampaignsRemoveFeedbackMessagedefaultResponse } from '../models';
// @ts-ignore
import { CampaignsReplicateAction200Response } from '../models';
// @ts-ignore
import { CampaignsReplicateActionResponse } from '../models';
// @ts-ignore
import { CampaignsReplicateActiondefaultResponse } from '../models';
// @ts-ignore
import { CampaignsResendAction200Response } from '../models';
// @ts-ignore
import { CampaignsResendActionRequest } from '../models';
// @ts-ignore
import { CampaignsResendActionResponse } from '../models';
// @ts-ignore
import { CampaignsResendActiondefaultResponse } from '../models';
// @ts-ignore
import { CampaignsResumeRssCampaignResponse } from '../models';
// @ts-ignore
import { CampaignsResumeRssCampaigndefaultResponse } from '../models';
// @ts-ignore
import { CampaignsScheduleDeliveryRequest } from '../models';
// @ts-ignore
import { CampaignsScheduleDeliveryResponse } from '../models';
// @ts-ignore
import { CampaignsScheduleDeliverydefaultResponse } from '../models';
// @ts-ignore
import { CampaignsSendActionResponse } from '../models';
// @ts-ignore
import { CampaignsSendActiondefaultResponse } from '../models';
// @ts-ignore
import { CampaignsSendTestEmailRequest } from '../models';
// @ts-ignore
import { CampaignsSendTestEmailResponse } from '../models';
// @ts-ignore
import { CampaignsSendTestEmaildefaultResponse } from '../models';
// @ts-ignore
import { CampaignsSetContent200Response } from '../models';
// @ts-ignore
import { CampaignsSetContentRequest } from '../models';
// @ts-ignore
import { CampaignsSetContentResponse } from '../models';
// @ts-ignore
import { CampaignsSetContentdefaultResponse } from '../models';
// @ts-ignore
import { CampaignsUnscheduleActionResponse } from '../models';
// @ts-ignore
import { CampaignsUnscheduleActiondefaultResponse } from '../models';
// @ts-ignore
import { CampaignsUpdateFeedbackMessage200Response } from '../models';
// @ts-ignore
import { CampaignsUpdateFeedbackMessageRequest } from '../models';
// @ts-ignore
import { CampaignsUpdateFeedbackMessageResponse } from '../models';
// @ts-ignore
import { CampaignsUpdateFeedbackMessagedefaultResponse } from '../models';
// @ts-ignore
import { CampaignsUpdateSettings200Response } from '../models';
// @ts-ignore
import { CampaignsUpdateSettingsRequest } from '../models';
// @ts-ignore
import { CampaignsUpdateSettingsResponse } from '../models';
// @ts-ignore
import { CampaignsUpdateSettingsdefaultResponse } from '../models';
// @ts-ignore
import { ListProperty1 } from '../models';
// @ts-ignore
import { ListProperty2 } from '../models';
// @ts-ignore
import { RSSOptionsProperty } from '../models';
// @ts-ignore
import { RSSOptionsProperty1 } from '../models';
// @ts-ignore
import { TemplateContentProperty } from '../models';
// @ts-ignore
import { UploadArchiveProperty } from '../models';
// @ts-ignore
import { VariateContentsPropertyInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add feedback on a specific campaign.
         * @summary Add campaign feedback
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsAddFeedbackRequest} campaignsAddFeedbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeedback: async (campaignId: string, campaignsAddFeedbackRequest: CampaignsAddFeedbackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('addFeedback', 'campaignId', campaignId)
            // verify required parameter 'campaignsAddFeedbackRequest' is not null or undefined
            assertParamExists('addFeedback', 'campaignsAddFeedbackRequest', campaignsAddFeedbackRequest)
            const localVarPath = `/campaigns/{campaign_id}/feedback`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsAddFeedbackRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/feedback',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsAddFeedbackRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
         * @summary Cancel campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSendAction: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('cancelSendAction', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/cancel-send`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/cancel-send',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Mailchimp campaign.
         * @summary Add campaign
         * @param {CampaignsCreateNewMailchimpCampaignRequest} campaignsCreateNewMailchimpCampaignRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMailchimpCampaign: async (campaignsCreateNewMailchimpCampaignRequest: CampaignsCreateNewMailchimpCampaignRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignsCreateNewMailchimpCampaignRequest' is not null or undefined
            assertParamExists('createNewMailchimpCampaign', 'campaignsCreateNewMailchimpCampaignRequest', campaignsCreateNewMailchimpCampaignRequest)
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsCreateNewMailchimpCampaignRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsCreateNewMailchimpCampaignRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all campaigns in an account.
         * @summary List campaigns
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'} [type] The campaign type.
         * @param {'save' | 'paused' | 'schedule' | 'sending' | 'sent'} [status] The status of the campaign.
         * @param {string} [beforeSendTime] Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceSendTime] Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [beforeCreateTime] Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceCreateTime] Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [listId] The unique id for the list.
         * @param {string} [folderId] The unique folder id.
         * @param {string} [memberId] Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.
         * @param {'create_time' | 'send_time'} [sortField] Returns files sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {boolean} [includeResendShortcutEligibility] Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate', status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent', beforeSendTime?: string, sinceSendTime?: string, beforeCreateTime?: string, sinceCreateTime?: string, listId?: string, folderId?: string, memberId?: string, sortField?: 'create_time' | 'send_time', sortDir?: 'ASC' | 'DESC', includeResendShortcutEligibility?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (beforeSendTime !== undefined) {
                localVarQueryParameter['before_send_time'] = (beforeSendTime as any instanceof Date) ?
                    (beforeSendTime as any).toISOString() :
                    beforeSendTime;
            }

            if (sinceSendTime !== undefined) {
                localVarQueryParameter['since_send_time'] = (sinceSendTime as any instanceof Date) ?
                    (sinceSendTime as any).toISOString() :
                    sinceSendTime;
            }

            if (beforeCreateTime !== undefined) {
                localVarQueryParameter['before_create_time'] = (beforeCreateTime as any instanceof Date) ?
                    (beforeCreateTime as any).toISOString() :
                    beforeCreateTime;
            }

            if (sinceCreateTime !== undefined) {
                localVarQueryParameter['since_create_time'] = (sinceCreateTime as any instanceof Date) ?
                    (sinceCreateTime as any).toISOString() :
                    sinceCreateTime;
            }

            if (listId !== undefined) {
                localVarQueryParameter['list_id'] = listId;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (includeResendShortcutEligibility !== undefined) {
                localVarQueryParameter['include_resend_shortcut_eligibility'] = includeResendShortcutEligibility;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the the HTML and plain-text content for a campaign.
         * @summary Get campaign content
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getContent', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/content`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific feedback message from a campaign.
         * @summary Get campaign feedback message
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} feedbackId The unique id for the feedback message.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackMessage: async (campaignId: string, feedbackId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getFeedbackMessage', 'campaignId', campaignId)
            // verify required parameter 'feedbackId' is not null or undefined
            assertParamExists('getFeedbackMessage', 'feedbackId', feedbackId)
            const localVarPath = `/campaigns/{campaign_id}/feedback/{feedback_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"feedback_id"}}`, encodeURIComponent(String(feedbackId !== undefined ? feedbackId : `-feedback_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/feedback/{feedback_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific campaign.
         * @summary Get campaign info
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {boolean} [includeResendShortcutEligibility] Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, includeResendShortcutEligibility?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getInfo', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (includeResendShortcutEligibility !== undefined) {
                localVarQueryParameter['include_resend_shortcut_eligibility'] = includeResendShortcutEligibility;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Review the send checklist for a campaign, and resolve any issues before sending.
         * @summary Get campaign send checklist
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendChecklist: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getSendChecklist', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/send-checklist`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/send-checklist',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team feedback while you\'re working together on a Mailchimp campaign.
         * @summary List campaign feedback
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedback: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listFeedback', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/feedback`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/feedback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause an RSS-Driven campaign.
         * @summary Pause rss campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseRssCampaign: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('pauseRssCampaign', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/pause`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/pause',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a campaign from your Mailchimp account.
         * @summary Delete campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCampaign: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('removeCampaign', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a specific feedback message for a campaign.
         * @summary Delete campaign feedback message
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} feedbackId The unique id for the feedback message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeedbackMessage: async (campaignId: string, feedbackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('removeFeedbackMessage', 'campaignId', campaignId)
            // verify required parameter 'feedbackId' is not null or undefined
            assertParamExists('removeFeedbackMessage', 'feedbackId', feedbackId)
            const localVarPath = `/campaigns/{campaign_id}/feedback/{feedback_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"feedback_id"}}`, encodeURIComponent(String(feedbackId !== undefined ? feedbackId : `-feedback_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/feedback/{feedback_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replicate a campaign in saved or send status.
         * @summary Replicate campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replicateAction: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('replicateAction', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/replicate`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/replicate',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn\'t open the campaign, or any new subscribers since it was sent.
         * @summary Resend campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsResendActionRequest} [campaignsResendActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendAction: async (campaignId: string, campaignsResendActionRequest?: CampaignsResendActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('resendAction', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/create-resend`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsResendActionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/create-resend',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsResendActionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resume an RSS-Driven campaign.
         * @summary Resume rss campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeRssCampaign: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('resumeRssCampaign', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/resume`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/resume',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule a campaign for delivery. If you\'re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
         * @summary Schedule campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsScheduleDeliveryRequest} campaignsScheduleDeliveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDelivery: async (campaignId: string, campaignsScheduleDeliveryRequest: CampaignsScheduleDeliveryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('scheduleDelivery', 'campaignId', campaignId)
            // verify required parameter 'campaignsScheduleDeliveryRequest' is not null or undefined
            assertParamExists('scheduleDelivery', 'campaignsScheduleDeliveryRequest', campaignsScheduleDeliveryRequest)
            const localVarPath = `/campaigns/{campaign_id}/actions/schedule`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsScheduleDeliveryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/schedule',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsScheduleDeliveryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
         * @summary Send campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAction: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('sendAction', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/send`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/send',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a test email.
         * @summary Send test email
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsSendTestEmailRequest} campaignsSendTestEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTestEmail: async (campaignId: string, campaignsSendTestEmailRequest: CampaignsSendTestEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('sendTestEmail', 'campaignId', campaignId)
            // verify required parameter 'campaignsSendTestEmailRequest' is not null or undefined
            assertParamExists('sendTestEmail', 'campaignsSendTestEmailRequest', campaignsSendTestEmailRequest)
            const localVarPath = `/campaigns/{campaign_id}/actions/test`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsSendTestEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/test',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsSendTestEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the content for a campaign.
         * @summary Set campaign content
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsSetContentRequest} campaignsSetContentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setContent: async (campaignId: string, campaignsSetContentRequest: CampaignsSetContentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('setContent', 'campaignId', campaignId)
            // verify required parameter 'campaignsSetContentRequest' is not null or undefined
            assertParamExists('setContent', 'campaignsSetContentRequest', campaignsSetContentRequest)
            const localVarPath = `/campaigns/{campaign_id}/content`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsSetContentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/content',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsSetContentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unschedule a scheduled campaign that hasn\'t started sending.
         * @summary Unschedule campaign
         * @param {string} campaignId The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unscheduleAction: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('unscheduleAction', 'campaignId', campaignId)
            const localVarPath = `/campaigns/{campaign_id}/actions/unschedule`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/actions/unschedule',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific feedback message for a campaign.
         * @summary Update campaign feedback message
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} feedbackId The unique id for the feedback message.
         * @param {CampaignsUpdateFeedbackMessageRequest} campaignsUpdateFeedbackMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedbackMessage: async (campaignId: string, feedbackId: string, campaignsUpdateFeedbackMessageRequest: CampaignsUpdateFeedbackMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('updateFeedbackMessage', 'campaignId', campaignId)
            // verify required parameter 'feedbackId' is not null or undefined
            assertParamExists('updateFeedbackMessage', 'feedbackId', feedbackId)
            // verify required parameter 'campaignsUpdateFeedbackMessageRequest' is not null or undefined
            assertParamExists('updateFeedbackMessage', 'campaignsUpdateFeedbackMessageRequest', campaignsUpdateFeedbackMessageRequest)
            const localVarPath = `/campaigns/{campaign_id}/feedback/{feedback_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"feedback_id"}}`, encodeURIComponent(String(feedbackId !== undefined ? feedbackId : `-feedback_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsUpdateFeedbackMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}/feedback/{feedback_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsUpdateFeedbackMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update some or all of the settings for a specific campaign.
         * @summary Update campaign settings
         * @param {string} campaignId The unique id for the campaign.
         * @param {CampaignsUpdateSettingsRequest} campaignsUpdateSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (campaignId: string, campaignsUpdateSettingsRequest: CampaignsUpdateSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('updateSettings', 'campaignId', campaignId)
            // verify required parameter 'campaignsUpdateSettingsRequest' is not null or undefined
            assertParamExists('updateSettings', 'campaignsUpdateSettingsRequest', campaignsUpdateSettingsRequest)
            const localVarPath = `/campaigns/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignsUpdateSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaigns/{campaign_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignsUpdateSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add feedback on a specific campaign.
         * @summary Add campaign feedback
         * @param {CampaignsApiAddFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeedback(requestParameters: CampaignsApiAddFeedbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsAddFeedbackResponse>> {
            const campaignsAddFeedbackRequest: CampaignsAddFeedbackRequest = {
                block_id: requestParameters.block_id,
                message: requestParameters.message,
                is_complete: requestParameters.is_complete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeedback(requestParameters.campaignId, campaignsAddFeedbackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
         * @summary Cancel campaign
         * @param {CampaignsApiCancelSendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSendAction(requestParameters: CampaignsApiCancelSendActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSendAction(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Mailchimp campaign.
         * @summary Add campaign
         * @param {CampaignsApiCreateNewMailchimpCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMailchimpCampaign(requestParameters: CampaignsApiCreateNewMailchimpCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsCreateNewMailchimpCampaignResponse>> {
            const campaignsCreateNewMailchimpCampaignRequest: CampaignsCreateNewMailchimpCampaignRequest = {
                type: requestParameters.type,
                recipients: requestParameters.recipients,
                settings: requestParameters.settings,
                variate_settings: requestParameters.variate_settings,
                tracking: requestParameters.tracking,
                rss_opts: requestParameters.rss_opts,
                social_card: requestParameters.social_card,
                content_type: requestParameters.content_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewMailchimpCampaign(campaignsCreateNewMailchimpCampaignRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all campaigns in an account.
         * @summary List campaigns
         * @param {CampaignsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: CampaignsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.type, requestParameters.status, requestParameters.beforeSendTime, requestParameters.sinceSendTime, requestParameters.beforeCreateTime, requestParameters.sinceCreateTime, requestParameters.listId, requestParameters.folderId, requestParameters.memberId, requestParameters.sortField, requestParameters.sortDir, requestParameters.includeResendShortcutEligibility, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the the HTML and plain-text content for a campaign.
         * @summary Get campaign content
         * @param {CampaignsApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContent(requestParameters: CampaignsApiGetContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsGetContentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContent(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific feedback message from a campaign.
         * @summary Get campaign feedback message
         * @param {CampaignsApiGetFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedbackMessage(requestParameters: CampaignsApiGetFeedbackMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsGetFeedbackMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedbackMessage(requestParameters.campaignId, requestParameters.feedbackId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific campaign.
         * @summary Get campaign info
         * @param {CampaignsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: CampaignsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.includeResendShortcutEligibility, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Review the send checklist for a campaign, and resolve any issues before sending.
         * @summary Get campaign send checklist
         * @param {CampaignsApiGetSendChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSendChecklist(requestParameters: CampaignsApiGetSendChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsGetSendChecklistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSendChecklist(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get team feedback while you\'re working together on a Mailchimp campaign.
         * @summary List campaign feedback
         * @param {CampaignsApiListFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeedback(requestParameters: CampaignsApiListFeedbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsListFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeedback(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pause an RSS-Driven campaign.
         * @summary Pause rss campaign
         * @param {CampaignsApiPauseRssCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseRssCampaign(requestParameters: CampaignsApiPauseRssCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseRssCampaign(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a campaign from your Mailchimp account.
         * @summary Delete campaign
         * @param {CampaignsApiRemoveCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCampaign(requestParameters: CampaignsApiRemoveCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCampaign(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a specific feedback message for a campaign.
         * @summary Delete campaign feedback message
         * @param {CampaignsApiRemoveFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeedbackMessage(requestParameters: CampaignsApiRemoveFeedbackMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeedbackMessage(requestParameters.campaignId, requestParameters.feedbackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replicate a campaign in saved or send status.
         * @summary Replicate campaign
         * @param {CampaignsApiReplicateActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replicateAction(requestParameters: CampaignsApiReplicateActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsReplicateActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replicateAction(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn\'t open the campaign, or any new subscribers since it was sent.
         * @summary Resend campaign
         * @param {CampaignsApiResendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendAction(requestParameters: CampaignsApiResendActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsResendActionResponse>> {
            const campaignsResendActionRequest: CampaignsResendActionRequest = {
                shortcut_type: requestParameters.shortcut_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendAction(requestParameters.campaignId, campaignsResendActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resume an RSS-Driven campaign.
         * @summary Resume rss campaign
         * @param {CampaignsApiResumeRssCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeRssCampaign(requestParameters: CampaignsApiResumeRssCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeRssCampaign(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Schedule a campaign for delivery. If you\'re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
         * @summary Schedule campaign
         * @param {CampaignsApiScheduleDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleDelivery(requestParameters: CampaignsApiScheduleDeliveryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const campaignsScheduleDeliveryRequest: CampaignsScheduleDeliveryRequest = {
                schedule_time: requestParameters.schedule_time,
                timewarp: requestParameters.timewarp,
                batch_delivery: requestParameters.batch_delivery
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleDelivery(requestParameters.campaignId, campaignsScheduleDeliveryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
         * @summary Send campaign
         * @param {CampaignsApiSendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAction(requestParameters: CampaignsApiSendActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAction(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a test email.
         * @summary Send test email
         * @param {CampaignsApiSendTestEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTestEmail(requestParameters: CampaignsApiSendTestEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const campaignsSendTestEmailRequest: CampaignsSendTestEmailRequest = {
                test_emails: requestParameters.test_emails,
                send_type: requestParameters.send_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTestEmail(requestParameters.campaignId, campaignsSendTestEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the content for a campaign.
         * @summary Set campaign content
         * @param {CampaignsApiSetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setContent(requestParameters: CampaignsApiSetContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsSetContentResponse>> {
            const campaignsSetContentRequest: CampaignsSetContentRequest = {
                plain_text: requestParameters.plain_text,
                html: requestParameters.html,
                url: requestParameters.url,
                template: requestParameters.template,
                archive: requestParameters.archive,
                variate_contents: requestParameters.variate_contents
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setContent(requestParameters.campaignId, campaignsSetContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unschedule a scheduled campaign that hasn\'t started sending.
         * @summary Unschedule campaign
         * @param {CampaignsApiUnscheduleActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unscheduleAction(requestParameters: CampaignsApiUnscheduleActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unscheduleAction(requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific feedback message for a campaign.
         * @summary Update campaign feedback message
         * @param {CampaignsApiUpdateFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeedbackMessage(requestParameters: CampaignsApiUpdateFeedbackMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsUpdateFeedbackMessageResponse>> {
            const campaignsUpdateFeedbackMessageRequest: CampaignsUpdateFeedbackMessageRequest = {
                block_id: requestParameters.block_id,
                message: requestParameters.message,
                is_complete: requestParameters.is_complete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeedbackMessage(requestParameters.campaignId, requestParameters.feedbackId, campaignsUpdateFeedbackMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update some or all of the settings for a specific campaign.
         * @summary Update campaign settings
         * @param {CampaignsApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: CampaignsApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignsUpdateSettingsResponse>> {
            const campaignsUpdateSettingsRequest: CampaignsUpdateSettingsRequest = {
                recipients: requestParameters.recipients,
                settings: requestParameters.settings,
                variate_settings: requestParameters.variate_settings,
                tracking: requestParameters.tracking,
                rss_opts: requestParameters.rss_opts,
                social_card: requestParameters.social_card
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(requestParameters.campaignId, campaignsUpdateSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * Add feedback on a specific campaign.
         * @summary Add campaign feedback
         * @param {CampaignsApiAddFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeedback(requestParameters: CampaignsApiAddFeedbackRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsAddFeedbackResponse> {
            return localVarFp.addFeedback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
         * @summary Cancel campaign
         * @param {CampaignsApiCancelSendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSendAction(requestParameters: CampaignsApiCancelSendActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelSendAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Mailchimp campaign.
         * @summary Add campaign
         * @param {CampaignsApiCreateNewMailchimpCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMailchimpCampaign(requestParameters: CampaignsApiCreateNewMailchimpCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsCreateNewMailchimpCampaignResponse> {
            return localVarFp.createNewMailchimpCampaign(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all campaigns in an account.
         * @summary List campaigns
         * @param {CampaignsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: CampaignsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the the HTML and plain-text content for a campaign.
         * @summary Get campaign content
         * @param {CampaignsApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent(requestParameters: CampaignsApiGetContentRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsGetContentResponse> {
            return localVarFp.getContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific feedback message from a campaign.
         * @summary Get campaign feedback message
         * @param {CampaignsApiGetFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackMessage(requestParameters: CampaignsApiGetFeedbackMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsGetFeedbackMessageResponse> {
            return localVarFp.getFeedbackMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific campaign.
         * @summary Get campaign info
         * @param {CampaignsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: CampaignsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Review the send checklist for a campaign, and resolve any issues before sending.
         * @summary Get campaign send checklist
         * @param {CampaignsApiGetSendChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendChecklist(requestParameters: CampaignsApiGetSendChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsGetSendChecklistResponse> {
            return localVarFp.getSendChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team feedback while you\'re working together on a Mailchimp campaign.
         * @summary List campaign feedback
         * @param {CampaignsApiListFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedback(requestParameters: CampaignsApiListFeedbackRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsListFeedbackResponse> {
            return localVarFp.listFeedback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause an RSS-Driven campaign.
         * @summary Pause rss campaign
         * @param {CampaignsApiPauseRssCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseRssCampaign(requestParameters: CampaignsApiPauseRssCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pauseRssCampaign(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a campaign from your Mailchimp account.
         * @summary Delete campaign
         * @param {CampaignsApiRemoveCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCampaign(requestParameters: CampaignsApiRemoveCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCampaign(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a specific feedback message for a campaign.
         * @summary Delete campaign feedback message
         * @param {CampaignsApiRemoveFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeedbackMessage(requestParameters: CampaignsApiRemoveFeedbackMessageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFeedbackMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replicate a campaign in saved or send status.
         * @summary Replicate campaign
         * @param {CampaignsApiReplicateActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replicateAction(requestParameters: CampaignsApiReplicateActionRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsReplicateActionResponse> {
            return localVarFp.replicateAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn\'t open the campaign, or any new subscribers since it was sent.
         * @summary Resend campaign
         * @param {CampaignsApiResendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendAction(requestParameters: CampaignsApiResendActionRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsResendActionResponse> {
            return localVarFp.resendAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Resume an RSS-Driven campaign.
         * @summary Resume rss campaign
         * @param {CampaignsApiResumeRssCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeRssCampaign(requestParameters: CampaignsApiResumeRssCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resumeRssCampaign(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Schedule a campaign for delivery. If you\'re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
         * @summary Schedule campaign
         * @param {CampaignsApiScheduleDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDelivery(requestParameters: CampaignsApiScheduleDeliveryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scheduleDelivery(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
         * @summary Send campaign
         * @param {CampaignsApiSendActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAction(requestParameters: CampaignsApiSendActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a test email.
         * @summary Send test email
         * @param {CampaignsApiSendTestEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTestEmail(requestParameters: CampaignsApiSendTestEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendTestEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the content for a campaign.
         * @summary Set campaign content
         * @param {CampaignsApiSetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setContent(requestParameters: CampaignsApiSetContentRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsSetContentResponse> {
            return localVarFp.setContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unschedule a scheduled campaign that hasn\'t started sending.
         * @summary Unschedule campaign
         * @param {CampaignsApiUnscheduleActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unscheduleAction(requestParameters: CampaignsApiUnscheduleActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unscheduleAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific feedback message for a campaign.
         * @summary Update campaign feedback message
         * @param {CampaignsApiUpdateFeedbackMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedbackMessage(requestParameters: CampaignsApiUpdateFeedbackMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsUpdateFeedbackMessageResponse> {
            return localVarFp.updateFeedbackMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update some or all of the settings for a specific campaign.
         * @summary Update campaign settings
         * @param {CampaignsApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: CampaignsApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignsUpdateSettingsResponse> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeedback operation in CampaignsApi.
 * @export
 * @interface CampaignsApiAddFeedbackRequest
 */
export type CampaignsApiAddFeedbackRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiAddFeedback
    */
    readonly campaignId: string
    
} & CampaignsAddFeedbackRequest

/**
 * Request parameters for cancelSendAction operation in CampaignsApi.
 * @export
 * @interface CampaignsApiCancelSendActionRequest
 */
export type CampaignsApiCancelSendActionRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiCancelSendAction
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for createNewMailchimpCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiCreateNewMailchimpCampaignRequest
 */
export type CampaignsApiCreateNewMailchimpCampaignRequest = {
    
} & CampaignsCreateNewMailchimpCampaignRequest

/**
 * Request parameters for getAll operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetAllRequest
 */
export type CampaignsApiGetAllRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetAll
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetAll
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof CampaignsApiGetAll
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof CampaignsApiGetAll
    */
    readonly offset?: number
    
    /**
    * The campaign type.
    * @type {'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'}
    * @memberof CampaignsApiGetAll
    */
    readonly type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'
    
    /**
    * The status of the campaign.
    * @type {'save' | 'paused' | 'schedule' | 'sending' | 'sent'}
    * @memberof CampaignsApiGetAll
    */
    readonly status?: 'save' | 'paused' | 'schedule' | 'sending' | 'sent'
    
    /**
    * Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly beforeSendTime?: string
    
    /**
    * Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly sinceSendTime?: string
    
    /**
    * Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly beforeCreateTime?: string
    
    /**
    * Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly sinceCreateTime?: string
    
    /**
    * The unique id for the list.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly listId?: string
    
    /**
    * The unique folder id.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly folderId?: string
    
    /**
    * Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.
    * @type {string}
    * @memberof CampaignsApiGetAll
    */
    readonly memberId?: string
    
    /**
    * Returns files sorted by the specified field.
    * @type {'create_time' | 'send_time'}
    * @memberof CampaignsApiGetAll
    */
    readonly sortField?: 'create_time' | 'send_time'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof CampaignsApiGetAll
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
    /**
    * Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
    * @type {boolean}
    * @memberof CampaignsApiGetAll
    */
    readonly includeResendShortcutEligibility?: boolean
    
}

/**
 * Request parameters for getContent operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetContentRequest
 */
export type CampaignsApiGetContentRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiGetContent
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetContent
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetContent
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getFeedbackMessage operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetFeedbackMessageRequest
 */
export type CampaignsApiGetFeedbackMessageRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiGetFeedbackMessage
    */
    readonly campaignId: string
    
    /**
    * The unique id for the feedback message.
    * @type {string}
    * @memberof CampaignsApiGetFeedbackMessage
    */
    readonly feedbackId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetFeedbackMessage
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetFeedbackMessage
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getInfo operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetInfoRequest
 */
export type CampaignsApiGetInfoRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiGetInfo
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetInfo
    */
    readonly excludeFields?: Array<string>
    
    /**
    * Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
    * @type {boolean}
    * @memberof CampaignsApiGetInfo
    */
    readonly includeResendShortcutEligibility?: boolean
    
}

/**
 * Request parameters for getSendChecklist operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetSendChecklistRequest
 */
export type CampaignsApiGetSendChecklistRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiGetSendChecklist
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetSendChecklist
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiGetSendChecklist
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listFeedback operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListFeedbackRequest
 */
export type CampaignsApiListFeedbackRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiListFeedback
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiListFeedback
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignsApiListFeedback
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for pauseRssCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiPauseRssCampaignRequest
 */
export type CampaignsApiPauseRssCampaignRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiPauseRssCampaign
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for removeCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiRemoveCampaignRequest
 */
export type CampaignsApiRemoveCampaignRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiRemoveCampaign
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for removeFeedbackMessage operation in CampaignsApi.
 * @export
 * @interface CampaignsApiRemoveFeedbackMessageRequest
 */
export type CampaignsApiRemoveFeedbackMessageRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiRemoveFeedbackMessage
    */
    readonly campaignId: string
    
    /**
    * The unique id for the feedback message.
    * @type {string}
    * @memberof CampaignsApiRemoveFeedbackMessage
    */
    readonly feedbackId: string
    
}

/**
 * Request parameters for replicateAction operation in CampaignsApi.
 * @export
 * @interface CampaignsApiReplicateActionRequest
 */
export type CampaignsApiReplicateActionRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiReplicateAction
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for resendAction operation in CampaignsApi.
 * @export
 * @interface CampaignsApiResendActionRequest
 */
export type CampaignsApiResendActionRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiResendAction
    */
    readonly campaignId: string
    
} & CampaignsResendActionRequest

/**
 * Request parameters for resumeRssCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiResumeRssCampaignRequest
 */
export type CampaignsApiResumeRssCampaignRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiResumeRssCampaign
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for scheduleDelivery operation in CampaignsApi.
 * @export
 * @interface CampaignsApiScheduleDeliveryRequest
 */
export type CampaignsApiScheduleDeliveryRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiScheduleDelivery
    */
    readonly campaignId: string
    
} & CampaignsScheduleDeliveryRequest

/**
 * Request parameters for sendAction operation in CampaignsApi.
 * @export
 * @interface CampaignsApiSendActionRequest
 */
export type CampaignsApiSendActionRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiSendAction
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for sendTestEmail operation in CampaignsApi.
 * @export
 * @interface CampaignsApiSendTestEmailRequest
 */
export type CampaignsApiSendTestEmailRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiSendTestEmail
    */
    readonly campaignId: string
    
} & CampaignsSendTestEmailRequest

/**
 * Request parameters for setContent operation in CampaignsApi.
 * @export
 * @interface CampaignsApiSetContentRequest
 */
export type CampaignsApiSetContentRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiSetContent
    */
    readonly campaignId: string
    
} & CampaignsSetContentRequest

/**
 * Request parameters for unscheduleAction operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUnscheduleActionRequest
 */
export type CampaignsApiUnscheduleActionRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiUnscheduleAction
    */
    readonly campaignId: string
    
}

/**
 * Request parameters for updateFeedbackMessage operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUpdateFeedbackMessageRequest
 */
export type CampaignsApiUpdateFeedbackMessageRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiUpdateFeedbackMessage
    */
    readonly campaignId: string
    
    /**
    * The unique id for the feedback message.
    * @type {string}
    * @memberof CampaignsApiUpdateFeedbackMessage
    */
    readonly feedbackId: string
    
} & CampaignsUpdateFeedbackMessageRequest

/**
 * Request parameters for updateSettings operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUpdateSettingsRequest
 */
export type CampaignsApiUpdateSettingsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof CampaignsApiUpdateSettings
    */
    readonly campaignId: string
    
} & CampaignsUpdateSettingsRequest

/**
 * CampaignsApiGenerated - object-oriented interface
 * @export
 * @class CampaignsApiGenerated
 * @extends {BaseAPI}
 */
export class CampaignsApiGenerated extends BaseAPI {
    /**
     * Add feedback on a specific campaign.
     * @summary Add campaign feedback
     * @param {CampaignsApiAddFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public addFeedback(requestParameters: CampaignsApiAddFeedbackRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).addFeedback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     * @summary Cancel campaign
     * @param {CampaignsApiCancelSendActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public cancelSendAction(requestParameters: CampaignsApiCancelSendActionRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).cancelSendAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Mailchimp campaign.
     * @summary Add campaign
     * @param {CampaignsApiCreateNewMailchimpCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public createNewMailchimpCampaign(requestParameters: CampaignsApiCreateNewMailchimpCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).createNewMailchimpCampaign(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all campaigns in an account.
     * @summary List campaigns
     * @param {CampaignsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public getAll(requestParameters: CampaignsApiGetAllRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the the HTML and plain-text content for a campaign.
     * @summary Get campaign content
     * @param {CampaignsApiGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public getContent(requestParameters: CampaignsApiGetContentRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific feedback message from a campaign.
     * @summary Get campaign feedback message
     * @param {CampaignsApiGetFeedbackMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public getFeedbackMessage(requestParameters: CampaignsApiGetFeedbackMessageRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getFeedbackMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific campaign.
     * @summary Get campaign info
     * @param {CampaignsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public getInfo(requestParameters: CampaignsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Review the send checklist for a campaign, and resolve any issues before sending.
     * @summary Get campaign send checklist
     * @param {CampaignsApiGetSendChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public getSendChecklist(requestParameters: CampaignsApiGetSendChecklistRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getSendChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get team feedback while you\'re working together on a Mailchimp campaign.
     * @summary List campaign feedback
     * @param {CampaignsApiListFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public listFeedback(requestParameters: CampaignsApiListFeedbackRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).listFeedback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause an RSS-Driven campaign.
     * @summary Pause rss campaign
     * @param {CampaignsApiPauseRssCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public pauseRssCampaign(requestParameters: CampaignsApiPauseRssCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).pauseRssCampaign(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a campaign from your Mailchimp account.
     * @summary Delete campaign
     * @param {CampaignsApiRemoveCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public removeCampaign(requestParameters: CampaignsApiRemoveCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).removeCampaign(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a specific feedback message for a campaign.
     * @summary Delete campaign feedback message
     * @param {CampaignsApiRemoveFeedbackMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public removeFeedbackMessage(requestParameters: CampaignsApiRemoveFeedbackMessageRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).removeFeedbackMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replicate a campaign in saved or send status.
     * @summary Replicate campaign
     * @param {CampaignsApiReplicateActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public replicateAction(requestParameters: CampaignsApiReplicateActionRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).replicateAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn\'t open the campaign, or any new subscribers since it was sent.
     * @summary Resend campaign
     * @param {CampaignsApiResendActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public resendAction(requestParameters: CampaignsApiResendActionRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).resendAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resume an RSS-Driven campaign.
     * @summary Resume rss campaign
     * @param {CampaignsApiResumeRssCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public resumeRssCampaign(requestParameters: CampaignsApiResumeRssCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).resumeRssCampaign(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Schedule a campaign for delivery. If you\'re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     * @summary Schedule campaign
     * @param {CampaignsApiScheduleDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public scheduleDelivery(requestParameters: CampaignsApiScheduleDeliveryRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).scheduleDelivery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     * @summary Send campaign
     * @param {CampaignsApiSendActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public sendAction(requestParameters: CampaignsApiSendActionRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).sendAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a test email.
     * @summary Send test email
     * @param {CampaignsApiSendTestEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public sendTestEmail(requestParameters: CampaignsApiSendTestEmailRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).sendTestEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the content for a campaign.
     * @summary Set campaign content
     * @param {CampaignsApiSetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public setContent(requestParameters: CampaignsApiSetContentRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).setContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unschedule a scheduled campaign that hasn\'t started sending.
     * @summary Unschedule campaign
     * @param {CampaignsApiUnscheduleActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public unscheduleAction(requestParameters: CampaignsApiUnscheduleActionRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).unscheduleAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific feedback message for a campaign.
     * @summary Update campaign feedback message
     * @param {CampaignsApiUpdateFeedbackMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public updateFeedbackMessage(requestParameters: CampaignsApiUpdateFeedbackMessageRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).updateFeedbackMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update some or all of the settings for a specific campaign.
     * @summary Update campaign settings
     * @param {CampaignsApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiGenerated
     */
    public updateSettings(requestParameters: CampaignsApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
