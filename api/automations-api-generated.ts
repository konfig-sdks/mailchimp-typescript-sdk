/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AutomationCampaignSettingsProperty } from '../models';
// @ts-ignore
import { AutomationDelayProperty } from '../models';
// @ts-ignore
import { AutomationTriggerProperty } from '../models';
// @ts-ignore
import { AutomationsAddSubscriberToWorkflowEmail200Response } from '../models';
// @ts-ignore
import { AutomationsAddSubscriberToWorkflowEmailRequest } from '../models';
// @ts-ignore
import { AutomationsAddSubscriberToWorkflowEmailResponse } from '../models';
// @ts-ignore
import { AutomationsAddSubscriberToWorkflowEmaildefaultResponse } from '../models';
// @ts-ignore
import { AutomationsArchiveActionResponse } from '../models';
// @ts-ignore
import { AutomationsArchiveActiondefaultResponse } from '../models';
// @ts-ignore
import { AutomationsClassicAutomationSubscriberInfo200Response } from '../models';
// @ts-ignore
import { AutomationsClassicAutomationSubscriberInfoResponse } from '../models';
// @ts-ignore
import { AutomationsClassicAutomationSubscriberInfodefaultResponse } from '../models';
// @ts-ignore
import { AutomationsCreateClassic200Response } from '../models';
// @ts-ignore
import { AutomationsCreateClassicRequest } from '../models';
// @ts-ignore
import { AutomationsCreateClassicResponse } from '../models';
// @ts-ignore
import { AutomationsCreateClassicdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsDeleteWorkflowEmailResponse } from '../models';
// @ts-ignore
import { AutomationsDeleteWorkflowEmaildefaultResponse } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowEmails200Response } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowEmailsResponse } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowEmailsdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowInfo200Response } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowInfoResponse } from '../models';
// @ts-ignore
import { AutomationsGetClassicWorkflowInfodefaultResponse } from '../models';
// @ts-ignore
import { AutomationsGetEmailInfo200Response } from '../models';
// @ts-ignore
import { AutomationsGetEmailInfoResponse } from '../models';
// @ts-ignore
import { AutomationsGetEmailInfodefaultResponse } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscriberInfo200Response } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscriberInfoResponse } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscriberInfodefaultResponse } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscribers200Response } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscribersResponse } from '../models';
// @ts-ignore
import { AutomationsGetRemovedSubscribersdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsListQueueEmails200Response } from '../models';
// @ts-ignore
import { AutomationsListQueueEmailsResponse } from '../models';
// @ts-ignore
import { AutomationsListQueueEmailsdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsListSummary200Response } from '../models';
// @ts-ignore
import { AutomationsListSummaryResponse } from '../models';
// @ts-ignore
import { AutomationsListSummarydefaultResponse } from '../models';
// @ts-ignore
import { AutomationsPauseAutomatedEmailResponse } from '../models';
// @ts-ignore
import { AutomationsPauseAutomatedEmaildefaultResponse } from '../models';
// @ts-ignore
import { AutomationsPauseWorkflowEmailsResponse } from '../models';
// @ts-ignore
import { AutomationsPauseWorkflowEmailsdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsRemoveSubscriberFromWorkflow200Response } from '../models';
// @ts-ignore
import { AutomationsRemoveSubscriberFromWorkflowResponse } from '../models';
// @ts-ignore
import { AutomationsRemoveSubscriberFromWorkflowdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsStartAllEmailsResponse } from '../models';
// @ts-ignore
import { AutomationsStartAllEmailsdefaultResponse } from '../models';
// @ts-ignore
import { AutomationsStartAutomatedEmailResponse } from '../models';
// @ts-ignore
import { AutomationsStartAutomatedEmaildefaultResponse } from '../models';
// @ts-ignore
import { AutomationsUpdateWorkflowEmail200Response } from '../models';
// @ts-ignore
import { AutomationsUpdateWorkflowEmailRequest } from '../models';
// @ts-ignore
import { AutomationsUpdateWorkflowEmailResponse } from '../models';
// @ts-ignore
import { AutomationsUpdateWorkflowEmaildefaultResponse } from '../models';
// @ts-ignore
import { CampaignSettingsProperty } from '../models';
// @ts-ignore
import { ListProperty } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AutomationsApi - axios parameter creator
 * @export
 */
export const AutomationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
         * @summary Add subscriber to workflow email
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {AutomationsAddSubscriberToWorkflowEmailRequest} automationsAddSubscriberToWorkflowEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriberToWorkflowEmail: async (workflowId: string, workflowEmailId: string, automationsAddSubscriberToWorkflowEmailRequest: AutomationsAddSubscriberToWorkflowEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('addSubscriberToWorkflowEmail', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('addSubscriberToWorkflowEmail', 'workflowEmailId', workflowEmailId)
            // verify required parameter 'automationsAddSubscriberToWorkflowEmailRequest' is not null or undefined
            assertParamExists('addSubscriberToWorkflowEmail', 'automationsAddSubscriberToWorkflowEmailRequest', automationsAddSubscriberToWorkflowEmailRequest)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}/queue`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: automationsAddSubscriberToWorkflowEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}/queue',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(automationsAddSubscriberToWorkflowEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archiving will permanently end your automation and keep the report data. Youâ€™ll be able to replicate your archived automation, but you canâ€™t restart it.
         * @summary Archive automation
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAction: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('archiveAction', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}/actions/archive`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/actions/archive',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific subscriber in a classic automation email queue.
         * @summary Get automated email subscriber
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicAutomationSubscriberInfo: async (workflowId: string, workflowEmailId: string, subscriberHash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('classicAutomationSubscriberInfo', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('classicAutomationSubscriberInfo', 'workflowEmailId', workflowEmailId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('classicAutomationSubscriberInfo', 'subscriberHash', subscriberHash)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new classic automation in your Mailchimp account.
         * @summary Add automation
         * @param {AutomationsCreateClassicRequest} automationsCreateClassicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassic: async (automationsCreateClassicRequest: AutomationsCreateClassicRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'automationsCreateClassicRequest' is not null or undefined
            assertParamExists('createClassic', 'automationsCreateClassicRequest', automationsCreateClassicRequest)
            const localVarPath = `/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: automationsCreateClassicRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(automationsCreateClassicRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
         * @summary Delete workflow email
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowEmail: async (workflowId: string, workflowEmailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('deleteWorkflowEmail', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('deleteWorkflowEmail', 'workflowEmailId', workflowEmailId)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of the emails in a classic automation workflow.
         * @summary List automated emails
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassicWorkflowEmails: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getClassicWorkflowEmails', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}/emails`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of an individual classic automation workflow\'s settings and content. The `trigger_settings` object returns information for the first email in the workflow.
         * @summary Get automation info
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassicWorkflowInfo: async (workflowId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getClassicWorkflowInfo', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about an individual classic automation workflow email.
         * @summary Get workflow email info
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailInfo: async (workflowId: string, workflowEmailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getEmailInfo', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('getEmailInfo', 'workflowEmailId', workflowEmailId)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific subscriber who was removed from a classic automation workflow.
         * @summary Get subscriber removed from workflow
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemovedSubscriberInfo: async (workflowId: string, subscriberHash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getRemovedSubscriberInfo', 'workflowId', workflowId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('getRemovedSubscriberInfo', 'subscriberHash', subscriberHash)
            const localVarPath = `/automations/{workflow_id}/removed-subscribers/{subscriber_hash}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/removed-subscribers/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about subscribers who were removed from a classic automation workflow.
         * @summary List subscribers removed from workflow
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemovedSubscribers: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getRemovedSubscribers', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}/removed-subscribers`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/removed-subscribers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a classic automation email queue.
         * @summary List automated email subscribers
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueueEmails: async (workflowId: string, workflowEmailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('listQueueEmails', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('listQueueEmails', 'workflowEmailId', workflowEmailId)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}/queue`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}/queue',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of an account\'s classic automations.
         * @summary List automations
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {string} [beforeCreateTime] Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceCreateTime] Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [beforeStartTime] Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceStartTime] Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {'save' | 'paused' | 'sending'} [status] Restrict the results to automations with the specified status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSummary: async (count?: number, offset?: number, fields?: Array<string>, excludeFields?: Array<string>, beforeCreateTime?: string, sinceCreateTime?: string, beforeStartTime?: string, sinceStartTime?: string, status?: 'save' | 'paused' | 'sending', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (beforeCreateTime !== undefined) {
                localVarQueryParameter['before_create_time'] = (beforeCreateTime as any instanceof Date) ?
                    (beforeCreateTime as any).toISOString() :
                    beforeCreateTime;
            }

            if (sinceCreateTime !== undefined) {
                localVarQueryParameter['since_create_time'] = (sinceCreateTime as any instanceof Date) ?
                    (sinceCreateTime as any).toISOString() :
                    sinceCreateTime;
            }

            if (beforeStartTime !== undefined) {
                localVarQueryParameter['before_start_time'] = (beforeStartTime as any instanceof Date) ?
                    (beforeStartTime as any).toISOString() :
                    beforeStartTime;
            }

            if (sinceStartTime !== undefined) {
                localVarQueryParameter['since_start_time'] = (sinceStartTime as any instanceof Date) ?
                    (sinceStartTime as any).toISOString() :
                    sinceStartTime;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause an automated email.
         * @summary Pause automated email
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAutomatedEmail: async (workflowId: string, workflowEmailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('pauseAutomatedEmail', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('pauseAutomatedEmail', 'workflowEmailId', workflowEmailId)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause all emails in a specific classic automation workflow.
         * @summary Pause automation emails
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseWorkflowEmails: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('pauseWorkflowEmails', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}/actions/pause-all-emails`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/actions/pause-all-emails',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they\'ve been sent from that workflow. Once they\'re removed, they can never be added back to the same workflow.
         * @summary Remove subscriber from workflow
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {AutomationsAddSubscriberToWorkflowEmailRequest} automationsAddSubscriberToWorkflowEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriberFromWorkflow: async (workflowId: string, automationsAddSubscriberToWorkflowEmailRequest: AutomationsAddSubscriberToWorkflowEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('removeSubscriberFromWorkflow', 'workflowId', workflowId)
            // verify required parameter 'automationsAddSubscriberToWorkflowEmailRequest' is not null or undefined
            assertParamExists('removeSubscriberFromWorkflow', 'automationsAddSubscriberToWorkflowEmailRequest', automationsAddSubscriberToWorkflowEmailRequest)
            const localVarPath = `/automations/{workflow_id}/removed-subscribers`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: automationsAddSubscriberToWorkflowEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/removed-subscribers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(automationsAddSubscriberToWorkflowEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start all emails in a classic automation workflow.
         * @summary Start automation emails
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAllEmails: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('startAllEmails', 'workflowId', workflowId)
            const localVarPath = `/automations/{workflow_id}/actions/start-all-emails`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/actions/start-all-emails',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start an automated email.
         * @summary Start automated email
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutomatedEmail: async (workflowId: string, workflowEmailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('startAutomatedEmail', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('startAutomatedEmail', 'workflowEmailId', workflowEmailId)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}/actions/start`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}/actions/start',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
         * @summary Update workflow email
         * @param {string} workflowId The unique id for the Automation workflow.
         * @param {string} workflowEmailId The unique id for the Automation workflow email.
         * @param {AutomationsUpdateWorkflowEmailRequest} automationsUpdateWorkflowEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowEmail: async (workflowId: string, workflowEmailId: string, automationsUpdateWorkflowEmailRequest: AutomationsUpdateWorkflowEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('updateWorkflowEmail', 'workflowId', workflowId)
            // verify required parameter 'workflowEmailId' is not null or undefined
            assertParamExists('updateWorkflowEmail', 'workflowEmailId', workflowEmailId)
            // verify required parameter 'automationsUpdateWorkflowEmailRequest' is not null or undefined
            assertParamExists('updateWorkflowEmail', 'automationsUpdateWorkflowEmailRequest', automationsUpdateWorkflowEmailRequest)
            const localVarPath = `/automations/{workflow_id}/emails/{workflow_email_id}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)))
                .replace(`{${"workflow_email_id"}}`, encodeURIComponent(String(workflowEmailId !== undefined ? workflowEmailId : `-workflow_email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: automationsUpdateWorkflowEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automations/{workflow_id}/emails/{workflow_email_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(automationsUpdateWorkflowEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutomationsApi - functional programming interface
 * @export
 */
export const AutomationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutomationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
         * @summary Add subscriber to workflow email
         * @param {AutomationsApiAddSubscriberToWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubscriberToWorkflowEmail(requestParameters: AutomationsApiAddSubscriberToWorkflowEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsAddSubscriberToWorkflowEmailResponse>> {
            const automationsAddSubscriberToWorkflowEmailRequest: AutomationsAddSubscriberToWorkflowEmailRequest = {
                email_address: requestParameters.email_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriberToWorkflowEmail(requestParameters.workflowId, requestParameters.workflowEmailId, automationsAddSubscriberToWorkflowEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archiving will permanently end your automation and keep the report data. Youâ€™ll be able to replicate your archived automation, but you canâ€™t restart it.
         * @summary Archive automation
         * @param {AutomationsApiArchiveActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveAction(requestParameters: AutomationsApiArchiveActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveAction(requestParameters.workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific subscriber in a classic automation email queue.
         * @summary Get automated email subscriber
         * @param {AutomationsApiClassicAutomationSubscriberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classicAutomationSubscriberInfo(requestParameters: AutomationsApiClassicAutomationSubscriberInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsClassicAutomationSubscriberInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classicAutomationSubscriberInfo(requestParameters.workflowId, requestParameters.workflowEmailId, requestParameters.subscriberHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new classic automation in your Mailchimp account.
         * @summary Add automation
         * @param {AutomationsApiCreateClassicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClassic(requestParameters: AutomationsApiCreateClassicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsCreateClassicResponse>> {
            const automationsCreateClassicRequest: AutomationsCreateClassicRequest = {
                recipients: requestParameters.recipients,
                settings: requestParameters.settings,
                trigger_settings: requestParameters.trigger_settings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClassic(automationsCreateClassicRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
         * @summary Delete workflow email
         * @param {AutomationsApiDeleteWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflowEmail(requestParameters: AutomationsApiDeleteWorkflowEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflowEmail(requestParameters.workflowId, requestParameters.workflowEmailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a summary of the emails in a classic automation workflow.
         * @summary List automated emails
         * @param {AutomationsApiGetClassicWorkflowEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassicWorkflowEmails(requestParameters: AutomationsApiGetClassicWorkflowEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsGetClassicWorkflowEmailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassicWorkflowEmails(requestParameters.workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a summary of an individual classic automation workflow\'s settings and content. The `trigger_settings` object returns information for the first email in the workflow.
         * @summary Get automation info
         * @param {AutomationsApiGetClassicWorkflowInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassicWorkflowInfo(requestParameters: AutomationsApiGetClassicWorkflowInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsGetClassicWorkflowInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassicWorkflowInfo(requestParameters.workflowId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about an individual classic automation workflow email.
         * @summary Get workflow email info
         * @param {AutomationsApiGetEmailInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailInfo(requestParameters: AutomationsApiGetEmailInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsGetEmailInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailInfo(requestParameters.workflowId, requestParameters.workflowEmailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific subscriber who was removed from a classic automation workflow.
         * @summary Get subscriber removed from workflow
         * @param {AutomationsApiGetRemovedSubscriberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemovedSubscriberInfo(requestParameters: AutomationsApiGetRemovedSubscriberInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsGetRemovedSubscriberInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemovedSubscriberInfo(requestParameters.workflowId, requestParameters.subscriberHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about subscribers who were removed from a classic automation workflow.
         * @summary List subscribers removed from workflow
         * @param {AutomationsApiGetRemovedSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemovedSubscribers(requestParameters: AutomationsApiGetRemovedSubscribersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsGetRemovedSubscribersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemovedSubscribers(requestParameters.workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a classic automation email queue.
         * @summary List automated email subscribers
         * @param {AutomationsApiListQueueEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listQueueEmails(requestParameters: AutomationsApiListQueueEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsListQueueEmailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listQueueEmails(requestParameters.workflowId, requestParameters.workflowEmailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a summary of an account\'s classic automations.
         * @summary List automations
         * @param {AutomationsApiListSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSummary(requestParameters: AutomationsApiListSummaryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsListSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSummary(requestParameters.count, requestParameters.offset, requestParameters.fields, requestParameters.excludeFields, requestParameters.beforeCreateTime, requestParameters.sinceCreateTime, requestParameters.beforeStartTime, requestParameters.sinceStartTime, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pause an automated email.
         * @summary Pause automated email
         * @param {AutomationsApiPauseAutomatedEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseAutomatedEmail(requestParameters: AutomationsApiPauseAutomatedEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseAutomatedEmail(requestParameters.workflowId, requestParameters.workflowEmailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pause all emails in a specific classic automation workflow.
         * @summary Pause automation emails
         * @param {AutomationsApiPauseWorkflowEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseWorkflowEmails(requestParameters: AutomationsApiPauseWorkflowEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseWorkflowEmails(requestParameters.workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they\'ve been sent from that workflow. Once they\'re removed, they can never be added back to the same workflow.
         * @summary Remove subscriber from workflow
         * @param {AutomationsApiRemoveSubscriberFromWorkflowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscriberFromWorkflow(requestParameters: AutomationsApiRemoveSubscriberFromWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsRemoveSubscriberFromWorkflowResponse>> {
            const automationsAddSubscriberToWorkflowEmailRequest: AutomationsAddSubscriberToWorkflowEmailRequest = {
                email_address: requestParameters.email_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscriberFromWorkflow(requestParameters.workflowId, automationsAddSubscriberToWorkflowEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start all emails in a classic automation workflow.
         * @summary Start automation emails
         * @param {AutomationsApiStartAllEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAllEmails(requestParameters: AutomationsApiStartAllEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAllEmails(requestParameters.workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start an automated email.
         * @summary Start automated email
         * @param {AutomationsApiStartAutomatedEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutomatedEmail(requestParameters: AutomationsApiStartAutomatedEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAutomatedEmail(requestParameters.workflowId, requestParameters.workflowEmailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
         * @summary Update workflow email
         * @param {AutomationsApiUpdateWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflowEmail(requestParameters: AutomationsApiUpdateWorkflowEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsUpdateWorkflowEmailResponse>> {
            const automationsUpdateWorkflowEmailRequest: AutomationsUpdateWorkflowEmailRequest = {
                settings: requestParameters.settings,
                delay: requestParameters.delay
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflowEmail(requestParameters.workflowId, requestParameters.workflowEmailId, automationsUpdateWorkflowEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutomationsApi - factory interface
 * @export
 */
export const AutomationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutomationsApiFp(configuration)
    return {
        /**
         * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
         * @summary Add subscriber to workflow email
         * @param {AutomationsApiAddSubscriberToWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriberToWorkflowEmail(requestParameters: AutomationsApiAddSubscriberToWorkflowEmailRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsAddSubscriberToWorkflowEmailResponse> {
            return localVarFp.addSubscriberToWorkflowEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Archiving will permanently end your automation and keep the report data. Youâ€™ll be able to replicate your archived automation, but you canâ€™t restart it.
         * @summary Archive automation
         * @param {AutomationsApiArchiveActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAction(requestParameters: AutomationsApiArchiveActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.archiveAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific subscriber in a classic automation email queue.
         * @summary Get automated email subscriber
         * @param {AutomationsApiClassicAutomationSubscriberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicAutomationSubscriberInfo(requestParameters: AutomationsApiClassicAutomationSubscriberInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsClassicAutomationSubscriberInfoResponse> {
            return localVarFp.classicAutomationSubscriberInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new classic automation in your Mailchimp account.
         * @summary Add automation
         * @param {AutomationsApiCreateClassicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassic(requestParameters: AutomationsApiCreateClassicRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsCreateClassicResponse> {
            return localVarFp.createClassic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
         * @summary Delete workflow email
         * @param {AutomationsApiDeleteWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowEmail(requestParameters: AutomationsApiDeleteWorkflowEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkflowEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of the emails in a classic automation workflow.
         * @summary List automated emails
         * @param {AutomationsApiGetClassicWorkflowEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassicWorkflowEmails(requestParameters: AutomationsApiGetClassicWorkflowEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsGetClassicWorkflowEmailsResponse> {
            return localVarFp.getClassicWorkflowEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of an individual classic automation workflow\'s settings and content. The `trigger_settings` object returns information for the first email in the workflow.
         * @summary Get automation info
         * @param {AutomationsApiGetClassicWorkflowInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassicWorkflowInfo(requestParameters: AutomationsApiGetClassicWorkflowInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsGetClassicWorkflowInfoResponse> {
            return localVarFp.getClassicWorkflowInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about an individual classic automation workflow email.
         * @summary Get workflow email info
         * @param {AutomationsApiGetEmailInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailInfo(requestParameters: AutomationsApiGetEmailInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsGetEmailInfoResponse> {
            return localVarFp.getEmailInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific subscriber who was removed from a classic automation workflow.
         * @summary Get subscriber removed from workflow
         * @param {AutomationsApiGetRemovedSubscriberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemovedSubscriberInfo(requestParameters: AutomationsApiGetRemovedSubscriberInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsGetRemovedSubscriberInfoResponse> {
            return localVarFp.getRemovedSubscriberInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about subscribers who were removed from a classic automation workflow.
         * @summary List subscribers removed from workflow
         * @param {AutomationsApiGetRemovedSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemovedSubscribers(requestParameters: AutomationsApiGetRemovedSubscribersRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsGetRemovedSubscribersResponse> {
            return localVarFp.getRemovedSubscribers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a classic automation email queue.
         * @summary List automated email subscribers
         * @param {AutomationsApiListQueueEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueueEmails(requestParameters: AutomationsApiListQueueEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsListQueueEmailsResponse> {
            return localVarFp.listQueueEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of an account\'s classic automations.
         * @summary List automations
         * @param {AutomationsApiListSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSummary(requestParameters: AutomationsApiListSummaryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AutomationsListSummaryResponse> {
            return localVarFp.listSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause an automated email.
         * @summary Pause automated email
         * @param {AutomationsApiPauseAutomatedEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAutomatedEmail(requestParameters: AutomationsApiPauseAutomatedEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pauseAutomatedEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause all emails in a specific classic automation workflow.
         * @summary Pause automation emails
         * @param {AutomationsApiPauseWorkflowEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseWorkflowEmails(requestParameters: AutomationsApiPauseWorkflowEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pauseWorkflowEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they\'ve been sent from that workflow. Once they\'re removed, they can never be added back to the same workflow.
         * @summary Remove subscriber from workflow
         * @param {AutomationsApiRemoveSubscriberFromWorkflowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriberFromWorkflow(requestParameters: AutomationsApiRemoveSubscriberFromWorkflowRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsRemoveSubscriberFromWorkflowResponse> {
            return localVarFp.removeSubscriberFromWorkflow(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Start all emails in a classic automation workflow.
         * @summary Start automation emails
         * @param {AutomationsApiStartAllEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAllEmails(requestParameters: AutomationsApiStartAllEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startAllEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Start an automated email.
         * @summary Start automated email
         * @param {AutomationsApiStartAutomatedEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutomatedEmail(requestParameters: AutomationsApiStartAutomatedEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startAutomatedEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
         * @summary Update workflow email
         * @param {AutomationsApiUpdateWorkflowEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowEmail(requestParameters: AutomationsApiUpdateWorkflowEmailRequest, options?: AxiosRequestConfig): AxiosPromise<AutomationsUpdateWorkflowEmailResponse> {
            return localVarFp.updateWorkflowEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSubscriberToWorkflowEmail operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAddSubscriberToWorkflowEmailRequest
 */
export type AutomationsApiAddSubscriberToWorkflowEmailRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiAddSubscriberToWorkflowEmail
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiAddSubscriberToWorkflowEmail
    */
    readonly workflowEmailId: string
    
} & AutomationsAddSubscriberToWorkflowEmailRequest

/**
 * Request parameters for archiveAction operation in AutomationsApi.
 * @export
 * @interface AutomationsApiArchiveActionRequest
 */
export type AutomationsApiArchiveActionRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiArchiveAction
    */
    readonly workflowId: string
    
}

/**
 * Request parameters for classicAutomationSubscriberInfo operation in AutomationsApi.
 * @export
 * @interface AutomationsApiClassicAutomationSubscriberInfoRequest
 */
export type AutomationsApiClassicAutomationSubscriberInfoRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiClassicAutomationSubscriberInfo
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiClassicAutomationSubscriberInfo
    */
    readonly workflowEmailId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof AutomationsApiClassicAutomationSubscriberInfo
    */
    readonly subscriberHash: string
    
}

/**
 * Request parameters for createClassic operation in AutomationsApi.
 * @export
 * @interface AutomationsApiCreateClassicRequest
 */
export type AutomationsApiCreateClassicRequest = {
    
} & AutomationsCreateClassicRequest

/**
 * Request parameters for deleteWorkflowEmail operation in AutomationsApi.
 * @export
 * @interface AutomationsApiDeleteWorkflowEmailRequest
 */
export type AutomationsApiDeleteWorkflowEmailRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiDeleteWorkflowEmail
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiDeleteWorkflowEmail
    */
    readonly workflowEmailId: string
    
}

/**
 * Request parameters for getClassicWorkflowEmails operation in AutomationsApi.
 * @export
 * @interface AutomationsApiGetClassicWorkflowEmailsRequest
 */
export type AutomationsApiGetClassicWorkflowEmailsRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiGetClassicWorkflowEmails
    */
    readonly workflowId: string
    
}

/**
 * Request parameters for getClassicWorkflowInfo operation in AutomationsApi.
 * @export
 * @interface AutomationsApiGetClassicWorkflowInfoRequest
 */
export type AutomationsApiGetClassicWorkflowInfoRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiGetClassicWorkflowInfo
    */
    readonly workflowId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AutomationsApiGetClassicWorkflowInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AutomationsApiGetClassicWorkflowInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getEmailInfo operation in AutomationsApi.
 * @export
 * @interface AutomationsApiGetEmailInfoRequest
 */
export type AutomationsApiGetEmailInfoRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiGetEmailInfo
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiGetEmailInfo
    */
    readonly workflowEmailId: string
    
}

/**
 * Request parameters for getRemovedSubscriberInfo operation in AutomationsApi.
 * @export
 * @interface AutomationsApiGetRemovedSubscriberInfoRequest
 */
export type AutomationsApiGetRemovedSubscriberInfoRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiGetRemovedSubscriberInfo
    */
    readonly workflowId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof AutomationsApiGetRemovedSubscriberInfo
    */
    readonly subscriberHash: string
    
}

/**
 * Request parameters for getRemovedSubscribers operation in AutomationsApi.
 * @export
 * @interface AutomationsApiGetRemovedSubscribersRequest
 */
export type AutomationsApiGetRemovedSubscribersRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiGetRemovedSubscribers
    */
    readonly workflowId: string
    
}

/**
 * Request parameters for listQueueEmails operation in AutomationsApi.
 * @export
 * @interface AutomationsApiListQueueEmailsRequest
 */
export type AutomationsApiListQueueEmailsRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiListQueueEmails
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiListQueueEmails
    */
    readonly workflowEmailId: string
    
}

/**
 * Request parameters for listSummary operation in AutomationsApi.
 * @export
 * @interface AutomationsApiListSummaryRequest
 */
export type AutomationsApiListSummaryRequest = {
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof AutomationsApiListSummary
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof AutomationsApiListSummary
    */
    readonly offset?: number
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AutomationsApiListSummary
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AutomationsApiListSummary
    */
    readonly excludeFields?: Array<string>
    
    /**
    * Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof AutomationsApiListSummary
    */
    readonly beforeCreateTime?: string
    
    /**
    * Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof AutomationsApiListSummary
    */
    readonly sinceCreateTime?: string
    
    /**
    * Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof AutomationsApiListSummary
    */
    readonly beforeStartTime?: string
    
    /**
    * Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof AutomationsApiListSummary
    */
    readonly sinceStartTime?: string
    
    /**
    * Restrict the results to automations with the specified status.
    * @type {'save' | 'paused' | 'sending'}
    * @memberof AutomationsApiListSummary
    */
    readonly status?: 'save' | 'paused' | 'sending'
    
}

/**
 * Request parameters for pauseAutomatedEmail operation in AutomationsApi.
 * @export
 * @interface AutomationsApiPauseAutomatedEmailRequest
 */
export type AutomationsApiPauseAutomatedEmailRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiPauseAutomatedEmail
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiPauseAutomatedEmail
    */
    readonly workflowEmailId: string
    
}

/**
 * Request parameters for pauseWorkflowEmails operation in AutomationsApi.
 * @export
 * @interface AutomationsApiPauseWorkflowEmailsRequest
 */
export type AutomationsApiPauseWorkflowEmailsRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiPauseWorkflowEmails
    */
    readonly workflowId: string
    
}

/**
 * Request parameters for removeSubscriberFromWorkflow operation in AutomationsApi.
 * @export
 * @interface AutomationsApiRemoveSubscriberFromWorkflowRequest
 */
export type AutomationsApiRemoveSubscriberFromWorkflowRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiRemoveSubscriberFromWorkflow
    */
    readonly workflowId: string
    
} & AutomationsAddSubscriberToWorkflowEmailRequest

/**
 * Request parameters for startAllEmails operation in AutomationsApi.
 * @export
 * @interface AutomationsApiStartAllEmailsRequest
 */
export type AutomationsApiStartAllEmailsRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiStartAllEmails
    */
    readonly workflowId: string
    
}

/**
 * Request parameters for startAutomatedEmail operation in AutomationsApi.
 * @export
 * @interface AutomationsApiStartAutomatedEmailRequest
 */
export type AutomationsApiStartAutomatedEmailRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiStartAutomatedEmail
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiStartAutomatedEmail
    */
    readonly workflowEmailId: string
    
}

/**
 * Request parameters for updateWorkflowEmail operation in AutomationsApi.
 * @export
 * @interface AutomationsApiUpdateWorkflowEmailRequest
 */
export type AutomationsApiUpdateWorkflowEmailRequest = {
    
    /**
    * The unique id for the Automation workflow.
    * @type {string}
    * @memberof AutomationsApiUpdateWorkflowEmail
    */
    readonly workflowId: string
    
    /**
    * The unique id for the Automation workflow email.
    * @type {string}
    * @memberof AutomationsApiUpdateWorkflowEmail
    */
    readonly workflowEmailId: string
    
} & AutomationsUpdateWorkflowEmailRequest

/**
 * AutomationsApiGenerated - object-oriented interface
 * @export
 * @class AutomationsApiGenerated
 * @extends {BaseAPI}
 */
export class AutomationsApiGenerated extends BaseAPI {
    /**
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     * @summary Add subscriber to workflow email
     * @param {AutomationsApiAddSubscriberToWorkflowEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public addSubscriberToWorkflowEmail(requestParameters: AutomationsApiAddSubscriberToWorkflowEmailRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).addSubscriberToWorkflowEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archiving will permanently end your automation and keep the report data. Youâ€™ll be able to replicate your archived automation, but you canâ€™t restart it.
     * @summary Archive automation
     * @param {AutomationsApiArchiveActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public archiveAction(requestParameters: AutomationsApiArchiveActionRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).archiveAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific subscriber in a classic automation email queue.
     * @summary Get automated email subscriber
     * @param {AutomationsApiClassicAutomationSubscriberInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public classicAutomationSubscriberInfo(requestParameters: AutomationsApiClassicAutomationSubscriberInfoRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).classicAutomationSubscriberInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new classic automation in your Mailchimp account.
     * @summary Add automation
     * @param {AutomationsApiCreateClassicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public createClassic(requestParameters: AutomationsApiCreateClassicRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).createClassic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     * @summary Delete workflow email
     * @param {AutomationsApiDeleteWorkflowEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public deleteWorkflowEmail(requestParameters: AutomationsApiDeleteWorkflowEmailRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).deleteWorkflowEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of the emails in a classic automation workflow.
     * @summary List automated emails
     * @param {AutomationsApiGetClassicWorkflowEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public getClassicWorkflowEmails(requestParameters: AutomationsApiGetClassicWorkflowEmailsRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).getClassicWorkflowEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of an individual classic automation workflow\'s settings and content. The `trigger_settings` object returns information for the first email in the workflow.
     * @summary Get automation info
     * @param {AutomationsApiGetClassicWorkflowInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public getClassicWorkflowInfo(requestParameters: AutomationsApiGetClassicWorkflowInfoRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).getClassicWorkflowInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about an individual classic automation workflow email.
     * @summary Get workflow email info
     * @param {AutomationsApiGetEmailInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public getEmailInfo(requestParameters: AutomationsApiGetEmailInfoRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).getEmailInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     * @summary Get subscriber removed from workflow
     * @param {AutomationsApiGetRemovedSubscriberInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public getRemovedSubscriberInfo(requestParameters: AutomationsApiGetRemovedSubscriberInfoRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).getRemovedSubscriberInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about subscribers who were removed from a classic automation workflow.
     * @summary List subscribers removed from workflow
     * @param {AutomationsApiGetRemovedSubscribersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public getRemovedSubscribers(requestParameters: AutomationsApiGetRemovedSubscribersRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).getRemovedSubscribers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a classic automation email queue.
     * @summary List automated email subscribers
     * @param {AutomationsApiListQueueEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public listQueueEmails(requestParameters: AutomationsApiListQueueEmailsRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).listQueueEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of an account\'s classic automations.
     * @summary List automations
     * @param {AutomationsApiListSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public listSummary(requestParameters: AutomationsApiListSummaryRequest = {}, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).listSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause an automated email.
     * @summary Pause automated email
     * @param {AutomationsApiPauseAutomatedEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public pauseAutomatedEmail(requestParameters: AutomationsApiPauseAutomatedEmailRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).pauseAutomatedEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause all emails in a specific classic automation workflow.
     * @summary Pause automation emails
     * @param {AutomationsApiPauseWorkflowEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public pauseWorkflowEmails(requestParameters: AutomationsApiPauseWorkflowEmailsRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).pauseWorkflowEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they\'ve been sent from that workflow. Once they\'re removed, they can never be added back to the same workflow.
     * @summary Remove subscriber from workflow
     * @param {AutomationsApiRemoveSubscriberFromWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public removeSubscriberFromWorkflow(requestParameters: AutomationsApiRemoveSubscriberFromWorkflowRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).removeSubscriberFromWorkflow(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start all emails in a classic automation workflow.
     * @summary Start automation emails
     * @param {AutomationsApiStartAllEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public startAllEmails(requestParameters: AutomationsApiStartAllEmailsRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).startAllEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start an automated email.
     * @summary Start automated email
     * @param {AutomationsApiStartAutomatedEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public startAutomatedEmail(requestParameters: AutomationsApiStartAutomatedEmailRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).startAutomatedEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     * @summary Update workflow email
     * @param {AutomationsApiUpdateWorkflowEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApiGenerated
     */
    public updateWorkflowEmail(requestParameters: AutomationsApiUpdateWorkflowEmailRequest, options?: AxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).updateWorkflowEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
