/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TemplateFoldersAddNewFolder200Response } from '../models';
// @ts-ignore
import { TemplateFoldersAddNewFolderRequest } from '../models';
// @ts-ignore
import { TemplateFoldersAddNewFolderResponse } from '../models';
// @ts-ignore
import { TemplateFoldersAddNewFolderdefaultResponse } from '../models';
// @ts-ignore
import { TemplateFoldersDeleteSpecificFolderResponse } from '../models';
// @ts-ignore
import { TemplateFoldersDeleteSpecificFolderdefaultResponse } from '../models';
// @ts-ignore
import { TemplateFoldersGetInfo200Response } from '../models';
// @ts-ignore
import { TemplateFoldersGetInfoResponse } from '../models';
// @ts-ignore
import { TemplateFoldersGetInfodefaultResponse } from '../models';
// @ts-ignore
import { TemplateFoldersListFolders200Response } from '../models';
// @ts-ignore
import { TemplateFoldersListFoldersResponse } from '../models';
// @ts-ignore
import { TemplateFoldersListFoldersdefaultResponse } from '../models';
// @ts-ignore
import { TemplateFoldersUpdateSpecificFolder200Response } from '../models';
// @ts-ignore
import { TemplateFoldersUpdateSpecificFolderResponse } from '../models';
// @ts-ignore
import { TemplateFoldersUpdateSpecificFolderdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplateFoldersApi - axios parameter creator
 * @export
 */
export const TemplateFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new template folder.
         * @summary Add template folder
         * @param {TemplateFoldersAddNewFolderRequest} templateFoldersAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder: async (templateFoldersAddNewFolderRequest: TemplateFoldersAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateFoldersAddNewFolderRequest' is not null or undefined
            assertParamExists('addNewFolder', 'templateFoldersAddNewFolderRequest', templateFoldersAddNewFolderRequest)
            const localVarPath = `/template-folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: templateFoldersAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/template-folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(templateFoldersAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific template folder, and mark all the templates in the folder as \'unfiled\'.
         * @summary Delete template folder
         * @param {string} folderId The unique id for the template folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteSpecificFolder', 'folderId', folderId)
            const localVarPath = `/template-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/template-folders/{folder_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific folder used to organize templates.
         * @summary Get template folder
         * @param {string} folderId The unique id for the template folder.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (folderId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getInfo', 'folderId', folderId)
            const localVarPath = `/template-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/template-folders/{folder_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all folders used to organize templates.
         * @summary List template folders
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/template-folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/template-folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific folder used to organize templates.
         * @summary Update template folder
         * @param {string} folderId The unique id for the template folder.
         * @param {TemplateFoldersAddNewFolderRequest} templateFoldersAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder: async (folderId: string, templateFoldersAddNewFolderRequest: TemplateFoldersAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('updateSpecificFolder', 'folderId', folderId)
            // verify required parameter 'templateFoldersAddNewFolderRequest' is not null or undefined
            assertParamExists('updateSpecificFolder', 'templateFoldersAddNewFolderRequest', templateFoldersAddNewFolderRequest)
            const localVarPath = `/template-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: templateFoldersAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/template-folders/{folder_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(templateFoldersAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateFoldersApi - functional programming interface
 * @export
 */
export const TemplateFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new template folder.
         * @summary Add template folder
         * @param {TemplateFoldersApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewFolder(requestParameters: TemplateFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateFoldersAddNewFolderResponse>> {
            const templateFoldersAddNewFolderRequest: TemplateFoldersAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewFolder(templateFoldersAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific template folder, and mark all the templates in the folder as \'unfiled\'.
         * @summary Delete template folder
         * @param {TemplateFoldersApiDeleteSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificFolder(requestParameters: TemplateFoldersApiDeleteSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificFolder(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific folder used to organize templates.
         * @summary Get template folder
         * @param {TemplateFoldersApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: TemplateFoldersApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateFoldersGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.folderId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all folders used to organize templates.
         * @summary List template folders
         * @param {TemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolders(requestParameters: TemplateFoldersApiListFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateFoldersListFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolders(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific folder used to organize templates.
         * @summary Update template folder
         * @param {TemplateFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificFolder(requestParameters: TemplateFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateFoldersUpdateSpecificFolderResponse>> {
            const templateFoldersAddNewFolderRequest: TemplateFoldersAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificFolder(requestParameters.folderId, templateFoldersAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateFoldersApi - factory interface
 * @export
 */
export const TemplateFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateFoldersApiFp(configuration)
    return {
        /**
         * Create a new template folder.
         * @summary Add template folder
         * @param {TemplateFoldersApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder(requestParameters: TemplateFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateFoldersAddNewFolderResponse> {
            return localVarFp.addNewFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific template folder, and mark all the templates in the folder as \'unfiled\'.
         * @summary Delete template folder
         * @param {TemplateFoldersApiDeleteSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificFolder(requestParameters: TemplateFoldersApiDeleteSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific folder used to organize templates.
         * @summary Get template folder
         * @param {TemplateFoldersApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: TemplateFoldersApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateFoldersGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all folders used to organize templates.
         * @summary List template folders
         * @param {TemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders(requestParameters: TemplateFoldersApiListFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateFoldersListFoldersResponse> {
            return localVarFp.listFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific folder used to organize templates.
         * @summary Update template folder
         * @param {TemplateFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder(requestParameters: TemplateFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateFoldersUpdateSpecificFolderResponse> {
            return localVarFp.updateSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewFolder operation in TemplateFoldersApi.
 * @export
 * @interface TemplateFoldersApiAddNewFolderRequest
 */
export type TemplateFoldersApiAddNewFolderRequest = {
    
} & TemplateFoldersAddNewFolderRequest

/**
 * Request parameters for deleteSpecificFolder operation in TemplateFoldersApi.
 * @export
 * @interface TemplateFoldersApiDeleteSpecificFolderRequest
 */
export type TemplateFoldersApiDeleteSpecificFolderRequest = {
    
    /**
    * The unique id for the template folder.
    * @type {string}
    * @memberof TemplateFoldersApiDeleteSpecificFolder
    */
    readonly folderId: string
    
}

/**
 * Request parameters for getInfo operation in TemplateFoldersApi.
 * @export
 * @interface TemplateFoldersApiGetInfoRequest
 */
export type TemplateFoldersApiGetInfoRequest = {
    
    /**
    * The unique id for the template folder.
    * @type {string}
    * @memberof TemplateFoldersApiGetInfo
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof TemplateFoldersApiGetInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof TemplateFoldersApiGetInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listFolders operation in TemplateFoldersApi.
 * @export
 * @interface TemplateFoldersApiListFoldersRequest
 */
export type TemplateFoldersApiListFoldersRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof TemplateFoldersApiListFolders
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof TemplateFoldersApiListFolders
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof TemplateFoldersApiListFolders
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof TemplateFoldersApiListFolders
    */
    readonly offset?: number
    
}

/**
 * Request parameters for updateSpecificFolder operation in TemplateFoldersApi.
 * @export
 * @interface TemplateFoldersApiUpdateSpecificFolderRequest
 */
export type TemplateFoldersApiUpdateSpecificFolderRequest = {
    
    /**
    * The unique id for the template folder.
    * @type {string}
    * @memberof TemplateFoldersApiUpdateSpecificFolder
    */
    readonly folderId: string
    
} & TemplateFoldersAddNewFolderRequest

/**
 * TemplateFoldersApiGenerated - object-oriented interface
 * @export
 * @class TemplateFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class TemplateFoldersApiGenerated extends BaseAPI {
    /**
     * Create a new template folder.
     * @summary Add template folder
     * @param {TemplateFoldersApiAddNewFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateFoldersApiGenerated
     */
    public addNewFolder(requestParameters: TemplateFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig) {
        return TemplateFoldersApiFp(this.configuration).addNewFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific template folder, and mark all the templates in the folder as \'unfiled\'.
     * @summary Delete template folder
     * @param {TemplateFoldersApiDeleteSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateFoldersApiGenerated
     */
    public deleteSpecificFolder(requestParameters: TemplateFoldersApiDeleteSpecificFolderRequest, options?: AxiosRequestConfig) {
        return TemplateFoldersApiFp(this.configuration).deleteSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific folder used to organize templates.
     * @summary Get template folder
     * @param {TemplateFoldersApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateFoldersApiGenerated
     */
    public getInfo(requestParameters: TemplateFoldersApiGetInfoRequest, options?: AxiosRequestConfig) {
        return TemplateFoldersApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all folders used to organize templates.
     * @summary List template folders
     * @param {TemplateFoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateFoldersApiGenerated
     */
    public listFolders(requestParameters: TemplateFoldersApiListFoldersRequest, options?: AxiosRequestConfig) {
        return TemplateFoldersApiFp(this.configuration).listFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific folder used to organize templates.
     * @summary Update template folder
     * @param {TemplateFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateFoldersApiGenerated
     */
    public updateSpecificFolder(requestParameters: TemplateFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig) {
        return TemplateFoldersApiFp(this.configuration).updateSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
