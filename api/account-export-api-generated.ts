/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountExportInfo200Response } from '../models';
// @ts-ignore
import { AccountExportInfoResponse } from '../models';
// @ts-ignore
import { AccountExportInfodefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountExportApi - axios parameter creator
 * @export
 */
export const AccountExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about a specific account export.
         * @summary Get account export info
         * @param {string} exportId The unique id for the account export.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (exportId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportId' is not null or undefined
            assertParamExists('info', 'exportId', exportId)
            const localVarPath = `/account-exports/{export_id}`
                .replace(`{${"export_id"}}`, encodeURIComponent(String(exportId !== undefined ? exportId : `-export_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-exports/{export_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountExportApi - functional programming interface
 * @export
 */
export const AccountExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountExportApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about a specific account export.
         * @summary Get account export info
         * @param {AccountExportApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(requestParameters: AccountExportApiInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountExportInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(requestParameters.exportId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountExportApi - factory interface
 * @export
 */
export const AccountExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountExportApiFp(configuration)
    return {
        /**
         * Get information about a specific account export.
         * @summary Get account export info
         * @param {AccountExportApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(requestParameters: AccountExportApiInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AccountExportInfoResponse> {
            return localVarFp.info(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for info operation in AccountExportApi.
 * @export
 * @interface AccountExportApiInfoRequest
 */
export type AccountExportApiInfoRequest = {
    
    /**
    * The unique id for the account export.
    * @type {string}
    * @memberof AccountExportApiInfo
    */
    readonly exportId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AccountExportApiInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AccountExportApiInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * AccountExportApiGenerated - object-oriented interface
 * @export
 * @class AccountExportApiGenerated
 * @extends {BaseAPI}
 */
export class AccountExportApiGenerated extends BaseAPI {
    /**
     * Get information about a specific account export.
     * @summary Get account export info
     * @param {AccountExportApiInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountExportApiGenerated
     */
    public info(requestParameters: AccountExportApiInfoRequest, options?: AxiosRequestConfig) {
        return AccountExportApiFp(this.configuration).info(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
