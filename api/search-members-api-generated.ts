/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SearchMembersListMembers200Response } from '../models';
// @ts-ignore
import { SearchMembersListMembersResponse } from '../models';
// @ts-ignore
import { SearchMembersListMembersdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchMembersApi - axios parameter creator
 * @export
 */
export const SearchMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.
         * @summary Search members
         * @param {string} query The search query used to filter results. Query should be a valid email, or a string representing a contact\&#39;s first or last name.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {string} [listId] The unique id for the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (query: string, fields?: Array<string>, excludeFields?: Array<string>, listId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('listMembers', 'query', query)
            const localVarPath = `/search-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (listId !== undefined) {
                localVarQueryParameter['list_id'] = listId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchMembersApi - functional programming interface
 * @export
 */
export const SearchMembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchMembersApiAxiosParamCreator(configuration)
    return {
        /**
         * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.
         * @summary Search members
         * @param {SearchMembersApiListMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(requestParameters: SearchMembersApiListMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchMembersListMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(requestParameters.query, requestParameters.fields, requestParameters.excludeFields, requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchMembersApi - factory interface
 * @export
 */
export const SearchMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchMembersApiFp(configuration)
    return {
        /**
         * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.
         * @summary Search members
         * @param {SearchMembersApiListMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(requestParameters: SearchMembersApiListMembersRequest, options?: AxiosRequestConfig): AxiosPromise<SearchMembersListMembersResponse> {
            return localVarFp.listMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listMembers operation in SearchMembersApi.
 * @export
 * @interface SearchMembersApiListMembersRequest
 */
export type SearchMembersApiListMembersRequest = {
    
    /**
    * The search query used to filter results. Query should be a valid email, or a string representing a contact\'s first or last name.
    * @type {string}
    * @memberof SearchMembersApiListMembers
    */
    readonly query: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof SearchMembersApiListMembers
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof SearchMembersApiListMembers
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The unique id for the list.
    * @type {string}
    * @memberof SearchMembersApiListMembers
    */
    readonly listId?: string
    
}

/**
 * SearchMembersApiGenerated - object-oriented interface
 * @export
 * @class SearchMembersApiGenerated
 * @extends {BaseAPI}
 */
export class SearchMembersApiGenerated extends BaseAPI {
    /**
     * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.
     * @summary Search members
     * @param {SearchMembersApiListMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchMembersApiGenerated
     */
    public listMembers(requestParameters: SearchMembersApiListMembersRequest, options?: AxiosRequestConfig) {
        return SearchMembersApiFp(this.configuration).listMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
