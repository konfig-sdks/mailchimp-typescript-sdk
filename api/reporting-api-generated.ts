/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportingFacebookAdReport200Response } from '../models';
// @ts-ignore
import { ReportingFacebookAdReportResponse } from '../models';
// @ts-ignore
import { ReportingFacebookAdReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportingGetLandingPageReport200Response } from '../models';
// @ts-ignore
import { ReportingGetLandingPageReportResponse } from '../models';
// @ts-ignore
import { ReportingGetLandingPageReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportingGetSurveyReport200Response } from '../models';
// @ts-ignore
import { ReportingGetSurveyReportResponse } from '../models';
// @ts-ignore
import { ReportingGetSurveyReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportingListFacebookAdsReports200Response } from '../models';
// @ts-ignore
import { ReportingListFacebookAdsReportsResponse } from '../models';
// @ts-ignore
import { ReportingListFacebookAdsReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportingListFacebookEcommerceReport200Response } from '../models';
// @ts-ignore
import { ReportingListFacebookEcommerceReportResponse } from '../models';
// @ts-ignore
import { ReportingListFacebookEcommerceReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportingListLandingPagesReports200Response } from '../models';
// @ts-ignore
import { ReportingListLandingPagesReportsResponse } from '../models';
// @ts-ignore
import { ReportingListLandingPagesReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportingListSurveyQuestionsReports200Response } from '../models';
// @ts-ignore
import { ReportingListSurveyQuestionsReportsResponse } from '../models';
// @ts-ignore
import { ReportingListSurveyQuestionsReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportingListSurveyReports200Response } from '../models';
// @ts-ignore
import { ReportingListSurveyReportsResponse } from '../models';
// @ts-ignore
import { ReportingListSurveyReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportingSingleSurveyResponse200Response } from '../models';
// @ts-ignore
import { ReportingSingleSurveyResponseResponse } from '../models';
// @ts-ignore
import { ReportingSingleSurveyResponsedefaultResponse } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionAnswersList200Response } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionAnswersListResponse } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionAnswersListdefaultResponse } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionReport200Response } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionReportResponse } from '../models';
// @ts-ignore
import { ReportingSurveyQuestionReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportingSurveyResponsesList200Response } from '../models';
// @ts-ignore
import { ReportingSurveyResponsesListResponse } from '../models';
// @ts-ignore
import { ReportingSurveyResponsesListdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportingApi - axios parameter creator
 * @export
 */
export const ReportingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get report of a Facebook ad.
         * @summary Get facebook ad report
         * @param {string} outreachId The outreach id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookAdReport: async (outreachId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'outreachId' is not null or undefined
            assertParamExists('facebookAdReport', 'outreachId', outreachId)
            const localVarPath = `/reporting/facebook-ads/{outreach_id}`
                .replace(`{${"outreach_id"}}`, encodeURIComponent(String(outreachId !== undefined ? outreachId : `-outreach_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/facebook-ads/{outreach_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get report of a landing page.
         * @summary Get landing page report
         * @param {string} outreachId The outreach id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandingPageReport: async (outreachId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'outreachId' is not null or undefined
            assertParamExists('getLandingPageReport', 'outreachId', outreachId)
            const localVarPath = `/reporting/landing-pages/{outreach_id}`
                .replace(`{${"outreach_id"}}`, encodeURIComponent(String(outreachId !== undefined ? outreachId : `-outreach_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/landing-pages/{outreach_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get report for a survey.
         * @summary Get survey report
         * @param {string} surveyId The ID of the survey.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveyReport: async (surveyId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getSurveyReport', 'surveyId', surveyId)
            const localVarPath = `/reporting/surveys/{survey_id}`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reports of Facebook ads.
         * @summary List facebook ads reports
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'created_at' | 'updated_at' | 'end_time'} [sortField] Returns files sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFacebookAdsReports: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, sortField?: 'created_at' | 'updated_at' | 'end_time', sortDir?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reporting/facebook-ads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/facebook-ads',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get breakdown of product activity for an outreach.
         * @summary List facebook ecommerce report
         * @param {string} outreachId The outreach id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'title' | 'total_revenue' | 'total_purchased'} [sortField] Returns files sorted by the specified field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFacebookEcommerceReport: async (outreachId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, sortField?: 'title' | 'total_revenue' | 'total_purchased', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'outreachId' is not null or undefined
            assertParamExists('listFacebookEcommerceReport', 'outreachId', outreachId)
            const localVarPath = `/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity`
                .replace(`{${"outreach_id"}}`, encodeURIComponent(String(outreachId !== undefined ? outreachId : `-outreach_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reports of landing pages.
         * @summary List landing pages reports
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLandingPagesReports: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reporting/landing-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/landing-pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reports for survey questions.
         * @summary List survey question reports
         * @param {string} surveyId The ID of the survey.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSurveyQuestionsReports: async (surveyId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('listSurveyQuestionsReports', 'surveyId', surveyId)
            const localVarPath = `/reporting/surveys/{survey_id}/questions`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}/questions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reports for surveys.
         * @summary List survey reports
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSurveyReports: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reporting/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single survey response.
         * @summary Get survey response
         * @param {string} surveyId The ID of the survey.
         * @param {string} responseId The ID of the survey response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleSurveyResponse: async (surveyId: string, responseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('singleSurveyResponse', 'surveyId', surveyId)
            // verify required parameter 'responseId' is not null or undefined
            assertParamExists('singleSurveyResponse', 'responseId', responseId)
            const localVarPath = `/reporting/surveys/{survey_id}/responses/{response_id}`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)))
                .replace(`{${"response_id"}}`, encodeURIComponent(String(responseId !== undefined ? responseId : `-response_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}/responses/{response_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get answers for a survey question.
         * @summary List answers for question
         * @param {string} surveyId The ID of the survey.
         * @param {string} questionId The ID of the survey question.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {'new' | 'known' | 'unknown'} [respondentFamiliarityIs] Filter survey responses by familiarity of the respondents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyQuestionAnswersList: async (surveyId: string, questionId: string, fields?: Array<string>, excludeFields?: Array<string>, respondentFamiliarityIs?: 'new' | 'known' | 'unknown', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('surveyQuestionAnswersList', 'surveyId', surveyId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('surveyQuestionAnswersList', 'questionId', questionId)
            const localVarPath = `/reporting/surveys/{survey_id}/questions/{question_id}/answers`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)))
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId !== undefined ? questionId : `-question_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (respondentFamiliarityIs !== undefined) {
                localVarQueryParameter['respondent_familiarity_is'] = respondentFamiliarityIs;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}/questions/{question_id}/answers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get report for a survey question.
         * @summary Get survey question report
         * @param {string} surveyId The ID of the survey.
         * @param {string} questionId The ID of the survey question.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyQuestionReport: async (surveyId: string, questionId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('surveyQuestionReport', 'surveyId', surveyId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('surveyQuestionReport', 'questionId', questionId)
            const localVarPath = `/reporting/surveys/{survey_id}/questions/{question_id}`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)))
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId !== undefined ? questionId : `-question_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}/questions/{question_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get responses to a survey.
         * @summary List survey responses
         * @param {string} surveyId The ID of the survey.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [answeredQuestion] The ID of the question that was answered.
         * @param {string} [choseAnswer] The ID of the option chosen to filter responses on.
         * @param {'new' | 'known' | 'unknown'} [respondentFamiliarityIs] Filter survey responses by familiarity of the respondents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyResponsesList: async (surveyId: string, fields?: Array<string>, excludeFields?: Array<string>, answeredQuestion?: number, choseAnswer?: string, respondentFamiliarityIs?: 'new' | 'known' | 'unknown', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('surveyResponsesList', 'surveyId', surveyId)
            const localVarPath = `/reporting/surveys/{survey_id}/responses`
                .replace(`{${"survey_id"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-survey_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (answeredQuestion !== undefined) {
                localVarQueryParameter['answered_question'] = answeredQuestion;
            }

            if (choseAnswer !== undefined) {
                localVarQueryParameter['chose_answer'] = choseAnswer;
            }

            if (respondentFamiliarityIs !== undefined) {
                localVarQueryParameter['respondent_familiarity_is'] = respondentFamiliarityIs;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reporting/surveys/{survey_id}/responses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportingApi - functional programming interface
 * @export
 */
export const ReportingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportingApiAxiosParamCreator(configuration)
    return {
        /**
         * Get report of a Facebook ad.
         * @summary Get facebook ad report
         * @param {ReportingApiFacebookAdReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facebookAdReport(requestParameters: ReportingApiFacebookAdReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingFacebookAdReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facebookAdReport(requestParameters.outreachId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get report of a landing page.
         * @summary Get landing page report
         * @param {ReportingApiGetLandingPageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandingPageReport(requestParameters: ReportingApiGetLandingPageReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingGetLandingPageReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandingPageReport(requestParameters.outreachId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get report for a survey.
         * @summary Get survey report
         * @param {ReportingApiGetSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurveyReport(requestParameters: ReportingApiGetSurveyReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingGetSurveyReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurveyReport(requestParameters.surveyId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reports of Facebook ads.
         * @summary List facebook ads reports
         * @param {ReportingApiListFacebookAdsReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFacebookAdsReports(requestParameters: ReportingApiListFacebookAdsReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingListFacebookAdsReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFacebookAdsReports(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.sortField, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get breakdown of product activity for an outreach.
         * @summary List facebook ecommerce report
         * @param {ReportingApiListFacebookEcommerceReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFacebookEcommerceReport(requestParameters: ReportingApiListFacebookEcommerceReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingListFacebookEcommerceReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFacebookEcommerceReport(requestParameters.outreachId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.sortField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reports of landing pages.
         * @summary List landing pages reports
         * @param {ReportingApiListLandingPagesReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLandingPagesReports(requestParameters: ReportingApiListLandingPagesReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingListLandingPagesReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLandingPagesReports(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reports for survey questions.
         * @summary List survey question reports
         * @param {ReportingApiListSurveyQuestionsReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSurveyQuestionsReports(requestParameters: ReportingApiListSurveyQuestionsReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingListSurveyQuestionsReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSurveyQuestionsReports(requestParameters.surveyId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reports for surveys.
         * @summary List survey reports
         * @param {ReportingApiListSurveyReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSurveyReports(requestParameters: ReportingApiListSurveyReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingListSurveyReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSurveyReports(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single survey response.
         * @summary Get survey response
         * @param {ReportingApiSingleSurveyResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleSurveyResponse(requestParameters: ReportingApiSingleSurveyResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingSingleSurveyResponseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleSurveyResponse(requestParameters.surveyId, requestParameters.responseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get answers for a survey question.
         * @summary List answers for question
         * @param {ReportingApiSurveyQuestionAnswersListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveyQuestionAnswersList(requestParameters: ReportingApiSurveyQuestionAnswersListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingSurveyQuestionAnswersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveyQuestionAnswersList(requestParameters.surveyId, requestParameters.questionId, requestParameters.fields, requestParameters.excludeFields, requestParameters.respondentFamiliarityIs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get report for a survey question.
         * @summary Get survey question report
         * @param {ReportingApiSurveyQuestionReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveyQuestionReport(requestParameters: ReportingApiSurveyQuestionReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingSurveyQuestionReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveyQuestionReport(requestParameters.surveyId, requestParameters.questionId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get responses to a survey.
         * @summary List survey responses
         * @param {ReportingApiSurveyResponsesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveyResponsesList(requestParameters: ReportingApiSurveyResponsesListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportingSurveyResponsesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveyResponsesList(requestParameters.surveyId, requestParameters.fields, requestParameters.excludeFields, requestParameters.answeredQuestion, requestParameters.choseAnswer, requestParameters.respondentFamiliarityIs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportingApi - factory interface
 * @export
 */
export const ReportingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportingApiFp(configuration)
    return {
        /**
         * Get report of a Facebook ad.
         * @summary Get facebook ad report
         * @param {ReportingApiFacebookAdReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookAdReport(requestParameters: ReportingApiFacebookAdReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingFacebookAdReportResponse> {
            return localVarFp.facebookAdReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get report of a landing page.
         * @summary Get landing page report
         * @param {ReportingApiGetLandingPageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandingPageReport(requestParameters: ReportingApiGetLandingPageReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingGetLandingPageReportResponse> {
            return localVarFp.getLandingPageReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get report for a survey.
         * @summary Get survey report
         * @param {ReportingApiGetSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveyReport(requestParameters: ReportingApiGetSurveyReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingGetSurveyReportResponse> {
            return localVarFp.getSurveyReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reports of Facebook ads.
         * @summary List facebook ads reports
         * @param {ReportingApiListFacebookAdsReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFacebookAdsReports(requestParameters: ReportingApiListFacebookAdsReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingListFacebookAdsReportsResponse> {
            return localVarFp.listFacebookAdsReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get breakdown of product activity for an outreach.
         * @summary List facebook ecommerce report
         * @param {ReportingApiListFacebookEcommerceReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFacebookEcommerceReport(requestParameters: ReportingApiListFacebookEcommerceReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingListFacebookEcommerceReportResponse> {
            return localVarFp.listFacebookEcommerceReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reports of landing pages.
         * @summary List landing pages reports
         * @param {ReportingApiListLandingPagesReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLandingPagesReports(requestParameters: ReportingApiListLandingPagesReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingListLandingPagesReportsResponse> {
            return localVarFp.listLandingPagesReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reports for survey questions.
         * @summary List survey question reports
         * @param {ReportingApiListSurveyQuestionsReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSurveyQuestionsReports(requestParameters: ReportingApiListSurveyQuestionsReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingListSurveyQuestionsReportsResponse> {
            return localVarFp.listSurveyQuestionsReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reports for surveys.
         * @summary List survey reports
         * @param {ReportingApiListSurveyReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSurveyReports(requestParameters: ReportingApiListSurveyReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingListSurveyReportsResponse> {
            return localVarFp.listSurveyReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single survey response.
         * @summary Get survey response
         * @param {ReportingApiSingleSurveyResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleSurveyResponse(requestParameters: ReportingApiSingleSurveyResponseRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingSingleSurveyResponseResponse> {
            return localVarFp.singleSurveyResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get answers for a survey question.
         * @summary List answers for question
         * @param {ReportingApiSurveyQuestionAnswersListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyQuestionAnswersList(requestParameters: ReportingApiSurveyQuestionAnswersListRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingSurveyQuestionAnswersListResponse> {
            return localVarFp.surveyQuestionAnswersList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get report for a survey question.
         * @summary Get survey question report
         * @param {ReportingApiSurveyQuestionReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyQuestionReport(requestParameters: ReportingApiSurveyQuestionReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingSurveyQuestionReportResponse> {
            return localVarFp.surveyQuestionReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get responses to a survey.
         * @summary List survey responses
         * @param {ReportingApiSurveyResponsesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveyResponsesList(requestParameters: ReportingApiSurveyResponsesListRequest, options?: AxiosRequestConfig): AxiosPromise<ReportingSurveyResponsesListResponse> {
            return localVarFp.surveyResponsesList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for facebookAdReport operation in ReportingApi.
 * @export
 * @interface ReportingApiFacebookAdReportRequest
 */
export type ReportingApiFacebookAdReportRequest = {
    
    /**
    * The outreach id.
    * @type {string}
    * @memberof ReportingApiFacebookAdReport
    */
    readonly outreachId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiFacebookAdReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiFacebookAdReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getLandingPageReport operation in ReportingApi.
 * @export
 * @interface ReportingApiGetLandingPageReportRequest
 */
export type ReportingApiGetLandingPageReportRequest = {
    
    /**
    * The outreach id.
    * @type {string}
    * @memberof ReportingApiGetLandingPageReport
    */
    readonly outreachId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiGetLandingPageReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiGetLandingPageReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getSurveyReport operation in ReportingApi.
 * @export
 * @interface ReportingApiGetSurveyReportRequest
 */
export type ReportingApiGetSurveyReportRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiGetSurveyReport
    */
    readonly surveyId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiGetSurveyReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiGetSurveyReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listFacebookAdsReports operation in ReportingApi.
 * @export
 * @interface ReportingApiListFacebookAdsReportsRequest
 */
export type ReportingApiListFacebookAdsReportsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly offset?: number
    
    /**
    * Returns files sorted by the specified field.
    * @type {'created_at' | 'updated_at' | 'end_time'}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly sortField?: 'created_at' | 'updated_at' | 'end_time'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof ReportingApiListFacebookAdsReports
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for listFacebookEcommerceReport operation in ReportingApi.
 * @export
 * @interface ReportingApiListFacebookEcommerceReportRequest
 */
export type ReportingApiListFacebookEcommerceReportRequest = {
    
    /**
    * The outreach id.
    * @type {string}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly outreachId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly offset?: number
    
    /**
    * Returns files sorted by the specified field.
    * @type {'title' | 'total_revenue' | 'total_purchased'}
    * @memberof ReportingApiListFacebookEcommerceReport
    */
    readonly sortField?: 'title' | 'total_revenue' | 'total_purchased'
    
}

/**
 * Request parameters for listLandingPagesReports operation in ReportingApi.
 * @export
 * @interface ReportingApiListLandingPagesReportsRequest
 */
export type ReportingApiListLandingPagesReportsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListLandingPagesReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListLandingPagesReports
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportingApiListLandingPagesReports
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportingApiListLandingPagesReports
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listSurveyQuestionsReports operation in ReportingApi.
 * @export
 * @interface ReportingApiListSurveyQuestionsReportsRequest
 */
export type ReportingApiListSurveyQuestionsReportsRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiListSurveyQuestionsReports
    */
    readonly surveyId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListSurveyQuestionsReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListSurveyQuestionsReports
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listSurveyReports operation in ReportingApi.
 * @export
 * @interface ReportingApiListSurveyReportsRequest
 */
export type ReportingApiListSurveyReportsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListSurveyReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiListSurveyReports
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportingApiListSurveyReports
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportingApiListSurveyReports
    */
    readonly offset?: number
    
}

/**
 * Request parameters for singleSurveyResponse operation in ReportingApi.
 * @export
 * @interface ReportingApiSingleSurveyResponseRequest
 */
export type ReportingApiSingleSurveyResponseRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiSingleSurveyResponse
    */
    readonly surveyId: string
    
    /**
    * The ID of the survey response.
    * @type {string}
    * @memberof ReportingApiSingleSurveyResponse
    */
    readonly responseId: string
    
}

/**
 * Request parameters for surveyQuestionAnswersList operation in ReportingApi.
 * @export
 * @interface ReportingApiSurveyQuestionAnswersListRequest
 */
export type ReportingApiSurveyQuestionAnswersListRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiSurveyQuestionAnswersList
    */
    readonly surveyId: string
    
    /**
    * The ID of the survey question.
    * @type {string}
    * @memberof ReportingApiSurveyQuestionAnswersList
    */
    readonly questionId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyQuestionAnswersList
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyQuestionAnswersList
    */
    readonly excludeFields?: Array<string>
    
    /**
    * Filter survey responses by familiarity of the respondents.
    * @type {'new' | 'known' | 'unknown'}
    * @memberof ReportingApiSurveyQuestionAnswersList
    */
    readonly respondentFamiliarityIs?: 'new' | 'known' | 'unknown'
    
}

/**
 * Request parameters for surveyQuestionReport operation in ReportingApi.
 * @export
 * @interface ReportingApiSurveyQuestionReportRequest
 */
export type ReportingApiSurveyQuestionReportRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiSurveyQuestionReport
    */
    readonly surveyId: string
    
    /**
    * The ID of the survey question.
    * @type {string}
    * @memberof ReportingApiSurveyQuestionReport
    */
    readonly questionId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyQuestionReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyQuestionReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for surveyResponsesList operation in ReportingApi.
 * @export
 * @interface ReportingApiSurveyResponsesListRequest
 */
export type ReportingApiSurveyResponsesListRequest = {
    
    /**
    * The ID of the survey.
    * @type {string}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly surveyId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The ID of the question that was answered.
    * @type {number}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly answeredQuestion?: number
    
    /**
    * The ID of the option chosen to filter responses on.
    * @type {string}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly choseAnswer?: string
    
    /**
    * Filter survey responses by familiarity of the respondents.
    * @type {'new' | 'known' | 'unknown'}
    * @memberof ReportingApiSurveyResponsesList
    */
    readonly respondentFamiliarityIs?: 'new' | 'known' | 'unknown'
    
}

/**
 * ReportingApiGenerated - object-oriented interface
 * @export
 * @class ReportingApiGenerated
 * @extends {BaseAPI}
 */
export class ReportingApiGenerated extends BaseAPI {
    /**
     * Get report of a Facebook ad.
     * @summary Get facebook ad report
     * @param {ReportingApiFacebookAdReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public facebookAdReport(requestParameters: ReportingApiFacebookAdReportRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).facebookAdReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get report of a landing page.
     * @summary Get landing page report
     * @param {ReportingApiGetLandingPageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public getLandingPageReport(requestParameters: ReportingApiGetLandingPageReportRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).getLandingPageReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get report for a survey.
     * @summary Get survey report
     * @param {ReportingApiGetSurveyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public getSurveyReport(requestParameters: ReportingApiGetSurveyReportRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).getSurveyReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reports of Facebook ads.
     * @summary List facebook ads reports
     * @param {ReportingApiListFacebookAdsReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public listFacebookAdsReports(requestParameters: ReportingApiListFacebookAdsReportsRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).listFacebookAdsReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get breakdown of product activity for an outreach.
     * @summary List facebook ecommerce report
     * @param {ReportingApiListFacebookEcommerceReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public listFacebookEcommerceReport(requestParameters: ReportingApiListFacebookEcommerceReportRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).listFacebookEcommerceReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reports of landing pages.
     * @summary List landing pages reports
     * @param {ReportingApiListLandingPagesReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public listLandingPagesReports(requestParameters: ReportingApiListLandingPagesReportsRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).listLandingPagesReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reports for survey questions.
     * @summary List survey question reports
     * @param {ReportingApiListSurveyQuestionsReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public listSurveyQuestionsReports(requestParameters: ReportingApiListSurveyQuestionsReportsRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).listSurveyQuestionsReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reports for surveys.
     * @summary List survey reports
     * @param {ReportingApiListSurveyReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public listSurveyReports(requestParameters: ReportingApiListSurveyReportsRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).listSurveyReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single survey response.
     * @summary Get survey response
     * @param {ReportingApiSingleSurveyResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public singleSurveyResponse(requestParameters: ReportingApiSingleSurveyResponseRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).singleSurveyResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get answers for a survey question.
     * @summary List answers for question
     * @param {ReportingApiSurveyQuestionAnswersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public surveyQuestionAnswersList(requestParameters: ReportingApiSurveyQuestionAnswersListRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).surveyQuestionAnswersList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get report for a survey question.
     * @summary Get survey question report
     * @param {ReportingApiSurveyQuestionReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public surveyQuestionReport(requestParameters: ReportingApiSurveyQuestionReportRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).surveyQuestionReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get responses to a survey.
     * @summary List survey responses
     * @param {ReportingApiSurveyResponsesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingApiGenerated
     */
    public surveyResponsesList(requestParameters: ReportingApiSurveyResponsesListRequest, options?: AxiosRequestConfig) {
        return ReportingApiFp(this.configuration).surveyResponsesList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
