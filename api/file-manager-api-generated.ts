/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FileManagerAddNewFolder200Response } from '../models';
// @ts-ignore
import { FileManagerAddNewFolderRequest } from '../models';
// @ts-ignore
import { FileManagerAddNewFolderResponse } from '../models';
// @ts-ignore
import { FileManagerAddNewFolderdefaultResponse } from '../models';
// @ts-ignore
import { FileManagerDeleteFolderByIdResponse } from '../models';
// @ts-ignore
import { FileManagerDeleteFolderByIddefaultResponse } from '../models';
// @ts-ignore
import { FileManagerGetFile200Response } from '../models';
// @ts-ignore
import { FileManagerGetFileResponse } from '../models';
// @ts-ignore
import { FileManagerGetFiledefaultResponse } from '../models';
// @ts-ignore
import { FileManagerGetFolderInfo200Response } from '../models';
// @ts-ignore
import { FileManagerGetFolderInfoResponse } from '../models';
// @ts-ignore
import { FileManagerGetFolderInfodefaultResponse } from '../models';
// @ts-ignore
import { FileManagerGetFolderList200Response } from '../models';
// @ts-ignore
import { FileManagerGetFolderListResponse } from '../models';
// @ts-ignore
import { FileManagerGetFolderListdefaultResponse } from '../models';
// @ts-ignore
import { FileManagerListStoredFiles200Response } from '../models';
// @ts-ignore
import { FileManagerListStoredFilesResponse } from '../models';
// @ts-ignore
import { FileManagerListStoredFilesdefaultResponse } from '../models';
// @ts-ignore
import { FileManagerRemoveFileByIdResponse } from '../models';
// @ts-ignore
import { FileManagerRemoveFileByIddefaultResponse } from '../models';
// @ts-ignore
import { FileManagerUpdateFile200Response } from '../models';
// @ts-ignore
import { FileManagerUpdateFileRequest } from '../models';
// @ts-ignore
import { FileManagerUpdateFileResponse } from '../models';
// @ts-ignore
import { FileManagerUpdateFiledefaultResponse } from '../models';
// @ts-ignore
import { FileManagerUpdateSpecificFolder200Response } from '../models';
// @ts-ignore
import { FileManagerUpdateSpecificFolderResponse } from '../models';
// @ts-ignore
import { FileManagerUpdateSpecificFolderdefaultResponse } from '../models';
// @ts-ignore
import { FileManagerUploadFile200Response } from '../models';
// @ts-ignore
import { FileManagerUploadFileRequest } from '../models';
// @ts-ignore
import { FileManagerUploadFileResponse } from '../models';
// @ts-ignore
import { FileManagerUploadFiledefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileManagerApi - axios parameter creator
 * @export
 */
export const FileManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new folder in the File Manager.
         * @summary Add folder
         * @param {FileManagerAddNewFolderRequest} fileManagerAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder: async (fileManagerAddNewFolderRequest: FileManagerAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileManagerAddNewFolderRequest' is not null or undefined
            assertParamExists('addNewFolder', 'fileManagerAddNewFolderRequest', fileManagerAddNewFolderRequest)
            const localVarPath = `/file-manager/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileManagerAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileManagerAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific folder in the File Manager.
         * @summary Delete folder
         * @param {string} folderId The unique id for the File Manager folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderById: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolderById', 'folderId', folderId)
            const localVarPath = `/file-manager/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders/{folder_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific file in the File Manager.
         * @summary Get file
         * @param {string} fileId The unique id for the File Manager file.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFile', 'fileId', fileId)
            const localVarPath = `/file-manager/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/files/{file_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific folder in the File Manager.
         * @summary Get folder
         * @param {string} folderId The unique id for the File Manager folder.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderInfo: async (folderId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderInfo', 'folderId', folderId)
            const localVarPath = `/file-manager/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders/{folder_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all folders in the File Manager.
         * @summary List folders
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [createdBy] The Mailchimp account user who created the File Manager file.
         * @param {string} [beforeCreatedAt] Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceCreatedAt] Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderList: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, createdBy?: string, beforeCreatedAt?: string, sinceCreatedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file-manager/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }

            if (beforeCreatedAt !== undefined) {
                localVarQueryParameter['before_created_at'] = beforeCreatedAt;
            }

            if (sinceCreatedAt !== undefined) {
                localVarQueryParameter['since_created_at'] = sinceCreatedAt;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of available images and files stored in the File Manager for the account.
         * @summary List stored files
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [type] The file type for the File Manager file.
         * @param {string} [createdBy] The Mailchimp account user who created the File Manager file.
         * @param {string} [beforeCreatedAt] Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceCreatedAt] Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {'added_date' | 'name' | 'size'} [sortField] Returns files sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoredFiles: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, type?: string, createdBy?: string, beforeCreatedAt?: string, sinceCreatedAt?: string, sortField?: 'added_date' | 'name' | 'size', sortDir?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file-manager/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }

            if (beforeCreatedAt !== undefined) {
                localVarQueryParameter['before_created_at'] = beforeCreatedAt;
            }

            if (sinceCreatedAt !== undefined) {
                localVarQueryParameter['since_created_at'] = sinceCreatedAt;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of available images and files stored in this folder.
         * @summary List stored files
         * @param {string} folderId The unique id for the File Manager folder.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [type] The file type for the File Manager file.
         * @param {string} [createdBy] The Mailchimp account user who created the File Manager file.
         * @param {string} [beforeCreatedAt] Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceCreatedAt] Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {'added_date' | 'name' | 'size'} [sortField] Returns files sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoredFiles_1: async (folderId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, type?: string, createdBy?: string, beforeCreatedAt?: string, sinceCreatedAt?: string, sortField?: 'added_date' | 'name' | 'size', sortDir?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('listStoredFiles_1', 'folderId', folderId)
            const localVarPath = `/file-manager/folders/{folder_id}/files`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }

            if (beforeCreatedAt !== undefined) {
                localVarQueryParameter['before_created_at'] = beforeCreatedAt;
            }

            if (sinceCreatedAt !== undefined) {
                localVarQueryParameter['since_created_at'] = sinceCreatedAt;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders/{folder_id}/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a specific file from the File Manager.
         * @summary Delete file
         * @param {string} fileId The unique id for the File Manager file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFileById: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('removeFileById', 'fileId', fileId)
            const localVarPath = `/file-manager/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/files/{file_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a file in the File Manager.
         * @summary Update file
         * @param {string} fileId The unique id for the File Manager file.
         * @param {FileManagerUpdateFileRequest} fileManagerUpdateFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile: async (fileId: string, fileManagerUpdateFileRequest: FileManagerUpdateFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateFile', 'fileId', fileId)
            // verify required parameter 'fileManagerUpdateFileRequest' is not null or undefined
            assertParamExists('updateFile', 'fileManagerUpdateFileRequest', fileManagerUpdateFileRequest)
            const localVarPath = `/file-manager/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileManagerUpdateFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/files/{file_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileManagerUpdateFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific File Manager folder.
         * @summary Update folder
         * @param {string} folderId The unique id for the File Manager folder.
         * @param {FileManagerAddNewFolderRequest} fileManagerAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder: async (folderId: string, fileManagerAddNewFolderRequest: FileManagerAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('updateSpecificFolder', 'folderId', folderId)
            // verify required parameter 'fileManagerAddNewFolderRequest' is not null or undefined
            assertParamExists('updateSpecificFolder', 'fileManagerAddNewFolderRequest', fileManagerAddNewFolderRequest)
            const localVarPath = `/file-manager/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileManagerAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/folders/{folder_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileManagerAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a new image or file to the File Manager.
         * @summary Add file
         * @param {FileManagerUploadFileRequest} fileManagerUploadFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (fileManagerUploadFileRequest: FileManagerUploadFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileManagerUploadFileRequest' is not null or undefined
            assertParamExists('uploadFile', 'fileManagerUploadFileRequest', fileManagerUploadFileRequest)
            const localVarPath = `/file-manager/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileManagerUploadFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file-manager/files',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileManagerUploadFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileManagerApi - functional programming interface
 * @export
 */
export const FileManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new folder in the File Manager.
         * @summary Add folder
         * @param {FileManagerApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewFolder(requestParameters: FileManagerApiAddNewFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerAddNewFolderResponse>> {
            const fileManagerAddNewFolderRequest: FileManagerAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewFolder(fileManagerAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific folder in the File Manager.
         * @summary Delete folder
         * @param {FileManagerApiDeleteFolderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolderById(requestParameters: FileManagerApiDeleteFolderByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolderById(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific file in the File Manager.
         * @summary Get file
         * @param {FileManagerApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(requestParameters: FileManagerApiGetFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerGetFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(requestParameters.fileId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific folder in the File Manager.
         * @summary Get folder
         * @param {FileManagerApiGetFolderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderInfo(requestParameters: FileManagerApiGetFolderInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerGetFolderInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderInfo(requestParameters.folderId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all folders in the File Manager.
         * @summary List folders
         * @param {FileManagerApiGetFolderListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderList(requestParameters: FileManagerApiGetFolderListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerGetFolderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderList(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.createdBy, requestParameters.beforeCreatedAt, requestParameters.sinceCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of available images and files stored in the File Manager for the account.
         * @summary List stored files
         * @param {FileManagerApiListStoredFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStoredFiles(requestParameters: FileManagerApiListStoredFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerListStoredFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStoredFiles(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.type, requestParameters.createdBy, requestParameters.beforeCreatedAt, requestParameters.sinceCreatedAt, requestParameters.sortField, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of available images and files stored in this folder.
         * @summary List stored files
         * @param {FileManagerApiListStoredFiles0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStoredFiles_1(requestParameters: FileManagerApiListStoredFiles0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerListStoredFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStoredFiles_1(requestParameters.folderId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.type, requestParameters.createdBy, requestParameters.beforeCreatedAt, requestParameters.sinceCreatedAt, requestParameters.sortField, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a specific file from the File Manager.
         * @summary Delete file
         * @param {FileManagerApiRemoveFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFileById(requestParameters: FileManagerApiRemoveFileByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFileById(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a file in the File Manager.
         * @summary Update file
         * @param {FileManagerApiUpdateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFile(requestParameters: FileManagerApiUpdateFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerUpdateFileResponse>> {
            const fileManagerUpdateFileRequest: FileManagerUpdateFileRequest = {
                folder_id: requestParameters.folder_id,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFile(requestParameters.fileId, fileManagerUpdateFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific File Manager folder.
         * @summary Update folder
         * @param {FileManagerApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificFolder(requestParameters: FileManagerApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerUpdateSpecificFolderResponse>> {
            const fileManagerAddNewFolderRequest: FileManagerAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificFolder(requestParameters.folderId, fileManagerAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload a new image or file to the File Manager.
         * @summary Add file
         * @param {FileManagerApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(requestParameters: FileManagerApiUploadFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileManagerUploadFileResponse>> {
            const fileManagerUploadFileRequest: FileManagerUploadFileRequest = {
                folder_id: requestParameters.folder_id,
                name: requestParameters.name,
                file_data: requestParameters.file_data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(fileManagerUploadFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileManagerApi - factory interface
 * @export
 */
export const FileManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileManagerApiFp(configuration)
    return {
        /**
         * Create a new folder in the File Manager.
         * @summary Add folder
         * @param {FileManagerApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder(requestParameters: FileManagerApiAddNewFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerAddNewFolderResponse> {
            return localVarFp.addNewFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific folder in the File Manager.
         * @summary Delete folder
         * @param {FileManagerApiDeleteFolderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderById(requestParameters: FileManagerApiDeleteFolderByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolderById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific file in the File Manager.
         * @summary Get file
         * @param {FileManagerApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(requestParameters: FileManagerApiGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerGetFileResponse> {
            return localVarFp.getFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific folder in the File Manager.
         * @summary Get folder
         * @param {FileManagerApiGetFolderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderInfo(requestParameters: FileManagerApiGetFolderInfoRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerGetFolderInfoResponse> {
            return localVarFp.getFolderInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all folders in the File Manager.
         * @summary List folders
         * @param {FileManagerApiGetFolderListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderList(requestParameters: FileManagerApiGetFolderListRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerGetFolderListResponse> {
            return localVarFp.getFolderList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of available images and files stored in the File Manager for the account.
         * @summary List stored files
         * @param {FileManagerApiListStoredFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoredFiles(requestParameters: FileManagerApiListStoredFilesRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerListStoredFilesResponse> {
            return localVarFp.listStoredFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of available images and files stored in this folder.
         * @summary List stored files
         * @param {FileManagerApiListStoredFiles0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoredFiles_1(requestParameters: FileManagerApiListStoredFiles0Request, options?: AxiosRequestConfig): AxiosPromise<FileManagerListStoredFiles200Response> {
            return localVarFp.listStoredFiles_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a specific file from the File Manager.
         * @summary Delete file
         * @param {FileManagerApiRemoveFileByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFileById(requestParameters: FileManagerApiRemoveFileByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFileById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a file in the File Manager.
         * @summary Update file
         * @param {FileManagerApiUpdateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile(requestParameters: FileManagerApiUpdateFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerUpdateFileResponse> {
            return localVarFp.updateFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific File Manager folder.
         * @summary Update folder
         * @param {FileManagerApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder(requestParameters: FileManagerApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerUpdateSpecificFolderResponse> {
            return localVarFp.updateSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a new image or file to the File Manager.
         * @summary Add file
         * @param {FileManagerApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(requestParameters: FileManagerApiUploadFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileManagerUploadFileResponse> {
            return localVarFp.uploadFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewFolder operation in FileManagerApi.
 * @export
 * @interface FileManagerApiAddNewFolderRequest
 */
export type FileManagerApiAddNewFolderRequest = {
    
} & FileManagerAddNewFolderRequest

/**
 * Request parameters for deleteFolderById operation in FileManagerApi.
 * @export
 * @interface FileManagerApiDeleteFolderByIdRequest
 */
export type FileManagerApiDeleteFolderByIdRequest = {
    
    /**
    * The unique id for the File Manager folder.
    * @type {string}
    * @memberof FileManagerApiDeleteFolderById
    */
    readonly folderId: string
    
}

/**
 * Request parameters for getFile operation in FileManagerApi.
 * @export
 * @interface FileManagerApiGetFileRequest
 */
export type FileManagerApiGetFileRequest = {
    
    /**
    * The unique id for the File Manager file.
    * @type {string}
    * @memberof FileManagerApiGetFile
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFile
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFile
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getFolderInfo operation in FileManagerApi.
 * @export
 * @interface FileManagerApiGetFolderInfoRequest
 */
export type FileManagerApiGetFolderInfoRequest = {
    
    /**
    * The unique id for the File Manager folder.
    * @type {string}
    * @memberof FileManagerApiGetFolderInfo
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFolderInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFolderInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getFolderList operation in FileManagerApi.
 * @export
 * @interface FileManagerApiGetFolderListRequest
 */
export type FileManagerApiGetFolderListRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFolderList
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiGetFolderList
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof FileManagerApiGetFolderList
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof FileManagerApiGetFolderList
    */
    readonly offset?: number
    
    /**
    * The Mailchimp account user who created the File Manager file.
    * @type {string}
    * @memberof FileManagerApiGetFolderList
    */
    readonly createdBy?: string
    
    /**
    * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiGetFolderList
    */
    readonly beforeCreatedAt?: string
    
    /**
    * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiGetFolderList
    */
    readonly sinceCreatedAt?: string
    
}

/**
 * Request parameters for listStoredFiles operation in FileManagerApi.
 * @export
 * @interface FileManagerApiListStoredFilesRequest
 */
export type FileManagerApiListStoredFilesRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly offset?: number
    
    /**
    * The file type for the File Manager file.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly type?: string
    
    /**
    * The Mailchimp account user who created the File Manager file.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly createdBy?: string
    
    /**
    * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly beforeCreatedAt?: string
    
    /**
    * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly sinceCreatedAt?: string
    
    /**
    * Returns files sorted by the specified field.
    * @type {'added_date' | 'name' | 'size'}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly sortField?: 'added_date' | 'name' | 'size'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof FileManagerApiListStoredFiles
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for listStoredFiles_1 operation in FileManagerApi.
 * @export
 * @interface FileManagerApiListStoredFiles0Request
 */
export type FileManagerApiListStoredFiles0Request = {
    
    /**
    * The unique id for the File Manager folder.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly offset?: number
    
    /**
    * The file type for the File Manager file.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly type?: string
    
    /**
    * The Mailchimp account user who created the File Manager file.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly createdBy?: string
    
    /**
    * Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly beforeCreatedAt?: string
    
    /**
    * Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly sinceCreatedAt?: string
    
    /**
    * Returns files sorted by the specified field.
    * @type {'added_date' | 'name' | 'size'}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly sortField?: 'added_date' | 'name' | 'size'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof FileManagerApiListStoredFiles0
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for removeFileById operation in FileManagerApi.
 * @export
 * @interface FileManagerApiRemoveFileByIdRequest
 */
export type FileManagerApiRemoveFileByIdRequest = {
    
    /**
    * The unique id for the File Manager file.
    * @type {string}
    * @memberof FileManagerApiRemoveFileById
    */
    readonly fileId: string
    
}

/**
 * Request parameters for updateFile operation in FileManagerApi.
 * @export
 * @interface FileManagerApiUpdateFileRequest
 */
export type FileManagerApiUpdateFileRequest = {
    
    /**
    * The unique id for the File Manager file.
    * @type {string}
    * @memberof FileManagerApiUpdateFile
    */
    readonly fileId: string
    
} & FileManagerUpdateFileRequest

/**
 * Request parameters for updateSpecificFolder operation in FileManagerApi.
 * @export
 * @interface FileManagerApiUpdateSpecificFolderRequest
 */
export type FileManagerApiUpdateSpecificFolderRequest = {
    
    /**
    * The unique id for the File Manager folder.
    * @type {string}
    * @memberof FileManagerApiUpdateSpecificFolder
    */
    readonly folderId: string
    
} & FileManagerAddNewFolderRequest

/**
 * Request parameters for uploadFile operation in FileManagerApi.
 * @export
 * @interface FileManagerApiUploadFileRequest
 */
export type FileManagerApiUploadFileRequest = {
    
} & FileManagerUploadFileRequest

/**
 * FileManagerApiGenerated - object-oriented interface
 * @export
 * @class FileManagerApiGenerated
 * @extends {BaseAPI}
 */
export class FileManagerApiGenerated extends BaseAPI {
    /**
     * Create a new folder in the File Manager.
     * @summary Add folder
     * @param {FileManagerApiAddNewFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public addNewFolder(requestParameters: FileManagerApiAddNewFolderRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).addNewFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific folder in the File Manager.
     * @summary Delete folder
     * @param {FileManagerApiDeleteFolderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public deleteFolderById(requestParameters: FileManagerApiDeleteFolderByIdRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).deleteFolderById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific file in the File Manager.
     * @summary Get file
     * @param {FileManagerApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public getFile(requestParameters: FileManagerApiGetFileRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).getFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific folder in the File Manager.
     * @summary Get folder
     * @param {FileManagerApiGetFolderInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public getFolderInfo(requestParameters: FileManagerApiGetFolderInfoRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).getFolderInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all folders in the File Manager.
     * @summary List folders
     * @param {FileManagerApiGetFolderListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public getFolderList(requestParameters: FileManagerApiGetFolderListRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).getFolderList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of available images and files stored in the File Manager for the account.
     * @summary List stored files
     * @param {FileManagerApiListStoredFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public listStoredFiles(requestParameters: FileManagerApiListStoredFilesRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).listStoredFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of available images and files stored in this folder.
     * @summary List stored files
     * @param {FileManagerApiListStoredFiles0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public listStoredFiles_1(requestParameters: FileManagerApiListStoredFiles0Request, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).listStoredFiles_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a specific file from the File Manager.
     * @summary Delete file
     * @param {FileManagerApiRemoveFileByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public removeFileById(requestParameters: FileManagerApiRemoveFileByIdRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).removeFileById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a file in the File Manager.
     * @summary Update file
     * @param {FileManagerApiUpdateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public updateFile(requestParameters: FileManagerApiUpdateFileRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).updateFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific File Manager folder.
     * @summary Update folder
     * @param {FileManagerApiUpdateSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public updateSpecificFolder(requestParameters: FileManagerApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).updateSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a new image or file to the File Manager.
     * @summary Add file
     * @param {FileManagerApiUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileManagerApiGenerated
     */
    public uploadFile(requestParameters: FileManagerApiUploadFileRequest, options?: AxiosRequestConfig) {
        return FileManagerApiFp(this.configuration).uploadFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
