/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VerifiedDomainsAddDomainToAccount200Response } from '../models';
// @ts-ignore
import { VerifiedDomainsAddDomainToAccountRequest } from '../models';
// @ts-ignore
import { VerifiedDomainsAddDomainToAccountResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsAddDomainToAccountdefaultResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsDeleteDomainResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsDeleteDomaindefaultResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsGetInfo200Response } from '../models';
// @ts-ignore
import { VerifiedDomainsGetInfoResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsGetInfodefaultResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsListSendingDomains200Response } from '../models';
// @ts-ignore
import { VerifiedDomainsListSendingDomainsResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsListSendingDomainsdefaultResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsVerifyDomainForSending200Response } from '../models';
// @ts-ignore
import { VerifiedDomainsVerifyDomainForSendingRequest } from '../models';
// @ts-ignore
import { VerifiedDomainsVerifyDomainForSendingResponse } from '../models';
// @ts-ignore
import { VerifiedDomainsVerifyDomainForSendingdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VerifiedDomainsApi - axios parameter creator
 * @export
 */
export const VerifiedDomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a domain to the account.
         * @summary Add domain to account
         * @param {VerifiedDomainsAddDomainToAccountRequest} verifiedDomainsAddDomainToAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomainToAccount: async (verifiedDomainsAddDomainToAccountRequest: VerifiedDomainsAddDomainToAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifiedDomainsAddDomainToAccountRequest' is not null or undefined
            assertParamExists('addDomainToAccount', 'verifiedDomainsAddDomainToAccountRequest', verifiedDomainsAddDomainToAccountRequest)
            const localVarPath = `/verified-domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifiedDomainsAddDomainToAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/verified-domains',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifiedDomainsAddDomainToAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a verified domain from the account.
         * @summary Delete domain
         * @param {string} domainName The domain name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (domainName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            assertParamExists('deleteDomain', 'domainName', domainName)
            const localVarPath = `/verified-domains/{domain_name}`
                .replace(`{${"domain_name"}}`, encodeURIComponent(String(domainName !== undefined ? domainName : `-domain_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/verified-domains/{domain_name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details for a single domain on the account.
         * @summary Get domain info
         * @param {string} domainName The domain name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (domainName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            assertParamExists('getInfo', 'domainName', domainName)
            const localVarPath = `/verified-domains/{domain_name}`
                .replace(`{${"domain_name"}}`, encodeURIComponent(String(domainName !== undefined ? domainName : `-domain_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/verified-domains/{domain_name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the sending domains on the account.
         * @summary List sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSendingDomains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/verified-domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/verified-domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a domain for sending.
         * @summary Verify domain
         * @param {string} domainName The domain name.
         * @param {VerifiedDomainsVerifyDomainForSendingRequest} verifiedDomainsVerifyDomainForSendingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDomainForSending: async (domainName: string, verifiedDomainsVerifyDomainForSendingRequest: VerifiedDomainsVerifyDomainForSendingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            assertParamExists('verifyDomainForSending', 'domainName', domainName)
            // verify required parameter 'verifiedDomainsVerifyDomainForSendingRequest' is not null or undefined
            assertParamExists('verifyDomainForSending', 'verifiedDomainsVerifyDomainForSendingRequest', verifiedDomainsVerifyDomainForSendingRequest)
            const localVarPath = `/verified-domains/{domain_name}/actions/verify`
                .replace(`{${"domain_name"}}`, encodeURIComponent(String(domainName !== undefined ? domainName : `-domain_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifiedDomainsVerifyDomainForSendingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/verified-domains/{domain_name}/actions/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifiedDomainsVerifyDomainForSendingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifiedDomainsApi - functional programming interface
 * @export
 */
export const VerifiedDomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifiedDomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a domain to the account.
         * @summary Add domain to account
         * @param {VerifiedDomainsApiAddDomainToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDomainToAccount(requestParameters: VerifiedDomainsApiAddDomainToAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifiedDomainsAddDomainToAccountResponse>> {
            const verifiedDomainsAddDomainToAccountRequest: VerifiedDomainsAddDomainToAccountRequest = {
                verification_email: requestParameters.verification_email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDomainToAccount(verifiedDomainsAddDomainToAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a verified domain from the account.
         * @summary Delete domain
         * @param {VerifiedDomainsApiDeleteDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(requestParameters: VerifiedDomainsApiDeleteDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomain(requestParameters.domainName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details for a single domain on the account.
         * @summary Get domain info
         * @param {VerifiedDomainsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: VerifiedDomainsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifiedDomainsGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.domainName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all of the sending domains on the account.
         * @summary List sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSendingDomains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifiedDomainsListSendingDomainsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSendingDomains(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a domain for sending.
         * @summary Verify domain
         * @param {VerifiedDomainsApiVerifyDomainForSendingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDomainForSending(requestParameters: VerifiedDomainsApiVerifyDomainForSendingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifiedDomainsVerifyDomainForSendingResponse>> {
            const verifiedDomainsVerifyDomainForSendingRequest: VerifiedDomainsVerifyDomainForSendingRequest = {
                code: requestParameters.code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDomainForSending(requestParameters.domainName, verifiedDomainsVerifyDomainForSendingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerifiedDomainsApi - factory interface
 * @export
 */
export const VerifiedDomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifiedDomainsApiFp(configuration)
    return {
        /**
         * Add a domain to the account.
         * @summary Add domain to account
         * @param {VerifiedDomainsApiAddDomainToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomainToAccount(requestParameters: VerifiedDomainsApiAddDomainToAccountRequest, options?: AxiosRequestConfig): AxiosPromise<VerifiedDomainsAddDomainToAccountResponse> {
            return localVarFp.addDomainToAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a verified domain from the account.
         * @summary Delete domain
         * @param {VerifiedDomainsApiDeleteDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(requestParameters: VerifiedDomainsApiDeleteDomainRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details for a single domain on the account.
         * @summary Get domain info
         * @param {VerifiedDomainsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: VerifiedDomainsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<VerifiedDomainsGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the sending domains on the account.
         * @summary List sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSendingDomains(options?: AxiosRequestConfig): AxiosPromise<VerifiedDomainsListSendingDomainsResponse> {
            return localVarFp.listSendingDomains(options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a domain for sending.
         * @summary Verify domain
         * @param {VerifiedDomainsApiVerifyDomainForSendingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDomainForSending(requestParameters: VerifiedDomainsApiVerifyDomainForSendingRequest, options?: AxiosRequestConfig): AxiosPromise<VerifiedDomainsVerifyDomainForSendingResponse> {
            return localVarFp.verifyDomainForSending(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDomainToAccount operation in VerifiedDomainsApi.
 * @export
 * @interface VerifiedDomainsApiAddDomainToAccountRequest
 */
export type VerifiedDomainsApiAddDomainToAccountRequest = {
    
} & VerifiedDomainsAddDomainToAccountRequest

/**
 * Request parameters for deleteDomain operation in VerifiedDomainsApi.
 * @export
 * @interface VerifiedDomainsApiDeleteDomainRequest
 */
export type VerifiedDomainsApiDeleteDomainRequest = {
    
    /**
    * The domain name.
    * @type {string}
    * @memberof VerifiedDomainsApiDeleteDomain
    */
    readonly domainName: string
    
}

/**
 * Request parameters for getInfo operation in VerifiedDomainsApi.
 * @export
 * @interface VerifiedDomainsApiGetInfoRequest
 */
export type VerifiedDomainsApiGetInfoRequest = {
    
    /**
    * The domain name.
    * @type {string}
    * @memberof VerifiedDomainsApiGetInfo
    */
    readonly domainName: string
    
}

/**
 * Request parameters for verifyDomainForSending operation in VerifiedDomainsApi.
 * @export
 * @interface VerifiedDomainsApiVerifyDomainForSendingRequest
 */
export type VerifiedDomainsApiVerifyDomainForSendingRequest = {
    
    /**
    * The domain name.
    * @type {string}
    * @memberof VerifiedDomainsApiVerifyDomainForSending
    */
    readonly domainName: string
    
} & VerifiedDomainsVerifyDomainForSendingRequest

/**
 * VerifiedDomainsApiGenerated - object-oriented interface
 * @export
 * @class VerifiedDomainsApiGenerated
 * @extends {BaseAPI}
 */
export class VerifiedDomainsApiGenerated extends BaseAPI {
    /**
     * Add a domain to the account.
     * @summary Add domain to account
     * @param {VerifiedDomainsApiAddDomainToAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifiedDomainsApiGenerated
     */
    public addDomainToAccount(requestParameters: VerifiedDomainsApiAddDomainToAccountRequest, options?: AxiosRequestConfig) {
        return VerifiedDomainsApiFp(this.configuration).addDomainToAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a verified domain from the account.
     * @summary Delete domain
     * @param {VerifiedDomainsApiDeleteDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifiedDomainsApiGenerated
     */
    public deleteDomain(requestParameters: VerifiedDomainsApiDeleteDomainRequest, options?: AxiosRequestConfig) {
        return VerifiedDomainsApiFp(this.configuration).deleteDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details for a single domain on the account.
     * @summary Get domain info
     * @param {VerifiedDomainsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifiedDomainsApiGenerated
     */
    public getInfo(requestParameters: VerifiedDomainsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return VerifiedDomainsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all of the sending domains on the account.
     * @summary List sending domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifiedDomainsApiGenerated
     */
    public listSendingDomains(options?: AxiosRequestConfig) {
        return VerifiedDomainsApiFp(this.configuration).listSendingDomains(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify a domain for sending.
     * @summary Verify domain
     * @param {VerifiedDomainsApiVerifyDomainForSendingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifiedDomainsApiGenerated
     */
    public verifyDomainForSending(requestParameters: VerifiedDomainsApiVerifyDomainForSendingRequest, options?: AxiosRequestConfig) {
        return VerifiedDomainsApiFp(this.configuration).verifyDomainForSending(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
