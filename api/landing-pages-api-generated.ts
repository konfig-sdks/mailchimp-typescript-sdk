/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LandingPagesCreateNewMailchimpLandingPage200Response } from '../models';
// @ts-ignore
import { LandingPagesCreateNewMailchimpLandingPageRequest } from '../models';
// @ts-ignore
import { LandingPagesCreateNewMailchimpLandingPageResponse } from '../models';
// @ts-ignore
import { LandingPagesCreateNewMailchimpLandingPagedefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesDeletePageResponse } from '../models';
// @ts-ignore
import { LandingPagesDeletePagedefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesGetContent200Response } from '../models';
// @ts-ignore
import { LandingPagesGetContentResponse } from '../models';
// @ts-ignore
import { LandingPagesGetContentdefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesGetPageInfo200Response } from '../models';
// @ts-ignore
import { LandingPagesGetPageInfoResponse } from '../models';
// @ts-ignore
import { LandingPagesGetPageInfodefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesList200Response } from '../models';
// @ts-ignore
import { LandingPagesListResponse } from '../models';
// @ts-ignore
import { LandingPagesListdefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesPublishActionResponse } from '../models';
// @ts-ignore
import { LandingPagesPublishActiondefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesUnpublishActionResponse } from '../models';
// @ts-ignore
import { LandingPagesUnpublishActiondefaultResponse } from '../models';
// @ts-ignore
import { LandingPagesUpdatePageById200Response } from '../models';
// @ts-ignore
import { LandingPagesUpdatePageByIdRequest } from '../models';
// @ts-ignore
import { LandingPagesUpdatePageByIdResponse } from '../models';
// @ts-ignore
import { LandingPagesUpdatePageByIddefaultResponse } from '../models';
// @ts-ignore
import { TrackingSettingsProperty } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LandingPagesApi - axios parameter creator
 * @export
 */
export const LandingPagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Mailchimp landing page.
         * @summary Add landing page
         * @param {LandingPagesCreateNewMailchimpLandingPageRequest} landingPagesCreateNewMailchimpLandingPageRequest 
         * @param {boolean} [useDefaultList] Will create the Landing Page using the account\&#39;s Default List instead of requiring a list_id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMailchimpLandingPage: async (landingPagesCreateNewMailchimpLandingPageRequest: LandingPagesCreateNewMailchimpLandingPageRequest, useDefaultList?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'landingPagesCreateNewMailchimpLandingPageRequest' is not null or undefined
            assertParamExists('createNewMailchimpLandingPage', 'landingPagesCreateNewMailchimpLandingPageRequest', landingPagesCreateNewMailchimpLandingPageRequest)
            const localVarPath = `/landing-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (useDefaultList !== undefined) {
                localVarQueryParameter['use_default_list'] = useDefaultList;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: landingPagesCreateNewMailchimpLandingPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(landingPagesCreateNewMailchimpLandingPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a landing page.
         * @summary Delete landing page
         * @param {string} pageId The unique id for the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: async (pageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('deletePage', 'pageId', pageId)
            const localVarPath = `/landing-pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the the HTML for your landing page.
         * @summary Get landing page content
         * @param {string} pageId The unique id for the page.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent: async (pageId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getContent', 'pageId', pageId)
            const localVarPath = `/landing-pages/{page_id}/content`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific page.
         * @summary Get landing page info
         * @param {string} pageId The unique id for the page.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageInfo: async (pageId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPageInfo', 'pageId', pageId)
            const localVarPath = `/landing-pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all landing pages.
         * @summary List landing pages
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {'created_at' | 'updated_at'} [sortField] Returns files sorted by the specified field.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (sortDir?: 'ASC' | 'DESC', sortField?: 'created_at' | 'updated_at', fields?: Array<string>, excludeFields?: Array<string>, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/landing-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
         * @summary Publish landing page
         * @param {string} pageId The unique id for the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAction: async (pageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('publishAction', 'pageId', pageId)
            const localVarPath = `/landing-pages/{page_id}/actions/publish`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}/actions/publish',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unpublish a landing page that is in draft or has been published.
         * @summary Unpublish landing page
         * @param {string} pageId The unique id for the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishAction: async (pageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('unpublishAction', 'pageId', pageId)
            const localVarPath = `/landing-pages/{page_id}/actions/unpublish`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}/actions/unpublish',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a landing page.
         * @summary Update landing page
         * @param {string} pageId The unique id for the page.
         * @param {LandingPagesUpdatePageByIdRequest} landingPagesUpdatePageByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageById: async (pageId: string, landingPagesUpdatePageByIdRequest: LandingPagesUpdatePageByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('updatePageById', 'pageId', pageId)
            // verify required parameter 'landingPagesUpdatePageByIdRequest' is not null or undefined
            assertParamExists('updatePageById', 'landingPagesUpdatePageByIdRequest', landingPagesUpdatePageByIdRequest)
            const localVarPath = `/landing-pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: landingPagesUpdatePageByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/landing-pages/{page_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(landingPagesUpdatePageByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LandingPagesApi - functional programming interface
 * @export
 */
export const LandingPagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LandingPagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Mailchimp landing page.
         * @summary Add landing page
         * @param {LandingPagesApiCreateNewMailchimpLandingPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMailchimpLandingPage(requestParameters: LandingPagesApiCreateNewMailchimpLandingPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandingPagesCreateNewMailchimpLandingPageResponse>> {
            const landingPagesCreateNewMailchimpLandingPageRequest: LandingPagesCreateNewMailchimpLandingPageRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                name: requestParameters.name,
                store_id: requestParameters.store_id,
                list_id: requestParameters.list_id,
                type: requestParameters.type,
                template_id: requestParameters.template_id,
                tracking: requestParameters.tracking
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewMailchimpLandingPage(landingPagesCreateNewMailchimpLandingPageRequest, requestParameters.useDefaultList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a landing page.
         * @summary Delete landing page
         * @param {LandingPagesApiDeletePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePage(requestParameters: LandingPagesApiDeletePageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(requestParameters.pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the the HTML for your landing page.
         * @summary Get landing page content
         * @param {LandingPagesApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContent(requestParameters: LandingPagesApiGetContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandingPagesGetContentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContent(requestParameters.pageId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific page.
         * @summary Get landing page info
         * @param {LandingPagesApiGetPageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageInfo(requestParameters: LandingPagesApiGetPageInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandingPagesGetPageInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageInfo(requestParameters.pageId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all landing pages.
         * @summary List landing pages
         * @param {LandingPagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: LandingPagesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandingPagesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.sortDir, requestParameters.sortField, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
         * @summary Publish landing page
         * @param {LandingPagesApiPublishActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishAction(requestParameters: LandingPagesApiPublishActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishAction(requestParameters.pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unpublish a landing page that is in draft or has been published.
         * @summary Unpublish landing page
         * @param {LandingPagesApiUnpublishActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishAction(requestParameters: LandingPagesApiUnpublishActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishAction(requestParameters.pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a landing page.
         * @summary Update landing page
         * @param {LandingPagesApiUpdatePageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageById(requestParameters: LandingPagesApiUpdatePageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LandingPagesUpdatePageByIdResponse>> {
            const landingPagesUpdatePageByIdRequest: LandingPagesUpdatePageByIdRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                name: requestParameters.name,
                store_id: requestParameters.store_id,
                list_id: requestParameters.list_id,
                tracking: requestParameters.tracking
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePageById(requestParameters.pageId, landingPagesUpdatePageByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LandingPagesApi - factory interface
 * @export
 */
export const LandingPagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LandingPagesApiFp(configuration)
    return {
        /**
         * Create a new Mailchimp landing page.
         * @summary Add landing page
         * @param {LandingPagesApiCreateNewMailchimpLandingPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMailchimpLandingPage(requestParameters: LandingPagesApiCreateNewMailchimpLandingPageRequest, options?: AxiosRequestConfig): AxiosPromise<LandingPagesCreateNewMailchimpLandingPageResponse> {
            return localVarFp.createNewMailchimpLandingPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a landing page.
         * @summary Delete landing page
         * @param {LandingPagesApiDeletePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(requestParameters: LandingPagesApiDeletePageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the the HTML for your landing page.
         * @summary Get landing page content
         * @param {LandingPagesApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent(requestParameters: LandingPagesApiGetContentRequest, options?: AxiosRequestConfig): AxiosPromise<LandingPagesGetContentResponse> {
            return localVarFp.getContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific page.
         * @summary Get landing page info
         * @param {LandingPagesApiGetPageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageInfo(requestParameters: LandingPagesApiGetPageInfoRequest, options?: AxiosRequestConfig): AxiosPromise<LandingPagesGetPageInfoResponse> {
            return localVarFp.getPageInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all landing pages.
         * @summary List landing pages
         * @param {LandingPagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: LandingPagesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LandingPagesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
         * @summary Publish landing page
         * @param {LandingPagesApiPublishActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAction(requestParameters: LandingPagesApiPublishActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unpublish a landing page that is in draft or has been published.
         * @summary Unpublish landing page
         * @param {LandingPagesApiUnpublishActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishAction(requestParameters: LandingPagesApiUnpublishActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a landing page.
         * @summary Update landing page
         * @param {LandingPagesApiUpdatePageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageById(requestParameters: LandingPagesApiUpdatePageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LandingPagesUpdatePageByIdResponse> {
            return localVarFp.updatePageById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewMailchimpLandingPage operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiCreateNewMailchimpLandingPageRequest
 */
export type LandingPagesApiCreateNewMailchimpLandingPageRequest = {
    
    /**
    * Will create the Landing Page using the account\'s Default List instead of requiring a list_id.
    * @type {boolean}
    * @memberof LandingPagesApiCreateNewMailchimpLandingPage
    */
    readonly useDefaultList?: boolean
    
} & LandingPagesCreateNewMailchimpLandingPageRequest

/**
 * Request parameters for deletePage operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiDeletePageRequest
 */
export type LandingPagesApiDeletePageRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiDeletePage
    */
    readonly pageId: string
    
}

/**
 * Request parameters for getContent operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiGetContentRequest
 */
export type LandingPagesApiGetContentRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiGetContent
    */
    readonly pageId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiGetContent
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiGetContent
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getPageInfo operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiGetPageInfoRequest
 */
export type LandingPagesApiGetPageInfoRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiGetPageInfo
    */
    readonly pageId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiGetPageInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiGetPageInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for list operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiListRequest
 */
export type LandingPagesApiListRequest = {
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof LandingPagesApiList
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
    /**
    * Returns files sorted by the specified field.
    * @type {'created_at' | 'updated_at'}
    * @memberof LandingPagesApiList
    */
    readonly sortField?: 'created_at' | 'updated_at'
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiList
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof LandingPagesApiList
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof LandingPagesApiList
    */
    readonly count?: number
    
}

/**
 * Request parameters for publishAction operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiPublishActionRequest
 */
export type LandingPagesApiPublishActionRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiPublishAction
    */
    readonly pageId: string
    
}

/**
 * Request parameters for unpublishAction operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiUnpublishActionRequest
 */
export type LandingPagesApiUnpublishActionRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiUnpublishAction
    */
    readonly pageId: string
    
}

/**
 * Request parameters for updatePageById operation in LandingPagesApi.
 * @export
 * @interface LandingPagesApiUpdatePageByIdRequest
 */
export type LandingPagesApiUpdatePageByIdRequest = {
    
    /**
    * The unique id for the page.
    * @type {string}
    * @memberof LandingPagesApiUpdatePageById
    */
    readonly pageId: string
    
} & LandingPagesUpdatePageByIdRequest

/**
 * LandingPagesApiGenerated - object-oriented interface
 * @export
 * @class LandingPagesApiGenerated
 * @extends {BaseAPI}
 */
export class LandingPagesApiGenerated extends BaseAPI {
    /**
     * Create a new Mailchimp landing page.
     * @summary Add landing page
     * @param {LandingPagesApiCreateNewMailchimpLandingPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public createNewMailchimpLandingPage(requestParameters: LandingPagesApiCreateNewMailchimpLandingPageRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).createNewMailchimpLandingPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a landing page.
     * @summary Delete landing page
     * @param {LandingPagesApiDeletePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public deletePage(requestParameters: LandingPagesApiDeletePageRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).deletePage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the the HTML for your landing page.
     * @summary Get landing page content
     * @param {LandingPagesApiGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public getContent(requestParameters: LandingPagesApiGetContentRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).getContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific page.
     * @summary Get landing page info
     * @param {LandingPagesApiGetPageInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public getPageInfo(requestParameters: LandingPagesApiGetPageInfoRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).getPageInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all landing pages.
     * @summary List landing pages
     * @param {LandingPagesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public list(requestParameters: LandingPagesApiListRequest = {}, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a landing page that is in draft, unpublished, or has been previously published and edited.
     * @summary Publish landing page
     * @param {LandingPagesApiPublishActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public publishAction(requestParameters: LandingPagesApiPublishActionRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).publishAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unpublish a landing page that is in draft or has been published.
     * @summary Unpublish landing page
     * @param {LandingPagesApiUnpublishActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public unpublishAction(requestParameters: LandingPagesApiUnpublishActionRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).unpublishAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a landing page.
     * @summary Update landing page
     * @param {LandingPagesApiUpdatePageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesApiGenerated
     */
    public updatePageById(requestParameters: LandingPagesApiUpdatePageByIdRequest, options?: AxiosRequestConfig) {
        return LandingPagesApiFp(this.configuration).updatePageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
