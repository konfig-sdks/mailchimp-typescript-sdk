/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchesGetOperationStatus200Response } from '../models';
// @ts-ignore
import { BatchesGetOperationStatusResponse } from '../models';
// @ts-ignore
import { BatchesGetOperationStatusdefaultResponse } from '../models';
// @ts-ignore
import { BatchesListRequestsSummary200Response } from '../models';
// @ts-ignore
import { BatchesListRequestsSummaryResponse } from '../models';
// @ts-ignore
import { BatchesListRequestsSummarydefaultResponse } from '../models';
// @ts-ignore
import { BatchesStartOperationProcess200Response } from '../models';
// @ts-ignore
import { BatchesStartOperationProcessRequest } from '../models';
// @ts-ignore
import { BatchesStartOperationProcessResponse } from '../models';
// @ts-ignore
import { BatchesStartOperationProcessdefaultResponse } from '../models';
// @ts-ignore
import { BatchesStopRequestResponse } from '../models';
// @ts-ignore
import { BatchesStopRequestdefaultResponse } from '../models';
// @ts-ignore
import { Operations } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BatchesApi - axios parameter creator
 * @export
 */
export const BatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the status of a batch request.
         * @summary Get batch operation status
         * @param {string} batchId The unique id for the batch operation.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatus: async (batchId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('getOperationStatus', 'batchId', batchId)
            const localVarPath = `/batches/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batches/{batch_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of batch requests that have been made.
         * @summary List batch requests
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestsSummary: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Begin processing a batch operations request.
         * @summary Start batch operation
         * @param {BatchesStartOperationProcessRequest} batchesStartOperationProcessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startOperationProcess: async (batchesStartOperationProcessRequest: BatchesStartOperationProcessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchesStartOperationProcessRequest' is not null or undefined
            assertParamExists('startOperationProcess', 'batchesStartOperationProcessRequest', batchesStartOperationProcessRequest)
            const localVarPath = `/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: batchesStartOperationProcessRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batches',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(batchesStartOperationProcessRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
         * @summary Delete batch request
         * @param {string} batchId The unique id for the batch operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopRequest: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('stopRequest', 'batchId', batchId)
            const localVarPath = `/batches/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batch_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batches/{batch_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchesApi - functional programming interface
 * @export
 */
export const BatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the status of a batch request.
         * @summary Get batch operation status
         * @param {BatchesApiGetOperationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperationStatus(requestParameters: BatchesApiGetOperationStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchesGetOperationStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperationStatus(requestParameters.batchId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a summary of batch requests that have been made.
         * @summary List batch requests
         * @param {BatchesApiListRequestsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequestsSummary(requestParameters: BatchesApiListRequestsSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchesListRequestsSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequestsSummary(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Begin processing a batch operations request.
         * @summary Start batch operation
         * @param {BatchesApiStartOperationProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startOperationProcess(requestParameters: BatchesApiStartOperationProcessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchesStartOperationProcessResponse>> {
            const batchesStartOperationProcessRequest: BatchesStartOperationProcessRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startOperationProcess(batchesStartOperationProcessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
         * @summary Delete batch request
         * @param {BatchesApiStopRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopRequest(requestParameters: BatchesApiStopRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopRequest(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchesApi - factory interface
 * @export
 */
export const BatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchesApiFp(configuration)
    return {
        /**
         * Get the status of a batch request.
         * @summary Get batch operation status
         * @param {BatchesApiGetOperationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatus(requestParameters: BatchesApiGetOperationStatusRequest, options?: AxiosRequestConfig): AxiosPromise<BatchesGetOperationStatusResponse> {
            return localVarFp.getOperationStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of batch requests that have been made.
         * @summary List batch requests
         * @param {BatchesApiListRequestsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestsSummary(requestParameters: BatchesApiListRequestsSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<BatchesListRequestsSummaryResponse> {
            return localVarFp.listRequestsSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Begin processing a batch operations request.
         * @summary Start batch operation
         * @param {BatchesApiStartOperationProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startOperationProcess(requestParameters: BatchesApiStartOperationProcessRequest, options?: AxiosRequestConfig): AxiosPromise<BatchesStartOperationProcessResponse> {
            return localVarFp.startOperationProcess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
         * @summary Delete batch request
         * @param {BatchesApiStopRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopRequest(requestParameters: BatchesApiStopRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOperationStatus operation in BatchesApi.
 * @export
 * @interface BatchesApiGetOperationStatusRequest
 */
export type BatchesApiGetOperationStatusRequest = {
    
    /**
    * The unique id for the batch operation.
    * @type {string}
    * @memberof BatchesApiGetOperationStatus
    */
    readonly batchId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof BatchesApiGetOperationStatus
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof BatchesApiGetOperationStatus
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listRequestsSummary operation in BatchesApi.
 * @export
 * @interface BatchesApiListRequestsSummaryRequest
 */
export type BatchesApiListRequestsSummaryRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof BatchesApiListRequestsSummary
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof BatchesApiListRequestsSummary
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof BatchesApiListRequestsSummary
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof BatchesApiListRequestsSummary
    */
    readonly offset?: number
    
}

/**
 * Request parameters for startOperationProcess operation in BatchesApi.
 * @export
 * @interface BatchesApiStartOperationProcessRequest
 */
export type BatchesApiStartOperationProcessRequest = {
    
} & BatchesStartOperationProcessRequest

/**
 * Request parameters for stopRequest operation in BatchesApi.
 * @export
 * @interface BatchesApiStopRequestRequest
 */
export type BatchesApiStopRequestRequest = {
    
    /**
    * The unique id for the batch operation.
    * @type {string}
    * @memberof BatchesApiStopRequest
    */
    readonly batchId: string
    
}

/**
 * BatchesApiGenerated - object-oriented interface
 * @export
 * @class BatchesApiGenerated
 * @extends {BaseAPI}
 */
export class BatchesApiGenerated extends BaseAPI {
    /**
     * Get the status of a batch request.
     * @summary Get batch operation status
     * @param {BatchesApiGetOperationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public getOperationStatus(requestParameters: BatchesApiGetOperationStatusRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).getOperationStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of batch requests that have been made.
     * @summary List batch requests
     * @param {BatchesApiListRequestsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public listRequestsSummary(requestParameters: BatchesApiListRequestsSummaryRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).listRequestsSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Begin processing a batch operations request.
     * @summary Start batch operation
     * @param {BatchesApiStartOperationProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public startOperationProcess(requestParameters: BatchesApiStartOperationProcessRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).startOperationProcess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.
     * @summary Delete batch request
     * @param {BatchesApiStopRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchesApiGenerated
     */
    public stopRequest(requestParameters: BatchesApiStopRequestRequest, options?: AxiosRequestConfig) {
        return BatchesApiFp(this.configuration).stopRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
