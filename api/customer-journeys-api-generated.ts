/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerJourneysTriggerStepActionRequest } from '../models';
// @ts-ignore
import { CustomerJourneysTriggerStepActiondefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomerJourneysApi - axios parameter creator
 * @export
 */
export const CustomerJourneysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.
         * @summary Customer Journeys API trigger for a contact
         * @param {number} journeyId The id for the Journey.
         * @param {number} stepId The id for the Step.
         * @param {CustomerJourneysTriggerStepActionRequest} customerJourneysTriggerStepActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerStepAction: async (journeyId: number, stepId: number, customerJourneysTriggerStepActionRequest: CustomerJourneysTriggerStepActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'journeyId' is not null or undefined
            assertParamExists('triggerStepAction', 'journeyId', journeyId)
            // verify required parameter 'stepId' is not null or undefined
            assertParamExists('triggerStepAction', 'stepId', stepId)
            // verify required parameter 'customerJourneysTriggerStepActionRequest' is not null or undefined
            assertParamExists('triggerStepAction', 'customerJourneysTriggerStepActionRequest', customerJourneysTriggerStepActionRequest)
            const localVarPath = `/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger`
                .replace(`{${"journey_id"}}`, encodeURIComponent(String(journeyId !== undefined ? journeyId : `-journey_id-`)))
                .replace(`{${"step_id"}}`, encodeURIComponent(String(stepId !== undefined ? stepId : `-step_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerJourneysTriggerStepActionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerJourneysTriggerStepActionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerJourneysApi - functional programming interface
 * @export
 */
export const CustomerJourneysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerJourneysApiAxiosParamCreator(configuration)
    return {
        /**
         * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.
         * @summary Customer Journeys API trigger for a contact
         * @param {CustomerJourneysApiTriggerStepActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerStepAction(requestParameters: CustomerJourneysApiTriggerStepActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const customerJourneysTriggerStepActionRequest: CustomerJourneysTriggerStepActionRequest = {
                email_address: requestParameters.email_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerStepAction(requestParameters.journeyId, requestParameters.stepId, customerJourneysTriggerStepActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerJourneysApi - factory interface
 * @export
 */
export const CustomerJourneysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerJourneysApiFp(configuration)
    return {
        /**
         * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.
         * @summary Customer Journeys API trigger for a contact
         * @param {CustomerJourneysApiTriggerStepActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerStepAction(requestParameters: CustomerJourneysApiTriggerStepActionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.triggerStepAction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for triggerStepAction operation in CustomerJourneysApi.
 * @export
 * @interface CustomerJourneysApiTriggerStepActionRequest
 */
export type CustomerJourneysApiTriggerStepActionRequest = {
    
    /**
    * The id for the Journey.
    * @type {number}
    * @memberof CustomerJourneysApiTriggerStepAction
    */
    readonly journeyId: number
    
    /**
    * The id for the Step.
    * @type {number}
    * @memberof CustomerJourneysApiTriggerStepAction
    */
    readonly stepId: number
    
} & CustomerJourneysTriggerStepActionRequest

/**
 * CustomerJourneysApiGenerated - object-oriented interface
 * @export
 * @class CustomerJourneysApiGenerated
 * @extends {BaseAPI}
 */
export class CustomerJourneysApiGenerated extends BaseAPI {
    /**
     * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.
     * @summary Customer Journeys API trigger for a contact
     * @param {CustomerJourneysApiTriggerStepActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerJourneysApiGenerated
     */
    public triggerStepAction(requestParameters: CustomerJourneysApiTriggerStepActionRequest, options?: AxiosRequestConfig) {
        return CustomerJourneysApiFp(this.configuration).triggerStepAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
