/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountExportsCreateNewExport200Response } from '../models';
// @ts-ignore
import { AccountExportsCreateNewExportRequest } from '../models';
// @ts-ignore
import { AccountExportsCreateNewExportResponse } from '../models';
// @ts-ignore
import { AccountExportsCreateNewExportdefaultResponse } from '../models';
// @ts-ignore
import { AccountExportsListForGivenAccount200Response } from '../models';
// @ts-ignore
import { AccountExportsListForGivenAccountResponse } from '../models';
// @ts-ignore
import { AccountExportsListForGivenAccountdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountExportsApi - axios parameter creator
 * @export
 */
export const AccountExportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new account export in your Mailchimp account.
         * @summary Add export
         * @param {AccountExportsCreateNewExportRequest} accountExportsCreateNewExportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewExport: async (accountExportsCreateNewExportRequest: AccountExportsCreateNewExportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountExportsCreateNewExportRequest' is not null or undefined
            assertParamExists('createNewExport', 'accountExportsCreateNewExportRequest', accountExportsCreateNewExportRequest)
            const localVarPath = `/account-exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountExportsCreateNewExportRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-exports',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountExportsCreateNewExportRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of account exports for a given account.
         * @summary List account exports
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForGivenAccount: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account-exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-exports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountExportsApi - functional programming interface
 * @export
 */
export const AccountExportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountExportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new account export in your Mailchimp account.
         * @summary Add export
         * @param {AccountExportsApiCreateNewExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewExport(requestParameters: AccountExportsApiCreateNewExportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountExportsCreateNewExportResponse>> {
            const accountExportsCreateNewExportRequest: AccountExportsCreateNewExportRequest = {
                include_stages: requestParameters.include_stages,
                since_timestamp: requestParameters.since_timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewExport(accountExportsCreateNewExportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of account exports for a given account.
         * @summary List account exports
         * @param {AccountExportsApiListForGivenAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForGivenAccount(requestParameters: AccountExportsApiListForGivenAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountExportsListForGivenAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForGivenAccount(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountExportsApi - factory interface
 * @export
 */
export const AccountExportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountExportsApiFp(configuration)
    return {
        /**
         * Create a new account export in your Mailchimp account.
         * @summary Add export
         * @param {AccountExportsApiCreateNewExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewExport(requestParameters: AccountExportsApiCreateNewExportRequest, options?: AxiosRequestConfig): AxiosPromise<AccountExportsCreateNewExportResponse> {
            return localVarFp.createNewExport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of account exports for a given account.
         * @summary List account exports
         * @param {AccountExportsApiListForGivenAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForGivenAccount(requestParameters: AccountExportsApiListForGivenAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AccountExportsListForGivenAccountResponse> {
            return localVarFp.listForGivenAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewExport operation in AccountExportsApi.
 * @export
 * @interface AccountExportsApiCreateNewExportRequest
 */
export type AccountExportsApiCreateNewExportRequest = {
    
} & AccountExportsCreateNewExportRequest

/**
 * Request parameters for listForGivenAccount operation in AccountExportsApi.
 * @export
 * @interface AccountExportsApiListForGivenAccountRequest
 */
export type AccountExportsApiListForGivenAccountRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AccountExportsApiListForGivenAccount
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AccountExportsApiListForGivenAccount
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof AccountExportsApiListForGivenAccount
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof AccountExportsApiListForGivenAccount
    */
    readonly offset?: number
    
}

/**
 * AccountExportsApiGenerated - object-oriented interface
 * @export
 * @class AccountExportsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountExportsApiGenerated extends BaseAPI {
    /**
     * Create a new account export in your Mailchimp account.
     * @summary Add export
     * @param {AccountExportsApiCreateNewExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountExportsApiGenerated
     */
    public createNewExport(requestParameters: AccountExportsApiCreateNewExportRequest, options?: AxiosRequestConfig) {
        return AccountExportsApiFp(this.configuration).createNewExport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of account exports for a given account.
     * @summary List account exports
     * @param {AccountExportsApiListForGivenAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountExportsApiGenerated
     */
    public listForGivenAccount(requestParameters: AccountExportsApiListForGivenAccountRequest, options?: AxiosRequestConfig) {
        return AccountExportsApiFp(this.configuration).listForGivenAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
