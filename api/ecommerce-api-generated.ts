/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressProperty } from '../models';
// @ts-ignore
import { AddressProperty1 } from '../models';
// @ts-ignore
import { AddressProperty4 } from '../models';
// @ts-ignore
import { AddressProperty5 } from '../models';
// @ts-ignore
import { AddressProperty6 } from '../models';
// @ts-ignore
import { BillingAddressProperty } from '../models';
// @ts-ignore
import { BillingAddressProperty1 } from '../models';
// @ts-ignore
import { ECommerceCartLineItem } from '../models';
// @ts-ignore
import { ECommerceCartLineItem1 } from '../models';
// @ts-ignore
import { ECommerceCustomerProperty } from '../models';
// @ts-ignore
import { ECommerceCustomerProperty1 } from '../models';
// @ts-ignore
import { ECommerceCustomerProperty2 } from '../models';
// @ts-ignore
import { ECommerceCustomerProperty3 } from '../models';
// @ts-ignore
import { ECommerceOrderLineItem } from '../models';
// @ts-ignore
import { ECommerceOrderLineItem1 } from '../models';
// @ts-ignore
import { ECommerceProductImage } from '../models';
// @ts-ignore
import { ECommerceProductImage1 } from '../models';
// @ts-ignore
import { ECommerceProductVariant } from '../models';
// @ts-ignore
import { ECommerceProductVariant1 } from '../models';
// @ts-ignore
import { EcommerceAddCartLineItem200Response } from '../models';
// @ts-ignore
import { EcommerceAddCartLineItemRequest } from '../models';
// @ts-ignore
import { EcommerceAddCartLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceAddCartLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddCartToStore200Response } from '../models';
// @ts-ignore
import { EcommerceAddCartToStoreRequest } from '../models';
// @ts-ignore
import { EcommerceAddCartToStoreResponse } from '../models';
// @ts-ignore
import { EcommerceAddCartToStoredefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddCustomerToStore200Response } from '../models';
// @ts-ignore
import { EcommerceAddCustomerToStoreRequest } from '../models';
// @ts-ignore
import { EcommerceAddCustomerToStoreResponse } from '../models';
// @ts-ignore
import { EcommerceAddCustomerToStoredefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateCustomer200Response } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateCustomerRequest } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateCustomerResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateCustomerdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateProductVariant200Response } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateProductVariantResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrUpdateProductVariantdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrderLineItem200Response } from '../models';
// @ts-ignore
import { EcommerceAddOrderLineItemRequest } from '../models';
// @ts-ignore
import { EcommerceAddOrderLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrderLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrderToStore200Response } from '../models';
// @ts-ignore
import { EcommerceAddOrderToStoreRequest } from '../models';
// @ts-ignore
import { EcommerceAddOrderToStoreResponse } from '../models';
// @ts-ignore
import { EcommerceAddOrderToStoredefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductImage200Response } from '../models';
// @ts-ignore
import { EcommerceAddProductImageRequest } from '../models';
// @ts-ignore
import { EcommerceAddProductImageResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductImagedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductToStore200Response } from '../models';
// @ts-ignore
import { EcommerceAddProductToStoreRequest } from '../models';
// @ts-ignore
import { EcommerceAddProductToStoreResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductToStoredefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductVariant200Response } from '../models';
// @ts-ignore
import { EcommerceAddProductVariantRequest } from '../models';
// @ts-ignore
import { EcommerceAddProductVariantResponse } from '../models';
// @ts-ignore
import { EcommerceAddProductVariantdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddPromoCode200Response } from '../models';
// @ts-ignore
import { EcommerceAddPromoCodeRequest } from '../models';
// @ts-ignore
import { EcommerceAddPromoCodeResponse } from '../models';
// @ts-ignore
import { EcommerceAddPromoCodedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddPromoRule200Response } from '../models';
// @ts-ignore
import { EcommerceAddPromoRuleRequest } from '../models';
// @ts-ignore
import { EcommerceAddPromoRuleResponse } from '../models';
// @ts-ignore
import { EcommerceAddPromoRuledefaultResponse } from '../models';
// @ts-ignore
import { EcommerceAddStoreToMailchimpAccount200Response } from '../models';
// @ts-ignore
import { EcommerceAddStoreToMailchimpAccountRequest } from '../models';
// @ts-ignore
import { EcommerceAddStoreToMailchimpAccountResponse } from '../models';
// @ts-ignore
import { EcommerceAddStoreToMailchimpAccountdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteCartLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteCartLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteOrderLineResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteOrderLinedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteOrderResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteOrderdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductImageResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductImagedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductVariantResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductVariantdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteProductdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeletePromoCodeResponse } from '../models';
// @ts-ignore
import { EcommerceDeletePromoCodedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeletePromoRuleResponse } from '../models';
// @ts-ignore
import { EcommerceDeletePromoRuledefaultResponse } from '../models';
// @ts-ignore
import { EcommerceDeleteStoredefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetCartInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetCartInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetCartInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetCartLineItem200Response } from '../models';
// @ts-ignore
import { EcommerceGetCartLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceGetCartLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetCustomerInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetCustomerInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetCustomerInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetOrderLineItem200Response } from '../models';
// @ts-ignore
import { EcommerceGetOrderLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceGetOrderLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductImageInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetProductImageInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductImageInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductImages200Response } from '../models';
// @ts-ignore
import { EcommerceGetProductImagesResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductImagesdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductVariantInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetProductVariantInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetProductVariantInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetPromoCode200Response } from '../models';
// @ts-ignore
import { EcommerceGetPromoCodeResponse } from '../models';
// @ts-ignore
import { EcommerceGetPromoCodedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreCarts200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreCartsResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreCartsdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreCustomers200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreCustomersResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreCustomersdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderLines200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderLinesResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreOrderLinesdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreProductInfo200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreProductInfoResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreProductInfodefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreProducts200Response } from '../models';
// @ts-ignore
import { EcommerceGetStoreProductsResponse } from '../models';
// @ts-ignore
import { EcommerceGetStoreProductsdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoCodes200Response } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoCodesResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoCodesdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRule200Response } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRuleResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRuledefaultResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRules200Response } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRulesResponse } from '../models';
// @ts-ignore
import { EcommerceGetStorePromoRulesdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceListAccountOrders200Response } from '../models';
// @ts-ignore
import { EcommerceListAccountOrdersResponse } from '../models';
// @ts-ignore
import { EcommerceListAccountOrdersdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceListCartLines200Response } from '../models';
// @ts-ignore
import { EcommerceListCartLinesResponse } from '../models';
// @ts-ignore
import { EcommerceListCartLinesdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceListProductVariants200Response } from '../models';
// @ts-ignore
import { EcommerceListProductVariantsResponse } from '../models';
// @ts-ignore
import { EcommerceListProductVariantsdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceListStoreOrders200Response } from '../models';
// @ts-ignore
import { EcommerceListStoreOrdersResponse } from '../models';
// @ts-ignore
import { EcommerceListStoreOrdersdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceListStores200Response } from '../models';
// @ts-ignore
import { EcommerceListStoresResponse } from '../models';
// @ts-ignore
import { EcommerceListStoresdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceRemoveCartResponse } from '../models';
// @ts-ignore
import { EcommerceRemoveCartdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceRemoveCustomerResponse } from '../models';
// @ts-ignore
import { EcommerceRemoveCustomerdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCartById200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateCartByIdRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateCartByIdResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCartByIddefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCartLineItem200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateCartLineItemRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateCartLineItemResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCartLineItemdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCustomer200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateCustomerRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateCustomerResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateCustomerdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateOrderLine200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateOrderLineRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateOrderLineResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateOrderLinedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProduct200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateProductImage200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateProductImageRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateProductImageResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProductImagedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProductRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateProductResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProductVariant200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateProductVariantRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateProductVariantResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProductVariantdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateProductdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoCode200Response } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoCodeRequest } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoCodeResponse } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoCodedefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoRule200Response } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoRuleRequest } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoRuleResponse } from '../models';
// @ts-ignore
import { EcommerceUpdatePromoRuledefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateSpecificOrder200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateSpecificOrderRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateSpecificOrderResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateSpecificOrderdefaultResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateStore200Response } from '../models';
// @ts-ignore
import { EcommerceUpdateStoreRequest } from '../models';
// @ts-ignore
import { EcommerceUpdateStoreResponse } from '../models';
// @ts-ignore
import { EcommerceUpdateStoredefaultResponse } from '../models';
// @ts-ignore
import { OutreachProperty } from '../models';
// @ts-ignore
import { OutreachProperty1 } from '../models';
// @ts-ignore
import { PromosPropertyInner } from '../models';
// @ts-ignore
import { ShippingAddressProperty } from '../models';
// @ts-ignore
import { ShippingAddressProperty1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EcommerceApi - axios parameter creator
 * @export
 */
export const EcommerceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new line item to an existing cart.
         * @summary Add cart line item
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {EcommerceAddCartLineItemRequest} ecommerceAddCartLineItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCartLineItem: async (storeId: string, cartId: string, ecommerceAddCartLineItemRequest: EcommerceAddCartLineItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addCartLineItem', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('addCartLineItem', 'cartId', cartId)
            // verify required parameter 'ecommerceAddCartLineItemRequest' is not null or undefined
            assertParamExists('addCartLineItem', 'ecommerceAddCartLineItemRequest', ecommerceAddCartLineItemRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}/lines`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddCartLineItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}/lines',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddCartLineItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new cart to a store.
         * @summary Add cart
         * @param {string} storeId The store id.
         * @param {EcommerceAddCartToStoreRequest} ecommerceAddCartToStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCartToStore: async (storeId: string, ecommerceAddCartToStoreRequest: EcommerceAddCartToStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addCartToStore', 'storeId', storeId)
            // verify required parameter 'ecommerceAddCartToStoreRequest' is not null or undefined
            assertParamExists('addCartToStore', 'ecommerceAddCartToStoreRequest', ecommerceAddCartToStoreRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/carts`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddCartToStoreRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddCartToStoreRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new customer to a store.
         * @summary Add customer
         * @param {string} storeId The store id.
         * @param {EcommerceAddCustomerToStoreRequest} ecommerceAddCustomerToStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerToStore: async (storeId: string, ecommerceAddCustomerToStoreRequest: EcommerceAddCustomerToStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addCustomerToStore', 'storeId', storeId)
            // verify required parameter 'ecommerceAddCustomerToStoreRequest' is not null or undefined
            assertParamExists('addCustomerToStore', 'ecommerceAddCustomerToStoreRequest', ecommerceAddCustomerToStoreRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/customers`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddCustomerToStoreRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddCustomerToStoreRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or update a customer.
         * @summary Add or update customer
         * @param {string} storeId The store id.
         * @param {string} customerId The id for the customer of a store.
         * @param {EcommerceAddOrUpdateCustomerRequest} ecommerceAddOrUpdateCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCustomer: async (storeId: string, customerId: string, ecommerceAddOrUpdateCustomerRequest: EcommerceAddOrUpdateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addOrUpdateCustomer', 'storeId', storeId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('addOrUpdateCustomer', 'customerId', customerId)
            // verify required parameter 'ecommerceAddOrUpdateCustomerRequest' is not null or undefined
            assertParamExists('addOrUpdateCustomer', 'ecommerceAddOrUpdateCustomerRequest', ecommerceAddOrUpdateCustomerRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/customers/{customer_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddOrUpdateCustomerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers/{customer_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddOrUpdateCustomerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or update a product variant.
         * @summary Add or update product variant
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} variantId The id for the product variant.
         * @param {EcommerceAddProductVariantRequest} ecommerceAddProductVariantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateProductVariant: async (storeId: string, productId: string, variantId: string, ecommerceAddProductVariantRequest: EcommerceAddProductVariantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addOrUpdateProductVariant', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('addOrUpdateProductVariant', 'productId', productId)
            // verify required parameter 'variantId' is not null or undefined
            assertParamExists('addOrUpdateProductVariant', 'variantId', variantId)
            // verify required parameter 'ecommerceAddProductVariantRequest' is not null or undefined
            assertParamExists('addOrUpdateProductVariant', 'ecommerceAddProductVariantRequest', ecommerceAddProductVariantRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId !== undefined ? variantId : `-variant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddProductVariantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddProductVariantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new line item to an existing order.
         * @summary Add order line item
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {EcommerceAddOrderLineItemRequest} ecommerceAddOrderLineItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderLineItem: async (storeId: string, orderId: string, ecommerceAddOrderLineItemRequest: EcommerceAddOrderLineItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addOrderLineItem', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('addOrderLineItem', 'orderId', orderId)
            // verify required parameter 'ecommerceAddOrderLineItemRequest' is not null or undefined
            assertParamExists('addOrderLineItem', 'ecommerceAddOrderLineItemRequest', ecommerceAddOrderLineItemRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}/lines`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddOrderLineItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}/lines',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddOrderLineItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new order to a store.
         * @summary Add order
         * @param {string} storeId The store id.
         * @param {EcommerceAddOrderToStoreRequest} ecommerceAddOrderToStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderToStore: async (storeId: string, ecommerceAddOrderToStoreRequest: EcommerceAddOrderToStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addOrderToStore', 'storeId', storeId)
            // verify required parameter 'ecommerceAddOrderToStoreRequest' is not null or undefined
            assertParamExists('addOrderToStore', 'ecommerceAddOrderToStoreRequest', ecommerceAddOrderToStoreRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/orders`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddOrderToStoreRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddOrderToStoreRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new image to the product.
         * @summary Add product image
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {EcommerceAddProductImageRequest} ecommerceAddProductImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductImage: async (storeId: string, productId: string, ecommerceAddProductImageRequest: EcommerceAddProductImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addProductImage', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('addProductImage', 'productId', productId)
            // verify required parameter 'ecommerceAddProductImageRequest' is not null or undefined
            assertParamExists('addProductImage', 'ecommerceAddProductImageRequest', ecommerceAddProductImageRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/images`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddProductImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddProductImageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new product to a store.
         * @summary Add product
         * @param {string} storeId The store id.
         * @param {EcommerceAddProductToStoreRequest} ecommerceAddProductToStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductToStore: async (storeId: string, ecommerceAddProductToStoreRequest: EcommerceAddProductToStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addProductToStore', 'storeId', storeId)
            // verify required parameter 'ecommerceAddProductToStoreRequest' is not null or undefined
            assertParamExists('addProductToStore', 'ecommerceAddProductToStoreRequest', ecommerceAddProductToStoreRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddProductToStoreRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddProductToStoreRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new variant to the product.
         * @summary Add product variant
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {EcommerceAddProductVariantRequest} ecommerceAddProductVariantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductVariant: async (storeId: string, productId: string, ecommerceAddProductVariantRequest: EcommerceAddProductVariantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addProductVariant', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('addProductVariant', 'productId', productId)
            // verify required parameter 'ecommerceAddProductVariantRequest' is not null or undefined
            assertParamExists('addProductVariant', 'ecommerceAddProductVariantRequest', ecommerceAddProductVariantRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddProductVariantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddProductVariantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new promo code to a store.
         * @summary Add promo code
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {EcommerceAddPromoCodeRequest} ecommerceAddPromoCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromoCode: async (storeId: string, promoRuleId: string, ecommerceAddPromoCodeRequest: EcommerceAddPromoCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addPromoCode', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('addPromoCode', 'promoRuleId', promoRuleId)
            // verify required parameter 'ecommerceAddPromoCodeRequest' is not null or undefined
            assertParamExists('addPromoCode', 'ecommerceAddPromoCodeRequest', ecommerceAddPromoCodeRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddPromoCodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddPromoCodeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new promo rule to a store.
         * @summary Add promo rule
         * @param {string} storeId The store id.
         * @param {EcommerceAddPromoRuleRequest} ecommerceAddPromoRuleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromoRule: async (storeId: string, ecommerceAddPromoRuleRequest: EcommerceAddPromoRuleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('addPromoRule', 'storeId', storeId)
            // verify required parameter 'ecommerceAddPromoRuleRequest' is not null or undefined
            assertParamExists('addPromoRule', 'ecommerceAddPromoRuleRequest', ecommerceAddPromoRuleRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddPromoRuleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddPromoRuleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new store to your Mailchimp account.
         * @summary Add store
         * @param {EcommerceAddStoreToMailchimpAccountRequest} ecommerceAddStoreToMailchimpAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreToMailchimpAccount: async (ecommerceAddStoreToMailchimpAccountRequest: EcommerceAddStoreToMailchimpAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ecommerceAddStoreToMailchimpAccountRequest' is not null or undefined
            assertParamExists('addStoreToMailchimpAccount', 'ecommerceAddStoreToMailchimpAccountRequest', ecommerceAddStoreToMailchimpAccountRequest)
            const localVarPath = `/ecommerce/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceAddStoreToMailchimpAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceAddStoreToMailchimpAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific cart line item.
         * @summary Delete cart line item
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {string} lineId The id for the line item of a cart.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCartLineItem: async (storeId: string, cartId: string, lineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteCartLineItem', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('deleteCartLineItem', 'cartId', cartId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('deleteCartLineItem', 'lineId', lineId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order.
         * @summary Delete order
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (storeId: string, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteOrder', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('deleteOrder', 'orderId', orderId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific order line item.
         * @summary Delete order line item
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {string} lineId The id for the line item of an order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderLine: async (storeId: string, orderId: string, lineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteOrderLine', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('deleteOrderLine', 'orderId', orderId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('deleteOrderLine', 'lineId', lineId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (storeId: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteProduct', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a product image.
         * @summary Delete product image
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} imageId The id for the product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductImage: async (storeId: string, productId: string, imageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteProductImage', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProductImage', 'productId', productId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('deleteProductImage', 'imageId', imageId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a product variant.
         * @summary Delete product variant
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} variantId The id for the product variant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariant: async (storeId: string, productId: string, variantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteProductVariant', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProductVariant', 'productId', productId)
            // verify required parameter 'variantId' is not null or undefined
            assertParamExists('deleteProductVariant', 'variantId', variantId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId !== undefined ? variantId : `-variant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a promo code from a store.
         * @summary Delete promo code
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {string} promoCodeId The id for the promo code of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromoCode: async (storeId: string, promoRuleId: string, promoCodeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deletePromoCode', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('deletePromoCode', 'promoRuleId', promoRuleId)
            // verify required parameter 'promoCodeId' is not null or undefined
            assertParamExists('deletePromoCode', 'promoCodeId', promoCodeId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)))
                .replace(`{${"promo_code_id"}}`, encodeURIComponent(String(promoCodeId !== undefined ? promoCodeId : `-promo_code_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a promo rule from a store.
         * @summary Delete promo rule
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromoRule: async (storeId: string, promoRuleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deletePromoRule', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('deletePromoRule', 'promoRuleId', promoRuleId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
         * @summary Delete store
         * @param {string} storeId The store id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStore: async (storeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('deleteStore', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific cart.
         * @summary Get cart info
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartInfo: async (storeId: string, cartId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getCartInfo', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('getCartInfo', 'cartId', cartId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific cart line item.
         * @summary Get cart line item
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {string} lineId The id for the line item of a cart.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartLineItem: async (storeId: string, cartId: string, lineId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getCartLineItem', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('getCartLineItem', 'cartId', cartId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('getCartLineItem', 'lineId', lineId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific customer.
         * @summary Get customer info
         * @param {string} storeId The store id.
         * @param {string} customerId The id for the customer of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInfo: async (storeId: string, customerId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getCustomerInfo', 'storeId', storeId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerInfo', 'customerId', customerId)
            const localVarPath = `/ecommerce/stores/{store_id}/customers/{customer_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers/{customer_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific order line item.
         * @summary Get order line item
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {string} lineId The id for the line item of an order.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderLineItem: async (storeId: string, orderId: string, lineId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getOrderLineItem', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderLineItem', 'orderId', orderId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('getOrderLineItem', 'lineId', lineId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific product image.
         * @summary Get product image info
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} imageId The id for the product image.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImageInfo: async (storeId: string, productId: string, imageId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getProductImageInfo', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductImageInfo', 'productId', productId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getProductImageInfo', 'imageId', imageId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a product\'s images.
         * @summary List product images
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImages: async (storeId: string, productId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getProductImages', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductImages', 'productId', productId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/images`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific product variant.
         * @summary Get product variant info
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} variantId The id for the product variant.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductVariantInfo: async (storeId: string, productId: string, variantId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getProductVariantInfo', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductVariantInfo', 'productId', productId)
            // verify required parameter 'variantId' is not null or undefined
            assertParamExists('getProductVariantInfo', 'variantId', variantId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId !== undefined ? variantId : `-variant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific promo code.
         * @summary Get promo code
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {string} promoCodeId The id for the promo code of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromoCode: async (storeId: string, promoRuleId: string, promoCodeId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getPromoCode', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('getPromoCode', 'promoRuleId', promoRuleId)
            // verify required parameter 'promoCodeId' is not null or undefined
            assertParamExists('getPromoCode', 'promoCodeId', promoCodeId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)))
                .replace(`{${"promo_code_id"}}`, encodeURIComponent(String(promoCodeId !== undefined ? promoCodeId : `-promo_code_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s carts.
         * @summary List carts
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCarts: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreCarts', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s customers.
         * @summary List customers
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [emailAddress] Restrict the response to customers with the email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCustomers: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, emailAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreCustomers', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/customers`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (emailAddress !== undefined) {
                localVarQueryParameter['email_address'] = emailAddress;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific store.
         * @summary Get store info
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreInfo: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreInfo', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific order.
         * @summary Get order info
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrderInfo: async (storeId: string, orderId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreOrderInfo', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getStoreOrderInfo', 'orderId', orderId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about an order\'s line items.
         * @summary List order line items
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrderLines: async (storeId: string, orderId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreOrderLines', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getStoreOrderLines', 'orderId', orderId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}/lines`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}/lines',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific product.
         * @summary Get product info
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProductInfo: async (storeId: string, productId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreProductInfo', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getStoreProductInfo', 'productId', productId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s products.
         * @summary List product
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProducts: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStoreProducts', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/products`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s promo codes.
         * @summary List promo codes
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoCodes: async (promoRuleId: string, storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('getStorePromoCodes', 'promoRuleId', promoRuleId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStorePromoCodes', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes`
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)))
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific promo rule.
         * @summary Get promo rule
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoRule: async (storeId: string, promoRuleId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStorePromoRule', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('getStorePromoRule', 'promoRuleId', promoRuleId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s promo rules.
         * @summary List promo rules
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoRules: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getStorePromoRules', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about an account\'s orders.
         * @summary List account orders
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [campaignId] Restrict results to orders with a specific &#x60;campaign_id&#x60; value.
         * @param {string} [outreachId] Restrict results to orders with a specific &#x60;outreach_id&#x60; value.
         * @param {string} [customerId] Restrict results to orders made by a specific customer.
         * @param {boolean} [hasOutreach] Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountOrders: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, campaignId?: string, outreachId?: string, customerId?: string, hasOutreach?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ecommerce/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = campaignId;
            }

            if (outreachId !== undefined) {
                localVarQueryParameter['outreach_id'] = outreachId;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (hasOutreach !== undefined) {
                localVarQueryParameter['has_outreach'] = hasOutreach;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/orders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a cart\'s line items.
         * @summary List cart line items
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCartLines: async (storeId: string, cartId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('listCartLines', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('listCartLines', 'cartId', cartId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}/lines`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}/lines',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a product\'s variants.
         * @summary List product variants
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductVariants: async (storeId: string, productId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('listProductVariants', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listProductVariants', 'productId', productId)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a store\'s orders.
         * @summary List orders
         * @param {string} storeId The store id.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [customerId] Restrict results to orders made by a specific customer.
         * @param {boolean} [hasOutreach] Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
         * @param {string} [campaignId] Restrict results to orders with a specific &#x60;campaign_id&#x60; value.
         * @param {string} [outreachId] Restrict results to orders with a specific &#x60;outreach_id&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreOrders: async (storeId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, customerId?: string, hasOutreach?: boolean, campaignId?: string, outreachId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('listStoreOrders', 'storeId', storeId)
            const localVarPath = `/ecommerce/stores/{store_id}/orders`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (hasOutreach !== undefined) {
                localVarQueryParameter['has_outreach'] = hasOutreach;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = campaignId;
            }

            if (outreachId !== undefined) {
                localVarQueryParameter['outreach_id'] = outreachId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about all stores in the account.
         * @summary List stores
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStores: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ecommerce/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a cart.
         * @summary Delete cart
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCart: async (storeId: string, cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('removeCart', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('removeCart', 'cartId', cartId)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a customer from a store.
         * @summary Delete customer
         * @param {string} storeId The store id.
         * @param {string} customerId The id for the customer of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomer: async (storeId: string, customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('removeCustomer', 'storeId', storeId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('removeCustomer', 'customerId', customerId)
            const localVarPath = `/ecommerce/stores/{store_id}/customers/{customer_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers/{customer_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific cart.
         * @summary Update cart
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {EcommerceUpdateCartByIdRequest} ecommerceUpdateCartByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCartById: async (storeId: string, cartId: string, ecommerceUpdateCartByIdRequest: EcommerceUpdateCartByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateCartById', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('updateCartById', 'cartId', cartId)
            // verify required parameter 'ecommerceUpdateCartByIdRequest' is not null or undefined
            assertParamExists('updateCartById', 'ecommerceUpdateCartByIdRequest', ecommerceUpdateCartByIdRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateCartByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateCartByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific cart line item.
         * @summary Update cart line item
         * @param {string} storeId The store id.
         * @param {string} cartId The id for the cart.
         * @param {string} lineId The id for the line item of a cart.
         * @param {EcommerceUpdateCartLineItemRequest} ecommerceUpdateCartLineItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCartLineItem: async (storeId: string, cartId: string, lineId: string, ecommerceUpdateCartLineItemRequest: EcommerceUpdateCartLineItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateCartLineItem', 'storeId', storeId)
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('updateCartLineItem', 'cartId', cartId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('updateCartLineItem', 'lineId', lineId)
            // verify required parameter 'ecommerceUpdateCartLineItemRequest' is not null or undefined
            assertParamExists('updateCartLineItem', 'ecommerceUpdateCartLineItemRequest', ecommerceUpdateCartLineItemRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"cart_id"}}`, encodeURIComponent(String(cartId !== undefined ? cartId : `-cart_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateCartLineItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateCartLineItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a customer.
         * @summary Update customer
         * @param {string} storeId The store id.
         * @param {string} customerId The id for the customer of a store.
         * @param {EcommerceUpdateCustomerRequest} ecommerceUpdateCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: async (storeId: string, customerId: string, ecommerceUpdateCustomerRequest: EcommerceUpdateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateCustomer', 'storeId', storeId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('updateCustomer', 'customerId', customerId)
            // verify required parameter 'ecommerceUpdateCustomerRequest' is not null or undefined
            assertParamExists('updateCustomer', 'ecommerceUpdateCustomerRequest', ecommerceUpdateCustomerRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/customers/{customer_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateCustomerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/customers/{customer_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateCustomerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific order line item.
         * @summary Update order line item
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {string} lineId The id for the line item of an order.
         * @param {EcommerceUpdateOrderLineRequest} ecommerceUpdateOrderLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderLine: async (storeId: string, orderId: string, lineId: string, ecommerceUpdateOrderLineRequest: EcommerceUpdateOrderLineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateOrderLine', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateOrderLine', 'orderId', orderId)
            // verify required parameter 'lineId' is not null or undefined
            assertParamExists('updateOrderLine', 'lineId', lineId)
            // verify required parameter 'ecommerceUpdateOrderLineRequest' is not null or undefined
            assertParamExists('updateOrderLine', 'ecommerceUpdateOrderLineRequest', ecommerceUpdateOrderLineRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"line_id"}}`, encodeURIComponent(String(lineId !== undefined ? lineId : `-line_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateOrderLineRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateOrderLineRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific product.
         * @summary Update product
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {EcommerceUpdateProductRequest} ecommerceUpdateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (storeId: string, productId: string, ecommerceUpdateProductRequest: EcommerceUpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateProduct', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId)
            // verify required parameter 'ecommerceUpdateProductRequest' is not null or undefined
            assertParamExists('updateProduct', 'ecommerceUpdateProductRequest', ecommerceUpdateProductRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateProductRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateProductRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a product image.
         * @summary Update product image
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} imageId The id for the product image.
         * @param {EcommerceUpdateProductImageRequest} ecommerceUpdateProductImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductImage: async (storeId: string, productId: string, imageId: string, ecommerceUpdateProductImageRequest: EcommerceUpdateProductImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateProductImage', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductImage', 'productId', productId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('updateProductImage', 'imageId', imageId)
            // verify required parameter 'ecommerceUpdateProductImageRequest' is not null or undefined
            assertParamExists('updateProductImage', 'ecommerceUpdateProductImageRequest', ecommerceUpdateProductImageRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateProductImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateProductImageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a product variant.
         * @summary Update product variant
         * @param {string} storeId The store id.
         * @param {string} productId The id for the product of a store.
         * @param {string} variantId The id for the product variant.
         * @param {EcommerceUpdateProductVariantRequest} ecommerceUpdateProductVariantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductVariant: async (storeId: string, productId: string, variantId: string, ecommerceUpdateProductVariantRequest: EcommerceUpdateProductVariantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateProductVariant', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductVariant', 'productId', productId)
            // verify required parameter 'variantId' is not null or undefined
            assertParamExists('updateProductVariant', 'variantId', variantId)
            // verify required parameter 'ecommerceUpdateProductVariantRequest' is not null or undefined
            assertParamExists('updateProductVariant', 'ecommerceUpdateProductVariantRequest', ecommerceUpdateProductVariantRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"variant_id"}}`, encodeURIComponent(String(variantId !== undefined ? variantId : `-variant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateProductVariantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateProductVariantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a promo code.
         * @summary Update promo code
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {string} promoCodeId The id for the promo code of a store.
         * @param {EcommerceUpdatePromoCodeRequest} ecommerceUpdatePromoCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromoCode: async (storeId: string, promoRuleId: string, promoCodeId: string, ecommerceUpdatePromoCodeRequest: EcommerceUpdatePromoCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updatePromoCode', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('updatePromoCode', 'promoRuleId', promoRuleId)
            // verify required parameter 'promoCodeId' is not null or undefined
            assertParamExists('updatePromoCode', 'promoCodeId', promoCodeId)
            // verify required parameter 'ecommerceUpdatePromoCodeRequest' is not null or undefined
            assertParamExists('updatePromoCode', 'ecommerceUpdatePromoCodeRequest', ecommerceUpdatePromoCodeRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)))
                .replace(`{${"promo_code_id"}}`, encodeURIComponent(String(promoCodeId !== undefined ? promoCodeId : `-promo_code_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdatePromoCodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdatePromoCodeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a promo rule.
         * @summary Update promo rule
         * @param {string} storeId The store id.
         * @param {string} promoRuleId The id for the promo rule of a store.
         * @param {EcommerceUpdatePromoRuleRequest} ecommerceUpdatePromoRuleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromoRule: async (storeId: string, promoRuleId: string, ecommerceUpdatePromoRuleRequest: EcommerceUpdatePromoRuleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updatePromoRule', 'storeId', storeId)
            // verify required parameter 'promoRuleId' is not null or undefined
            assertParamExists('updatePromoRule', 'promoRuleId', promoRuleId)
            // verify required parameter 'ecommerceUpdatePromoRuleRequest' is not null or undefined
            assertParamExists('updatePromoRule', 'ecommerceUpdatePromoRuleRequest', ecommerceUpdatePromoRuleRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"promo_rule_id"}}`, encodeURIComponent(String(promoRuleId !== undefined ? promoRuleId : `-promo_rule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdatePromoRuleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdatePromoRuleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific order.
         * @summary Update order
         * @param {string} storeId The store id.
         * @param {string} orderId The id for the order in a store.
         * @param {EcommerceUpdateSpecificOrderRequest} ecommerceUpdateSpecificOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificOrder: async (storeId: string, orderId: string, ecommerceUpdateSpecificOrderRequest: EcommerceUpdateSpecificOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateSpecificOrder', 'storeId', storeId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateSpecificOrder', 'orderId', orderId)
            // verify required parameter 'ecommerceUpdateSpecificOrderRequest' is not null or undefined
            assertParamExists('updateSpecificOrder', 'ecommerceUpdateSpecificOrderRequest', ecommerceUpdateSpecificOrderRequest)
            const localVarPath = `/ecommerce/stores/{store_id}/orders/{order_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateSpecificOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}/orders/{order_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateSpecificOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a store.
         * @summary Update store
         * @param {string} storeId The store id.
         * @param {EcommerceUpdateStoreRequest} ecommerceUpdateStoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStore: async (storeId: string, ecommerceUpdateStoreRequest: EcommerceUpdateStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('updateStore', 'storeId', storeId)
            // verify required parameter 'ecommerceUpdateStoreRequest' is not null or undefined
            assertParamExists('updateStore', 'ecommerceUpdateStoreRequest', ecommerceUpdateStoreRequest)
            const localVarPath = `/ecommerce/stores/{store_id}`
                .replace(`{${"store_id"}}`, encodeURIComponent(String(storeId !== undefined ? storeId : `-store_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ecommerceUpdateStoreRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ecommerce/stores/{store_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ecommerceUpdateStoreRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EcommerceApi - functional programming interface
 * @export
 */
export const EcommerceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EcommerceApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new line item to an existing cart.
         * @summary Add cart line item
         * @param {EcommerceApiAddCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCartLineItem(requestParameters: EcommerceApiAddCartLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddCartLineItemResponse>> {
            const ecommerceAddCartLineItemRequest: EcommerceAddCartLineItemRequest = {
                id: requestParameters.id,
                product_id: requestParameters.product_id,
                product_variant_id: requestParameters.product_variant_id,
                quantity: requestParameters.quantity,
                price: requestParameters.price
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCartLineItem(requestParameters.storeId, requestParameters.cartId, ecommerceAddCartLineItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new cart to a store.
         * @summary Add cart
         * @param {EcommerceApiAddCartToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCartToStore(requestParameters: EcommerceApiAddCartToStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddCartToStoreResponse>> {
            const ecommerceAddCartToStoreRequest: EcommerceAddCartToStoreRequest = {
                id: requestParameters.id,
                customer: requestParameters.customer,
                campaign_id: requestParameters.campaign_id,
                checkout_url: requestParameters.checkout_url,
                currency_code: requestParameters.currency_code,
                order_total: requestParameters.order_total,
                tax_total: requestParameters.tax_total,
                lines: requestParameters.lines
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCartToStore(requestParameters.storeId, ecommerceAddCartToStoreRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new customer to a store.
         * @summary Add customer
         * @param {EcommerceApiAddCustomerToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomerToStore(requestParameters: EcommerceApiAddCustomerToStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddCustomerToStoreResponse>> {
            const ecommerceAddCustomerToStoreRequest: EcommerceAddCustomerToStoreRequest = {
                id: requestParameters.id,
                email_address: requestParameters.email_address,
                opt_in_status: requestParameters.opt_in_status,
                company: requestParameters.company,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                address: requestParameters.address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomerToStore(requestParameters.storeId, ecommerceAddCustomerToStoreRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or update a customer.
         * @summary Add or update customer
         * @param {EcommerceApiAddOrUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateCustomer(requestParameters: EcommerceApiAddOrUpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddOrUpdateCustomerResponse>> {
            const ecommerceAddOrUpdateCustomerRequest: EcommerceAddOrUpdateCustomerRequest = {
                id: requestParameters.id,
                email_address: requestParameters.email_address,
                opt_in_status: requestParameters.opt_in_status,
                company: requestParameters.company,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                address: requestParameters.address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateCustomer(requestParameters.storeId, requestParameters.customerId, ecommerceAddOrUpdateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or update a product variant.
         * @summary Add or update product variant
         * @param {EcommerceApiAddOrUpdateProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateProductVariant(requestParameters: EcommerceApiAddOrUpdateProductVariantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddOrUpdateProductVariantResponse>> {
            const ecommerceAddProductVariantRequest: EcommerceAddProductVariantRequest = {
                title: requestParameters.title,
                id: requestParameters.id,
                url: requestParameters.url,
                sku: requestParameters.sku,
                price: requestParameters.price,
                inventory_quantity: requestParameters.inventory_quantity,
                image_url: requestParameters.image_url,
                backorders: requestParameters.backorders,
                visibility: requestParameters.visibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateProductVariant(requestParameters.storeId, requestParameters.productId, requestParameters.variantId, ecommerceAddProductVariantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new line item to an existing order.
         * @summary Add order line item
         * @param {EcommerceApiAddOrderLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrderLineItem(requestParameters: EcommerceApiAddOrderLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddOrderLineItemResponse>> {
            const ecommerceAddOrderLineItemRequest: EcommerceAddOrderLineItemRequest = {
                id: requestParameters.id,
                product_id: requestParameters.product_id,
                product_variant_id: requestParameters.product_variant_id,
                quantity: requestParameters.quantity,
                price: requestParameters.price,
                discount: requestParameters.discount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrderLineItem(requestParameters.storeId, requestParameters.orderId, ecommerceAddOrderLineItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new order to a store.
         * @summary Add order
         * @param {EcommerceApiAddOrderToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrderToStore(requestParameters: EcommerceApiAddOrderToStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddOrderToStoreResponse>> {
            const ecommerceAddOrderToStoreRequest: EcommerceAddOrderToStoreRequest = {
                id: requestParameters.id,
                customer: requestParameters.customer,
                campaign_id: requestParameters.campaign_id,
                landing_site: requestParameters.landing_site,
                financial_status: requestParameters.financial_status,
                fulfillment_status: requestParameters.fulfillment_status,
                currency_code: requestParameters.currency_code,
                order_total: requestParameters.order_total,
                order_url: requestParameters.order_url,
                discount_total: requestParameters.discount_total,
                tax_total: requestParameters.tax_total,
                shipping_total: requestParameters.shipping_total,
                tracking_code: requestParameters.tracking_code,
                processed_at_foreign: requestParameters.processed_at_foreign,
                cancelled_at_foreign: requestParameters.cancelled_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign,
                shipping_address: requestParameters.shipping_address,
                billing_address: requestParameters.billing_address,
                promos: requestParameters.promos,
                lines: requestParameters.lines,
                outreach: requestParameters.outreach,
                tracking_number: requestParameters.tracking_number,
                tracking_carrier: requestParameters.tracking_carrier,
                tracking_url: requestParameters.tracking_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrderToStore(requestParameters.storeId, ecommerceAddOrderToStoreRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new image to the product.
         * @summary Add product image
         * @param {EcommerceApiAddProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProductImage(requestParameters: EcommerceApiAddProductImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddProductImageResponse>> {
            const ecommerceAddProductImageRequest: EcommerceAddProductImageRequest = {
                id: requestParameters.id,
                url: requestParameters.url,
                variant_ids: requestParameters.variant_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductImage(requestParameters.storeId, requestParameters.productId, ecommerceAddProductImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new product to a store.
         * @summary Add product
         * @param {EcommerceApiAddProductToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProductToStore(requestParameters: EcommerceApiAddProductToStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddProductToStoreResponse>> {
            const ecommerceAddProductToStoreRequest: EcommerceAddProductToStoreRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                id: requestParameters.id,
                handle: requestParameters.handle,
                url: requestParameters.url,
                type: requestParameters.type,
                vendor: requestParameters.vendor,
                image_url: requestParameters.image_url,
                variants: requestParameters.variants,
                images: requestParameters.images,
                published_at_foreign: requestParameters.published_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductToStore(requestParameters.storeId, ecommerceAddProductToStoreRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new variant to the product.
         * @summary Add product variant
         * @param {EcommerceApiAddProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProductVariant(requestParameters: EcommerceApiAddProductVariantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddProductVariantResponse>> {
            const ecommerceAddProductVariantRequest: EcommerceAddProductVariantRequest = {
                title: requestParameters.title,
                id: requestParameters.id,
                url: requestParameters.url,
                sku: requestParameters.sku,
                price: requestParameters.price,
                inventory_quantity: requestParameters.inventory_quantity,
                image_url: requestParameters.image_url,
                backorders: requestParameters.backorders,
                visibility: requestParameters.visibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductVariant(requestParameters.storeId, requestParameters.productId, ecommerceAddProductVariantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new promo code to a store.
         * @summary Add promo code
         * @param {EcommerceApiAddPromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPromoCode(requestParameters: EcommerceApiAddPromoCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddPromoCodeResponse>> {
            const ecommerceAddPromoCodeRequest: EcommerceAddPromoCodeRequest = {
                id: requestParameters.id,
                code: requestParameters.code,
                redemption_url: requestParameters.redemption_url,
                usage_count: requestParameters.usage_count,
                enabled: requestParameters.enabled,
                created_at_foreign: requestParameters.created_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPromoCode(requestParameters.storeId, requestParameters.promoRuleId, ecommerceAddPromoCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new promo rule to a store.
         * @summary Add promo rule
         * @param {EcommerceApiAddPromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPromoRule(requestParameters: EcommerceApiAddPromoRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddPromoRuleResponse>> {
            const ecommerceAddPromoRuleRequest: EcommerceAddPromoRuleRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                id: requestParameters.id,
                starts_at: requestParameters.starts_at,
                ends_at: requestParameters.ends_at,
                amount: requestParameters.amount,
                type: requestParameters.type,
                target: requestParameters.target,
                enabled: requestParameters.enabled,
                created_at_foreign: requestParameters.created_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPromoRule(requestParameters.storeId, ecommerceAddPromoRuleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new store to your Mailchimp account.
         * @summary Add store
         * @param {EcommerceApiAddStoreToMailchimpAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStoreToMailchimpAccount(requestParameters: EcommerceApiAddStoreToMailchimpAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceAddStoreToMailchimpAccountResponse>> {
            const ecommerceAddStoreToMailchimpAccountRequest: EcommerceAddStoreToMailchimpAccountRequest = {
                id: requestParameters.id,
                list_id: requestParameters.list_id,
                name: requestParameters.name,
                platform: requestParameters.platform,
                domain: requestParameters.domain,
                is_syncing: requestParameters.is_syncing,
                email_address: requestParameters.email_address,
                currency_code: requestParameters.currency_code,
                money_format: requestParameters.money_format,
                primary_locale: requestParameters.primary_locale,
                timezone: requestParameters.timezone,
                phone: requestParameters.phone,
                address: requestParameters.address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStoreToMailchimpAccount(ecommerceAddStoreToMailchimpAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific cart line item.
         * @summary Delete cart line item
         * @param {EcommerceApiDeleteCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCartLineItem(requestParameters: EcommerceApiDeleteCartLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCartLineItem(requestParameters.storeId, requestParameters.cartId, requestParameters.lineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an order.
         * @summary Delete order
         * @param {EcommerceApiDeleteOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(requestParameters: EcommerceApiDeleteOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(requestParameters.storeId, requestParameters.orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific order line item.
         * @summary Delete order line item
         * @param {EcommerceApiDeleteOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderLine(requestParameters: EcommerceApiDeleteOrderLineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrderLine(requestParameters.storeId, requestParameters.orderId, requestParameters.lineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {EcommerceApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(requestParameters: EcommerceApiDeleteProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(requestParameters.storeId, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a product image.
         * @summary Delete product image
         * @param {EcommerceApiDeleteProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductImage(requestParameters: EcommerceApiDeleteProductImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductImage(requestParameters.storeId, requestParameters.productId, requestParameters.imageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a product variant.
         * @summary Delete product variant
         * @param {EcommerceApiDeleteProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductVariant(requestParameters: EcommerceApiDeleteProductVariantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductVariant(requestParameters.storeId, requestParameters.productId, requestParameters.variantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a promo code from a store.
         * @summary Delete promo code
         * @param {EcommerceApiDeletePromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePromoCode(requestParameters: EcommerceApiDeletePromoCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePromoCode(requestParameters.storeId, requestParameters.promoRuleId, requestParameters.promoCodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a promo rule from a store.
         * @summary Delete promo rule
         * @param {EcommerceApiDeletePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePromoRule(requestParameters: EcommerceApiDeletePromoRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePromoRule(requestParameters.storeId, requestParameters.promoRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
         * @summary Delete store
         * @param {EcommerceApiDeleteStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStore(requestParameters: EcommerceApiDeleteStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStore(requestParameters.storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific cart.
         * @summary Get cart info
         * @param {EcommerceApiGetCartInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCartInfo(requestParameters: EcommerceApiGetCartInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetCartInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCartInfo(requestParameters.storeId, requestParameters.cartId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific cart line item.
         * @summary Get cart line item
         * @param {EcommerceApiGetCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCartLineItem(requestParameters: EcommerceApiGetCartLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetCartLineItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCartLineItem(requestParameters.storeId, requestParameters.cartId, requestParameters.lineId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific customer.
         * @summary Get customer info
         * @param {EcommerceApiGetCustomerInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerInfo(requestParameters: EcommerceApiGetCustomerInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetCustomerInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerInfo(requestParameters.storeId, requestParameters.customerId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific order line item.
         * @summary Get order line item
         * @param {EcommerceApiGetOrderLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderLineItem(requestParameters: EcommerceApiGetOrderLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetOrderLineItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderLineItem(requestParameters.storeId, requestParameters.orderId, requestParameters.lineId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific product image.
         * @summary Get product image info
         * @param {EcommerceApiGetProductImageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductImageInfo(requestParameters: EcommerceApiGetProductImageInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetProductImageInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductImageInfo(requestParameters.storeId, requestParameters.productId, requestParameters.imageId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a product\'s images.
         * @summary List product images
         * @param {EcommerceApiGetProductImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductImages(requestParameters: EcommerceApiGetProductImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetProductImagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductImages(requestParameters.storeId, requestParameters.productId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific product variant.
         * @summary Get product variant info
         * @param {EcommerceApiGetProductVariantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductVariantInfo(requestParameters: EcommerceApiGetProductVariantInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetProductVariantInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductVariantInfo(requestParameters.storeId, requestParameters.productId, requestParameters.variantId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific promo code.
         * @summary Get promo code
         * @param {EcommerceApiGetPromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromoCode(requestParameters: EcommerceApiGetPromoCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetPromoCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromoCode(requestParameters.storeId, requestParameters.promoRuleId, requestParameters.promoCodeId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s carts.
         * @summary List carts
         * @param {EcommerceApiGetStoreCartsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreCarts(requestParameters: EcommerceApiGetStoreCartsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreCartsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreCarts(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s customers.
         * @summary List customers
         * @param {EcommerceApiGetStoreCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreCustomers(requestParameters: EcommerceApiGetStoreCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreCustomersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreCustomers(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.emailAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific store.
         * @summary Get store info
         * @param {EcommerceApiGetStoreInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreInfo(requestParameters: EcommerceApiGetStoreInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreInfo(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific order.
         * @summary Get order info
         * @param {EcommerceApiGetStoreOrderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreOrderInfo(requestParameters: EcommerceApiGetStoreOrderInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreOrderInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreOrderInfo(requestParameters.storeId, requestParameters.orderId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about an order\'s line items.
         * @summary List order line items
         * @param {EcommerceApiGetStoreOrderLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreOrderLines(requestParameters: EcommerceApiGetStoreOrderLinesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreOrderLinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreOrderLines(requestParameters.storeId, requestParameters.orderId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific product.
         * @summary Get product info
         * @param {EcommerceApiGetStoreProductInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreProductInfo(requestParameters: EcommerceApiGetStoreProductInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreProductInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreProductInfo(requestParameters.storeId, requestParameters.productId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s products.
         * @summary List product
         * @param {EcommerceApiGetStoreProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreProducts(requestParameters: EcommerceApiGetStoreProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStoreProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoreProducts(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s promo codes.
         * @summary List promo codes
         * @param {EcommerceApiGetStorePromoCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStorePromoCodes(requestParameters: EcommerceApiGetStorePromoCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStorePromoCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStorePromoCodes(requestParameters.promoRuleId, requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific promo rule.
         * @summary Get promo rule
         * @param {EcommerceApiGetStorePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStorePromoRule(requestParameters: EcommerceApiGetStorePromoRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStorePromoRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStorePromoRule(requestParameters.storeId, requestParameters.promoRuleId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s promo rules.
         * @summary List promo rules
         * @param {EcommerceApiGetStorePromoRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStorePromoRules(requestParameters: EcommerceApiGetStorePromoRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceGetStorePromoRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStorePromoRules(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about an account\'s orders.
         * @summary List account orders
         * @param {EcommerceApiListAccountOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountOrders(requestParameters: EcommerceApiListAccountOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceListAccountOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountOrders(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.campaignId, requestParameters.outreachId, requestParameters.customerId, requestParameters.hasOutreach, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a cart\'s line items.
         * @summary List cart line items
         * @param {EcommerceApiListCartLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCartLines(requestParameters: EcommerceApiListCartLinesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceListCartLinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCartLines(requestParameters.storeId, requestParameters.cartId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a product\'s variants.
         * @summary List product variants
         * @param {EcommerceApiListProductVariantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductVariants(requestParameters: EcommerceApiListProductVariantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceListProductVariantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductVariants(requestParameters.storeId, requestParameters.productId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a store\'s orders.
         * @summary List orders
         * @param {EcommerceApiListStoreOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStoreOrders(requestParameters: EcommerceApiListStoreOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceListStoreOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStoreOrders(requestParameters.storeId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.customerId, requestParameters.hasOutreach, requestParameters.campaignId, requestParameters.outreachId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about all stores in the account.
         * @summary List stores
         * @param {EcommerceApiListStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStores(requestParameters: EcommerceApiListStoresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceListStoresResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a cart.
         * @summary Delete cart
         * @param {EcommerceApiRemoveCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCart(requestParameters: EcommerceApiRemoveCartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCart(requestParameters.storeId, requestParameters.cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a customer from a store.
         * @summary Delete customer
         * @param {EcommerceApiRemoveCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomer(requestParameters: EcommerceApiRemoveCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomer(requestParameters.storeId, requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific cart.
         * @summary Update cart
         * @param {EcommerceApiUpdateCartByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCartById(requestParameters: EcommerceApiUpdateCartByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateCartByIdResponse>> {
            const ecommerceUpdateCartByIdRequest: EcommerceUpdateCartByIdRequest = {
                customer: requestParameters.customer,
                campaign_id: requestParameters.campaign_id,
                checkout_url: requestParameters.checkout_url,
                currency_code: requestParameters.currency_code,
                order_total: requestParameters.order_total,
                tax_total: requestParameters.tax_total,
                lines: requestParameters.lines
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCartById(requestParameters.storeId, requestParameters.cartId, ecommerceUpdateCartByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific cart line item.
         * @summary Update cart line item
         * @param {EcommerceApiUpdateCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCartLineItem(requestParameters: EcommerceApiUpdateCartLineItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateCartLineItemResponse>> {
            const ecommerceUpdateCartLineItemRequest: EcommerceUpdateCartLineItemRequest = {
                product_id: requestParameters.product_id,
                product_variant_id: requestParameters.product_variant_id,
                quantity: requestParameters.quantity,
                price: requestParameters.price
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCartLineItem(requestParameters.storeId, requestParameters.cartId, requestParameters.lineId, ecommerceUpdateCartLineItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a customer.
         * @summary Update customer
         * @param {EcommerceApiUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomer(requestParameters: EcommerceApiUpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateCustomerResponse>> {
            const ecommerceUpdateCustomerRequest: EcommerceUpdateCustomerRequest = {
                opt_in_status: requestParameters.opt_in_status,
                company: requestParameters.company,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                address: requestParameters.address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomer(requestParameters.storeId, requestParameters.customerId, ecommerceUpdateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific order line item.
         * @summary Update order line item
         * @param {EcommerceApiUpdateOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderLine(requestParameters: EcommerceApiUpdateOrderLineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateOrderLineResponse>> {
            const ecommerceUpdateOrderLineRequest: EcommerceUpdateOrderLineRequest = {
                product_id: requestParameters.product_id,
                product_variant_id: requestParameters.product_variant_id,
                quantity: requestParameters.quantity,
                price: requestParameters.price,
                discount: requestParameters.discount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderLine(requestParameters.storeId, requestParameters.orderId, requestParameters.lineId, ecommerceUpdateOrderLineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific product.
         * @summary Update product
         * @param {EcommerceApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(requestParameters: EcommerceApiUpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateProductResponse>> {
            const ecommerceUpdateProductRequest: EcommerceUpdateProductRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                handle: requestParameters.handle,
                url: requestParameters.url,
                type: requestParameters.type,
                vendor: requestParameters.vendor,
                image_url: requestParameters.image_url,
                variants: requestParameters.variants,
                images: requestParameters.images,
                published_at_foreign: requestParameters.published_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(requestParameters.storeId, requestParameters.productId, ecommerceUpdateProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a product image.
         * @summary Update product image
         * @param {EcommerceApiUpdateProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductImage(requestParameters: EcommerceApiUpdateProductImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateProductImageResponse>> {
            const ecommerceUpdateProductImageRequest: EcommerceUpdateProductImageRequest = {
                id: requestParameters.id,
                url: requestParameters.url,
                variant_ids: requestParameters.variant_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductImage(requestParameters.storeId, requestParameters.productId, requestParameters.imageId, ecommerceUpdateProductImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a product variant.
         * @summary Update product variant
         * @param {EcommerceApiUpdateProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductVariant(requestParameters: EcommerceApiUpdateProductVariantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateProductVariantResponse>> {
            const ecommerceUpdateProductVariantRequest: EcommerceUpdateProductVariantRequest = {
                title: requestParameters.title,
                url: requestParameters.url,
                sku: requestParameters.sku,
                price: requestParameters.price,
                inventory_quantity: requestParameters.inventory_quantity,
                image_url: requestParameters.image_url,
                backorders: requestParameters.backorders,
                visibility: requestParameters.visibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductVariant(requestParameters.storeId, requestParameters.productId, requestParameters.variantId, ecommerceUpdateProductVariantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a promo code.
         * @summary Update promo code
         * @param {EcommerceApiUpdatePromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePromoCode(requestParameters: EcommerceApiUpdatePromoCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdatePromoCodeResponse>> {
            const ecommerceUpdatePromoCodeRequest: EcommerceUpdatePromoCodeRequest = {
                code: requestParameters.code,
                redemption_url: requestParameters.redemption_url,
                usage_count: requestParameters.usage_count,
                enabled: requestParameters.enabled,
                created_at_foreign: requestParameters.created_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePromoCode(requestParameters.storeId, requestParameters.promoRuleId, requestParameters.promoCodeId, ecommerceUpdatePromoCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a promo rule.
         * @summary Update promo rule
         * @param {EcommerceApiUpdatePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePromoRule(requestParameters: EcommerceApiUpdatePromoRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdatePromoRuleResponse>> {
            const ecommerceUpdatePromoRuleRequest: EcommerceUpdatePromoRuleRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                starts_at: requestParameters.starts_at,
                ends_at: requestParameters.ends_at,
                amount: requestParameters.amount,
                type: requestParameters.type,
                target: requestParameters.target,
                enabled: requestParameters.enabled,
                created_at_foreign: requestParameters.created_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePromoRule(requestParameters.storeId, requestParameters.promoRuleId, ecommerceUpdatePromoRuleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific order.
         * @summary Update order
         * @param {EcommerceApiUpdateSpecificOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificOrder(requestParameters: EcommerceApiUpdateSpecificOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateSpecificOrderResponse>> {
            const ecommerceUpdateSpecificOrderRequest: EcommerceUpdateSpecificOrderRequest = {
                customer: requestParameters.customer,
                campaign_id: requestParameters.campaign_id,
                landing_site: requestParameters.landing_site,
                financial_status: requestParameters.financial_status,
                fulfillment_status: requestParameters.fulfillment_status,
                currency_code: requestParameters.currency_code,
                order_total: requestParameters.order_total,
                order_url: requestParameters.order_url,
                discount_total: requestParameters.discount_total,
                tax_total: requestParameters.tax_total,
                shipping_total: requestParameters.shipping_total,
                tracking_code: requestParameters.tracking_code,
                processed_at_foreign: requestParameters.processed_at_foreign,
                cancelled_at_foreign: requestParameters.cancelled_at_foreign,
                updated_at_foreign: requestParameters.updated_at_foreign,
                shipping_address: requestParameters.shipping_address,
                billing_address: requestParameters.billing_address,
                promos: requestParameters.promos,
                lines: requestParameters.lines,
                outreach: requestParameters.outreach,
                tracking_number: requestParameters.tracking_number,
                tracking_carrier: requestParameters.tracking_carrier,
                tracking_url: requestParameters.tracking_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificOrder(requestParameters.storeId, requestParameters.orderId, ecommerceUpdateSpecificOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a store.
         * @summary Update store
         * @param {EcommerceApiUpdateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStore(requestParameters: EcommerceApiUpdateStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EcommerceUpdateStoreResponse>> {
            const ecommerceUpdateStoreRequest: EcommerceUpdateStoreRequest = {
                name: requestParameters.name,
                platform: requestParameters.platform,
                domain: requestParameters.domain,
                is_syncing: requestParameters.is_syncing,
                email_address: requestParameters.email_address,
                currency_code: requestParameters.currency_code,
                money_format: requestParameters.money_format,
                primary_locale: requestParameters.primary_locale,
                timezone: requestParameters.timezone,
                phone: requestParameters.phone,
                address: requestParameters.address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStore(requestParameters.storeId, ecommerceUpdateStoreRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EcommerceApi - factory interface
 * @export
 */
export const EcommerceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EcommerceApiFp(configuration)
    return {
        /**
         * Add a new line item to an existing cart.
         * @summary Add cart line item
         * @param {EcommerceApiAddCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCartLineItem(requestParameters: EcommerceApiAddCartLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddCartLineItemResponse> {
            return localVarFp.addCartLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new cart to a store.
         * @summary Add cart
         * @param {EcommerceApiAddCartToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCartToStore(requestParameters: EcommerceApiAddCartToStoreRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddCartToStoreResponse> {
            return localVarFp.addCartToStore(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new customer to a store.
         * @summary Add customer
         * @param {EcommerceApiAddCustomerToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerToStore(requestParameters: EcommerceApiAddCustomerToStoreRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddCustomerToStoreResponse> {
            return localVarFp.addCustomerToStore(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or update a customer.
         * @summary Add or update customer
         * @param {EcommerceApiAddOrUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCustomer(requestParameters: EcommerceApiAddOrUpdateCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddOrUpdateCustomerResponse> {
            return localVarFp.addOrUpdateCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or update a product variant.
         * @summary Add or update product variant
         * @param {EcommerceApiAddOrUpdateProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateProductVariant(requestParameters: EcommerceApiAddOrUpdateProductVariantRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddOrUpdateProductVariantResponse> {
            return localVarFp.addOrUpdateProductVariant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new line item to an existing order.
         * @summary Add order line item
         * @param {EcommerceApiAddOrderLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderLineItem(requestParameters: EcommerceApiAddOrderLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddOrderLineItemResponse> {
            return localVarFp.addOrderLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new order to a store.
         * @summary Add order
         * @param {EcommerceApiAddOrderToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderToStore(requestParameters: EcommerceApiAddOrderToStoreRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddOrderToStoreResponse> {
            return localVarFp.addOrderToStore(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new image to the product.
         * @summary Add product image
         * @param {EcommerceApiAddProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductImage(requestParameters: EcommerceApiAddProductImageRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddProductImageResponse> {
            return localVarFp.addProductImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new product to a store.
         * @summary Add product
         * @param {EcommerceApiAddProductToStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductToStore(requestParameters: EcommerceApiAddProductToStoreRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddProductToStoreResponse> {
            return localVarFp.addProductToStore(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new variant to the product.
         * @summary Add product variant
         * @param {EcommerceApiAddProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductVariant(requestParameters: EcommerceApiAddProductVariantRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddProductVariantResponse> {
            return localVarFp.addProductVariant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new promo code to a store.
         * @summary Add promo code
         * @param {EcommerceApiAddPromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromoCode(requestParameters: EcommerceApiAddPromoCodeRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddPromoCodeResponse> {
            return localVarFp.addPromoCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new promo rule to a store.
         * @summary Add promo rule
         * @param {EcommerceApiAddPromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPromoRule(requestParameters: EcommerceApiAddPromoRuleRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddPromoRuleResponse> {
            return localVarFp.addPromoRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new store to your Mailchimp account.
         * @summary Add store
         * @param {EcommerceApiAddStoreToMailchimpAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStoreToMailchimpAccount(requestParameters: EcommerceApiAddStoreToMailchimpAccountRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceAddStoreToMailchimpAccountResponse> {
            return localVarFp.addStoreToMailchimpAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific cart line item.
         * @summary Delete cart line item
         * @param {EcommerceApiDeleteCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCartLineItem(requestParameters: EcommerceApiDeleteCartLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCartLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an order.
         * @summary Delete order
         * @param {EcommerceApiDeleteOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(requestParameters: EcommerceApiDeleteOrderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific order line item.
         * @summary Delete order line item
         * @param {EcommerceApiDeleteOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderLine(requestParameters: EcommerceApiDeleteOrderLineRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrderLine(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {EcommerceApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: EcommerceApiDeleteProductRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a product image.
         * @summary Delete product image
         * @param {EcommerceApiDeleteProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductImage(requestParameters: EcommerceApiDeleteProductImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProductImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a product variant.
         * @summary Delete product variant
         * @param {EcommerceApiDeleteProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariant(requestParameters: EcommerceApiDeleteProductVariantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProductVariant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a promo code from a store.
         * @summary Delete promo code
         * @param {EcommerceApiDeletePromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromoCode(requestParameters: EcommerceApiDeletePromoCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePromoCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a promo rule from a store.
         * @summary Delete promo rule
         * @param {EcommerceApiDeletePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromoRule(requestParameters: EcommerceApiDeletePromoRuleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePromoRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
         * @summary Delete store
         * @param {EcommerceApiDeleteStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStore(requestParameters: EcommerceApiDeleteStoreRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteStore(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific cart.
         * @summary Get cart info
         * @param {EcommerceApiGetCartInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartInfo(requestParameters: EcommerceApiGetCartInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetCartInfoResponse> {
            return localVarFp.getCartInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific cart line item.
         * @summary Get cart line item
         * @param {EcommerceApiGetCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartLineItem(requestParameters: EcommerceApiGetCartLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetCartLineItemResponse> {
            return localVarFp.getCartLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific customer.
         * @summary Get customer info
         * @param {EcommerceApiGetCustomerInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInfo(requestParameters: EcommerceApiGetCustomerInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetCustomerInfoResponse> {
            return localVarFp.getCustomerInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific order line item.
         * @summary Get order line item
         * @param {EcommerceApiGetOrderLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderLineItem(requestParameters: EcommerceApiGetOrderLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetOrderLineItemResponse> {
            return localVarFp.getOrderLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific product image.
         * @summary Get product image info
         * @param {EcommerceApiGetProductImageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImageInfo(requestParameters: EcommerceApiGetProductImageInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetProductImageInfoResponse> {
            return localVarFp.getProductImageInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a product\'s images.
         * @summary List product images
         * @param {EcommerceApiGetProductImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImages(requestParameters: EcommerceApiGetProductImagesRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetProductImagesResponse> {
            return localVarFp.getProductImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific product variant.
         * @summary Get product variant info
         * @param {EcommerceApiGetProductVariantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductVariantInfo(requestParameters: EcommerceApiGetProductVariantInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetProductVariantInfoResponse> {
            return localVarFp.getProductVariantInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific promo code.
         * @summary Get promo code
         * @param {EcommerceApiGetPromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromoCode(requestParameters: EcommerceApiGetPromoCodeRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetPromoCodeResponse> {
            return localVarFp.getPromoCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s carts.
         * @summary List carts
         * @param {EcommerceApiGetStoreCartsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCarts(requestParameters: EcommerceApiGetStoreCartsRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreCartsResponse> {
            return localVarFp.getStoreCarts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s customers.
         * @summary List customers
         * @param {EcommerceApiGetStoreCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreCustomers(requestParameters: EcommerceApiGetStoreCustomersRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreCustomersResponse> {
            return localVarFp.getStoreCustomers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific store.
         * @summary Get store info
         * @param {EcommerceApiGetStoreInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreInfo(requestParameters: EcommerceApiGetStoreInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreInfoResponse> {
            return localVarFp.getStoreInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific order.
         * @summary Get order info
         * @param {EcommerceApiGetStoreOrderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrderInfo(requestParameters: EcommerceApiGetStoreOrderInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreOrderInfoResponse> {
            return localVarFp.getStoreOrderInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about an order\'s line items.
         * @summary List order line items
         * @param {EcommerceApiGetStoreOrderLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrderLines(requestParameters: EcommerceApiGetStoreOrderLinesRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreOrderLinesResponse> {
            return localVarFp.getStoreOrderLines(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific product.
         * @summary Get product info
         * @param {EcommerceApiGetStoreProductInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProductInfo(requestParameters: EcommerceApiGetStoreProductInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreProductInfoResponse> {
            return localVarFp.getStoreProductInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s products.
         * @summary List product
         * @param {EcommerceApiGetStoreProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreProducts(requestParameters: EcommerceApiGetStoreProductsRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStoreProductsResponse> {
            return localVarFp.getStoreProducts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s promo codes.
         * @summary List promo codes
         * @param {EcommerceApiGetStorePromoCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoCodes(requestParameters: EcommerceApiGetStorePromoCodesRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStorePromoCodesResponse> {
            return localVarFp.getStorePromoCodes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific promo rule.
         * @summary Get promo rule
         * @param {EcommerceApiGetStorePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoRule(requestParameters: EcommerceApiGetStorePromoRuleRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStorePromoRuleResponse> {
            return localVarFp.getStorePromoRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s promo rules.
         * @summary List promo rules
         * @param {EcommerceApiGetStorePromoRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorePromoRules(requestParameters: EcommerceApiGetStorePromoRulesRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceGetStorePromoRulesResponse> {
            return localVarFp.getStorePromoRules(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about an account\'s orders.
         * @summary List account orders
         * @param {EcommerceApiListAccountOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountOrders(requestParameters: EcommerceApiListAccountOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceListAccountOrdersResponse> {
            return localVarFp.listAccountOrders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a cart\'s line items.
         * @summary List cart line items
         * @param {EcommerceApiListCartLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCartLines(requestParameters: EcommerceApiListCartLinesRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceListCartLinesResponse> {
            return localVarFp.listCartLines(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a product\'s variants.
         * @summary List product variants
         * @param {EcommerceApiListProductVariantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductVariants(requestParameters: EcommerceApiListProductVariantsRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceListProductVariantsResponse> {
            return localVarFp.listProductVariants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a store\'s orders.
         * @summary List orders
         * @param {EcommerceApiListStoreOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStoreOrders(requestParameters: EcommerceApiListStoreOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceListStoreOrdersResponse> {
            return localVarFp.listStoreOrders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about all stores in the account.
         * @summary List stores
         * @param {EcommerceApiListStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStores(requestParameters: EcommerceApiListStoresRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceListStoresResponse> {
            return localVarFp.listStores(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a cart.
         * @summary Delete cart
         * @param {EcommerceApiRemoveCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCart(requestParameters: EcommerceApiRemoveCartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCart(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a customer from a store.
         * @summary Delete customer
         * @param {EcommerceApiRemoveCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomer(requestParameters: EcommerceApiRemoveCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific cart.
         * @summary Update cart
         * @param {EcommerceApiUpdateCartByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCartById(requestParameters: EcommerceApiUpdateCartByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateCartByIdResponse> {
            return localVarFp.updateCartById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific cart line item.
         * @summary Update cart line item
         * @param {EcommerceApiUpdateCartLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCartLineItem(requestParameters: EcommerceApiUpdateCartLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateCartLineItemResponse> {
            return localVarFp.updateCartLineItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a customer.
         * @summary Update customer
         * @param {EcommerceApiUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(requestParameters: EcommerceApiUpdateCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateCustomerResponse> {
            return localVarFp.updateCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific order line item.
         * @summary Update order line item
         * @param {EcommerceApiUpdateOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderLine(requestParameters: EcommerceApiUpdateOrderLineRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateOrderLineResponse> {
            return localVarFp.updateOrderLine(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific product.
         * @summary Update product
         * @param {EcommerceApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(requestParameters: EcommerceApiUpdateProductRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateProductResponse> {
            return localVarFp.updateProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a product image.
         * @summary Update product image
         * @param {EcommerceApiUpdateProductImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductImage(requestParameters: EcommerceApiUpdateProductImageRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateProductImageResponse> {
            return localVarFp.updateProductImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a product variant.
         * @summary Update product variant
         * @param {EcommerceApiUpdateProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductVariant(requestParameters: EcommerceApiUpdateProductVariantRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateProductVariantResponse> {
            return localVarFp.updateProductVariant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a promo code.
         * @summary Update promo code
         * @param {EcommerceApiUpdatePromoCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromoCode(requestParameters: EcommerceApiUpdatePromoCodeRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdatePromoCodeResponse> {
            return localVarFp.updatePromoCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a promo rule.
         * @summary Update promo rule
         * @param {EcommerceApiUpdatePromoRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromoRule(requestParameters: EcommerceApiUpdatePromoRuleRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdatePromoRuleResponse> {
            return localVarFp.updatePromoRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific order.
         * @summary Update order
         * @param {EcommerceApiUpdateSpecificOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificOrder(requestParameters: EcommerceApiUpdateSpecificOrderRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateSpecificOrderResponse> {
            return localVarFp.updateSpecificOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a store.
         * @summary Update store
         * @param {EcommerceApiUpdateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStore(requestParameters: EcommerceApiUpdateStoreRequest, options?: AxiosRequestConfig): AxiosPromise<EcommerceUpdateStoreResponse> {
            return localVarFp.updateStore(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCartLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddCartLineItemRequest
 */
export type EcommerceApiAddCartLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddCartLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiAddCartLineItem
    */
    readonly cartId: string
    
} & EcommerceAddCartLineItemRequest

/**
 * Request parameters for addCartToStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddCartToStoreRequest
 */
export type EcommerceApiAddCartToStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddCartToStore
    */
    readonly storeId: string
    
} & EcommerceAddCartToStoreRequest

/**
 * Request parameters for addCustomerToStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddCustomerToStoreRequest
 */
export type EcommerceApiAddCustomerToStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddCustomerToStore
    */
    readonly storeId: string
    
} & EcommerceAddCustomerToStoreRequest

/**
 * Request parameters for addOrUpdateCustomer operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddOrUpdateCustomerRequest
 */
export type EcommerceApiAddOrUpdateCustomerRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddOrUpdateCustomer
    */
    readonly storeId: string
    
    /**
    * The id for the customer of a store.
    * @type {string}
    * @memberof EcommerceApiAddOrUpdateCustomer
    */
    readonly customerId: string
    
} & EcommerceAddOrUpdateCustomerRequest

/**
 * Request parameters for addOrUpdateProductVariant operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddOrUpdateProductVariantRequest
 */
export type EcommerceApiAddOrUpdateProductVariantRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddOrUpdateProductVariant
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiAddOrUpdateProductVariant
    */
    readonly productId: string
    
    /**
    * The id for the product variant.
    * @type {string}
    * @memberof EcommerceApiAddOrUpdateProductVariant
    */
    readonly variantId: string
    
} & EcommerceAddProductVariantRequest

/**
 * Request parameters for addOrderLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddOrderLineItemRequest
 */
export type EcommerceApiAddOrderLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddOrderLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiAddOrderLineItem
    */
    readonly orderId: string
    
} & EcommerceAddOrderLineItemRequest

/**
 * Request parameters for addOrderToStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddOrderToStoreRequest
 */
export type EcommerceApiAddOrderToStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddOrderToStore
    */
    readonly storeId: string
    
} & EcommerceAddOrderToStoreRequest

/**
 * Request parameters for addProductImage operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddProductImageRequest
 */
export type EcommerceApiAddProductImageRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddProductImage
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiAddProductImage
    */
    readonly productId: string
    
} & EcommerceAddProductImageRequest

/**
 * Request parameters for addProductToStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddProductToStoreRequest
 */
export type EcommerceApiAddProductToStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddProductToStore
    */
    readonly storeId: string
    
} & EcommerceAddProductToStoreRequest

/**
 * Request parameters for addProductVariant operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddProductVariantRequest
 */
export type EcommerceApiAddProductVariantRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddProductVariant
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiAddProductVariant
    */
    readonly productId: string
    
} & EcommerceAddProductVariantRequest

/**
 * Request parameters for addPromoCode operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddPromoCodeRequest
 */
export type EcommerceApiAddPromoCodeRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddPromoCode
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiAddPromoCode
    */
    readonly promoRuleId: string
    
} & EcommerceAddPromoCodeRequest

/**
 * Request parameters for addPromoRule operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddPromoRuleRequest
 */
export type EcommerceApiAddPromoRuleRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiAddPromoRule
    */
    readonly storeId: string
    
} & EcommerceAddPromoRuleRequest

/**
 * Request parameters for addStoreToMailchimpAccount operation in EcommerceApi.
 * @export
 * @interface EcommerceApiAddStoreToMailchimpAccountRequest
 */
export type EcommerceApiAddStoreToMailchimpAccountRequest = {
    
} & EcommerceAddStoreToMailchimpAccountRequest

/**
 * Request parameters for deleteCartLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteCartLineItemRequest
 */
export type EcommerceApiDeleteCartLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteCartLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiDeleteCartLineItem
    */
    readonly cartId: string
    
    /**
    * The id for the line item of a cart.
    * @type {string}
    * @memberof EcommerceApiDeleteCartLineItem
    */
    readonly lineId: string
    
}

/**
 * Request parameters for deleteOrder operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteOrderRequest
 */
export type EcommerceApiDeleteOrderRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteOrder
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiDeleteOrder
    */
    readonly orderId: string
    
}

/**
 * Request parameters for deleteOrderLine operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteOrderLineRequest
 */
export type EcommerceApiDeleteOrderLineRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteOrderLine
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiDeleteOrderLine
    */
    readonly orderId: string
    
    /**
    * The id for the line item of an order.
    * @type {string}
    * @memberof EcommerceApiDeleteOrderLine
    */
    readonly lineId: string
    
}

/**
 * Request parameters for deleteProduct operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteProductRequest
 */
export type EcommerceApiDeleteProductRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteProduct
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiDeleteProduct
    */
    readonly productId: string
    
}

/**
 * Request parameters for deleteProductImage operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteProductImageRequest
 */
export type EcommerceApiDeleteProductImageRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteProductImage
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiDeleteProductImage
    */
    readonly productId: string
    
    /**
    * The id for the product image.
    * @type {string}
    * @memberof EcommerceApiDeleteProductImage
    */
    readonly imageId: string
    
}

/**
 * Request parameters for deleteProductVariant operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteProductVariantRequest
 */
export type EcommerceApiDeleteProductVariantRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteProductVariant
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiDeleteProductVariant
    */
    readonly productId: string
    
    /**
    * The id for the product variant.
    * @type {string}
    * @memberof EcommerceApiDeleteProductVariant
    */
    readonly variantId: string
    
}

/**
 * Request parameters for deletePromoCode operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeletePromoCodeRequest
 */
export type EcommerceApiDeletePromoCodeRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeletePromoCode
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiDeletePromoCode
    */
    readonly promoRuleId: string
    
    /**
    * The id for the promo code of a store.
    * @type {string}
    * @memberof EcommerceApiDeletePromoCode
    */
    readonly promoCodeId: string
    
}

/**
 * Request parameters for deletePromoRule operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeletePromoRuleRequest
 */
export type EcommerceApiDeletePromoRuleRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeletePromoRule
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiDeletePromoRule
    */
    readonly promoRuleId: string
    
}

/**
 * Request parameters for deleteStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiDeleteStoreRequest
 */
export type EcommerceApiDeleteStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiDeleteStore
    */
    readonly storeId: string
    
}

/**
 * Request parameters for getCartInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetCartInfoRequest
 */
export type EcommerceApiGetCartInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetCartInfo
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiGetCartInfo
    */
    readonly cartId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCartInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCartInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getCartLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetCartLineItemRequest
 */
export type EcommerceApiGetCartLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetCartLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiGetCartLineItem
    */
    readonly cartId: string
    
    /**
    * The id for the line item of a cart.
    * @type {string}
    * @memberof EcommerceApiGetCartLineItem
    */
    readonly lineId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCartLineItem
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCartLineItem
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getCustomerInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetCustomerInfoRequest
 */
export type EcommerceApiGetCustomerInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetCustomerInfo
    */
    readonly storeId: string
    
    /**
    * The id for the customer of a store.
    * @type {string}
    * @memberof EcommerceApiGetCustomerInfo
    */
    readonly customerId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCustomerInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetCustomerInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getOrderLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetOrderLineItemRequest
 */
export type EcommerceApiGetOrderLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetOrderLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiGetOrderLineItem
    */
    readonly orderId: string
    
    /**
    * The id for the line item of an order.
    * @type {string}
    * @memberof EcommerceApiGetOrderLineItem
    */
    readonly lineId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetOrderLineItem
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetOrderLineItem
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getProductImageInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetProductImageInfoRequest
 */
export type EcommerceApiGetProductImageInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetProductImageInfo
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiGetProductImageInfo
    */
    readonly productId: string
    
    /**
    * The id for the product image.
    * @type {string}
    * @memberof EcommerceApiGetProductImageInfo
    */
    readonly imageId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductImageInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductImageInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getProductImages operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetProductImagesRequest
 */
export type EcommerceApiGetProductImagesRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetProductImages
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiGetProductImages
    */
    readonly productId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductImages
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductImages
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetProductImages
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetProductImages
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getProductVariantInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetProductVariantInfoRequest
 */
export type EcommerceApiGetProductVariantInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetProductVariantInfo
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiGetProductVariantInfo
    */
    readonly productId: string
    
    /**
    * The id for the product variant.
    * @type {string}
    * @memberof EcommerceApiGetProductVariantInfo
    */
    readonly variantId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductVariantInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetProductVariantInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getPromoCode operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetPromoCodeRequest
 */
export type EcommerceApiGetPromoCodeRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetPromoCode
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiGetPromoCode
    */
    readonly promoRuleId: string
    
    /**
    * The id for the promo code of a store.
    * @type {string}
    * @memberof EcommerceApiGetPromoCode
    */
    readonly promoCodeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetPromoCode
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetPromoCode
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getStoreCarts operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreCartsRequest
 */
export type EcommerceApiGetStoreCartsRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreCarts
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreCarts
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreCarts
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStoreCarts
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStoreCarts
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getStoreCustomers operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreCustomersRequest
 */
export type EcommerceApiGetStoreCustomersRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly offset?: number
    
    /**
    * Restrict the response to customers with the email address.
    * @type {string}
    * @memberof EcommerceApiGetStoreCustomers
    */
    readonly emailAddress?: string
    
}

/**
 * Request parameters for getStoreInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreInfoRequest
 */
export type EcommerceApiGetStoreInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreInfo
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getStoreOrderInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreOrderInfoRequest
 */
export type EcommerceApiGetStoreOrderInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreOrderInfo
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiGetStoreOrderInfo
    */
    readonly orderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreOrderInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreOrderInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getStoreOrderLines operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreOrderLinesRequest
 */
export type EcommerceApiGetStoreOrderLinesRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly orderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStoreOrderLines
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getStoreProductInfo operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreProductInfoRequest
 */
export type EcommerceApiGetStoreProductInfoRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreProductInfo
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiGetStoreProductInfo
    */
    readonly productId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreProductInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreProductInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getStoreProducts operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStoreProductsRequest
 */
export type EcommerceApiGetStoreProductsRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStoreProducts
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreProducts
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStoreProducts
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStoreProducts
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStoreProducts
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getStorePromoCodes operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStorePromoCodesRequest
 */
export type EcommerceApiGetStorePromoCodesRequest = {
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly promoRuleId: string
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStorePromoCodes
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getStorePromoRule operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStorePromoRuleRequest
 */
export type EcommerceApiGetStorePromoRuleRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStorePromoRule
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiGetStorePromoRule
    */
    readonly promoRuleId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoRule
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoRule
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getStorePromoRules operation in EcommerceApi.
 * @export
 * @interface EcommerceApiGetStorePromoRulesRequest
 */
export type EcommerceApiGetStorePromoRulesRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiGetStorePromoRules
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoRules
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiGetStorePromoRules
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiGetStorePromoRules
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiGetStorePromoRules
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listAccountOrders operation in EcommerceApi.
 * @export
 * @interface EcommerceApiListAccountOrdersRequest
 */
export type EcommerceApiListAccountOrdersRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly offset?: number
    
    /**
    * Restrict results to orders with a specific `campaign_id` value.
    * @type {string}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly campaignId?: string
    
    /**
    * Restrict results to orders with a specific `outreach_id` value.
    * @type {string}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly outreachId?: string
    
    /**
    * Restrict results to orders made by a specific customer.
    * @type {string}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly customerId?: string
    
    /**
    * Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
    * @type {boolean}
    * @memberof EcommerceApiListAccountOrders
    */
    readonly hasOutreach?: boolean
    
}

/**
 * Request parameters for listCartLines operation in EcommerceApi.
 * @export
 * @interface EcommerceApiListCartLinesRequest
 */
export type EcommerceApiListCartLinesRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiListCartLines
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiListCartLines
    */
    readonly cartId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListCartLines
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListCartLines
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiListCartLines
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiListCartLines
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listProductVariants operation in EcommerceApi.
 * @export
 * @interface EcommerceApiListProductVariantsRequest
 */
export type EcommerceApiListProductVariantsRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiListProductVariants
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiListProductVariants
    */
    readonly productId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListProductVariants
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListProductVariants
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiListProductVariants
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiListProductVariants
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listStoreOrders operation in EcommerceApi.
 * @export
 * @interface EcommerceApiListStoreOrdersRequest
 */
export type EcommerceApiListStoreOrdersRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly storeId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly offset?: number
    
    /**
    * Restrict results to orders made by a specific customer.
    * @type {string}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly customerId?: string
    
    /**
    * Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
    * @type {boolean}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly hasOutreach?: boolean
    
    /**
    * Restrict results to orders with a specific `campaign_id` value.
    * @type {string}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly campaignId?: string
    
    /**
    * Restrict results to orders with a specific `outreach_id` value.
    * @type {string}
    * @memberof EcommerceApiListStoreOrders
    */
    readonly outreachId?: string
    
}

/**
 * Request parameters for listStores operation in EcommerceApi.
 * @export
 * @interface EcommerceApiListStoresRequest
 */
export type EcommerceApiListStoresRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListStores
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof EcommerceApiListStores
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof EcommerceApiListStores
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof EcommerceApiListStores
    */
    readonly offset?: number
    
}

/**
 * Request parameters for removeCart operation in EcommerceApi.
 * @export
 * @interface EcommerceApiRemoveCartRequest
 */
export type EcommerceApiRemoveCartRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiRemoveCart
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiRemoveCart
    */
    readonly cartId: string
    
}

/**
 * Request parameters for removeCustomer operation in EcommerceApi.
 * @export
 * @interface EcommerceApiRemoveCustomerRequest
 */
export type EcommerceApiRemoveCustomerRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiRemoveCustomer
    */
    readonly storeId: string
    
    /**
    * The id for the customer of a store.
    * @type {string}
    * @memberof EcommerceApiRemoveCustomer
    */
    readonly customerId: string
    
}

/**
 * Request parameters for updateCartById operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateCartByIdRequest
 */
export type EcommerceApiUpdateCartByIdRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateCartById
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiUpdateCartById
    */
    readonly cartId: string
    
} & EcommerceUpdateCartByIdRequest

/**
 * Request parameters for updateCartLineItem operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateCartLineItemRequest
 */
export type EcommerceApiUpdateCartLineItemRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateCartLineItem
    */
    readonly storeId: string
    
    /**
    * The id for the cart.
    * @type {string}
    * @memberof EcommerceApiUpdateCartLineItem
    */
    readonly cartId: string
    
    /**
    * The id for the line item of a cart.
    * @type {string}
    * @memberof EcommerceApiUpdateCartLineItem
    */
    readonly lineId: string
    
} & EcommerceUpdateCartLineItemRequest

/**
 * Request parameters for updateCustomer operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateCustomerRequest
 */
export type EcommerceApiUpdateCustomerRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateCustomer
    */
    readonly storeId: string
    
    /**
    * The id for the customer of a store.
    * @type {string}
    * @memberof EcommerceApiUpdateCustomer
    */
    readonly customerId: string
    
} & EcommerceUpdateCustomerRequest

/**
 * Request parameters for updateOrderLine operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateOrderLineRequest
 */
export type EcommerceApiUpdateOrderLineRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateOrderLine
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiUpdateOrderLine
    */
    readonly orderId: string
    
    /**
    * The id for the line item of an order.
    * @type {string}
    * @memberof EcommerceApiUpdateOrderLine
    */
    readonly lineId: string
    
} & EcommerceUpdateOrderLineRequest

/**
 * Request parameters for updateProduct operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateProductRequest
 */
export type EcommerceApiUpdateProductRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateProduct
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiUpdateProduct
    */
    readonly productId: string
    
} & EcommerceUpdateProductRequest

/**
 * Request parameters for updateProductImage operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateProductImageRequest
 */
export type EcommerceApiUpdateProductImageRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateProductImage
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiUpdateProductImage
    */
    readonly productId: string
    
    /**
    * The id for the product image.
    * @type {string}
    * @memberof EcommerceApiUpdateProductImage
    */
    readonly imageId: string
    
} & EcommerceUpdateProductImageRequest

/**
 * Request parameters for updateProductVariant operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateProductVariantRequest
 */
export type EcommerceApiUpdateProductVariantRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateProductVariant
    */
    readonly storeId: string
    
    /**
    * The id for the product of a store.
    * @type {string}
    * @memberof EcommerceApiUpdateProductVariant
    */
    readonly productId: string
    
    /**
    * The id for the product variant.
    * @type {string}
    * @memberof EcommerceApiUpdateProductVariant
    */
    readonly variantId: string
    
} & EcommerceUpdateProductVariantRequest

/**
 * Request parameters for updatePromoCode operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdatePromoCodeRequest
 */
export type EcommerceApiUpdatePromoCodeRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdatePromoCode
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiUpdatePromoCode
    */
    readonly promoRuleId: string
    
    /**
    * The id for the promo code of a store.
    * @type {string}
    * @memberof EcommerceApiUpdatePromoCode
    */
    readonly promoCodeId: string
    
} & EcommerceUpdatePromoCodeRequest

/**
 * Request parameters for updatePromoRule operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdatePromoRuleRequest
 */
export type EcommerceApiUpdatePromoRuleRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdatePromoRule
    */
    readonly storeId: string
    
    /**
    * The id for the promo rule of a store.
    * @type {string}
    * @memberof EcommerceApiUpdatePromoRule
    */
    readonly promoRuleId: string
    
} & EcommerceUpdatePromoRuleRequest

/**
 * Request parameters for updateSpecificOrder operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateSpecificOrderRequest
 */
export type EcommerceApiUpdateSpecificOrderRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateSpecificOrder
    */
    readonly storeId: string
    
    /**
    * The id for the order in a store.
    * @type {string}
    * @memberof EcommerceApiUpdateSpecificOrder
    */
    readonly orderId: string
    
} & EcommerceUpdateSpecificOrderRequest

/**
 * Request parameters for updateStore operation in EcommerceApi.
 * @export
 * @interface EcommerceApiUpdateStoreRequest
 */
export type EcommerceApiUpdateStoreRequest = {
    
    /**
    * The store id.
    * @type {string}
    * @memberof EcommerceApiUpdateStore
    */
    readonly storeId: string
    
} & EcommerceUpdateStoreRequest

/**
 * EcommerceApiGenerated - object-oriented interface
 * @export
 * @class EcommerceApiGenerated
 * @extends {BaseAPI}
 */
export class EcommerceApiGenerated extends BaseAPI {
    /**
     * Add a new line item to an existing cart.
     * @summary Add cart line item
     * @param {EcommerceApiAddCartLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addCartLineItem(requestParameters: EcommerceApiAddCartLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addCartLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new cart to a store.
     * @summary Add cart
     * @param {EcommerceApiAddCartToStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addCartToStore(requestParameters: EcommerceApiAddCartToStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addCartToStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new customer to a store.
     * @summary Add customer
     * @param {EcommerceApiAddCustomerToStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addCustomerToStore(requestParameters: EcommerceApiAddCustomerToStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addCustomerToStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or update a customer.
     * @summary Add or update customer
     * @param {EcommerceApiAddOrUpdateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addOrUpdateCustomer(requestParameters: EcommerceApiAddOrUpdateCustomerRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addOrUpdateCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or update a product variant.
     * @summary Add or update product variant
     * @param {EcommerceApiAddOrUpdateProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addOrUpdateProductVariant(requestParameters: EcommerceApiAddOrUpdateProductVariantRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addOrUpdateProductVariant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new line item to an existing order.
     * @summary Add order line item
     * @param {EcommerceApiAddOrderLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addOrderLineItem(requestParameters: EcommerceApiAddOrderLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addOrderLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new order to a store.
     * @summary Add order
     * @param {EcommerceApiAddOrderToStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addOrderToStore(requestParameters: EcommerceApiAddOrderToStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addOrderToStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new image to the product.
     * @summary Add product image
     * @param {EcommerceApiAddProductImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addProductImage(requestParameters: EcommerceApiAddProductImageRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addProductImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new product to a store.
     * @summary Add product
     * @param {EcommerceApiAddProductToStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addProductToStore(requestParameters: EcommerceApiAddProductToStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addProductToStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new variant to the product.
     * @summary Add product variant
     * @param {EcommerceApiAddProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addProductVariant(requestParameters: EcommerceApiAddProductVariantRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addProductVariant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new promo code to a store.
     * @summary Add promo code
     * @param {EcommerceApiAddPromoCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addPromoCode(requestParameters: EcommerceApiAddPromoCodeRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addPromoCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new promo rule to a store.
     * @summary Add promo rule
     * @param {EcommerceApiAddPromoRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addPromoRule(requestParameters: EcommerceApiAddPromoRuleRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addPromoRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new store to your Mailchimp account.
     * @summary Add store
     * @param {EcommerceApiAddStoreToMailchimpAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public addStoreToMailchimpAccount(requestParameters: EcommerceApiAddStoreToMailchimpAccountRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).addStoreToMailchimpAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific cart line item.
     * @summary Delete cart line item
     * @param {EcommerceApiDeleteCartLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteCartLineItem(requestParameters: EcommerceApiDeleteCartLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteCartLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an order.
     * @summary Delete order
     * @param {EcommerceApiDeleteOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteOrder(requestParameters: EcommerceApiDeleteOrderRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific order line item.
     * @summary Delete order line item
     * @param {EcommerceApiDeleteOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteOrderLine(requestParameters: EcommerceApiDeleteOrderLineRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteOrderLine(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a product.
     * @summary Delete product
     * @param {EcommerceApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteProduct(requestParameters: EcommerceApiDeleteProductRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a product image.
     * @summary Delete product image
     * @param {EcommerceApiDeleteProductImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteProductImage(requestParameters: EcommerceApiDeleteProductImageRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteProductImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a product variant.
     * @summary Delete product variant
     * @param {EcommerceApiDeleteProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteProductVariant(requestParameters: EcommerceApiDeleteProductVariantRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteProductVariant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a promo code from a store.
     * @summary Delete promo code
     * @param {EcommerceApiDeletePromoCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deletePromoCode(requestParameters: EcommerceApiDeletePromoCodeRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deletePromoCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a promo rule from a store.
     * @summary Delete promo rule
     * @param {EcommerceApiDeletePromoRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deletePromoRule(requestParameters: EcommerceApiDeletePromoRuleRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deletePromoRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
     * @summary Delete store
     * @param {EcommerceApiDeleteStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public deleteStore(requestParameters: EcommerceApiDeleteStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).deleteStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific cart.
     * @summary Get cart info
     * @param {EcommerceApiGetCartInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getCartInfo(requestParameters: EcommerceApiGetCartInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getCartInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific cart line item.
     * @summary Get cart line item
     * @param {EcommerceApiGetCartLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getCartLineItem(requestParameters: EcommerceApiGetCartLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getCartLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific customer.
     * @summary Get customer info
     * @param {EcommerceApiGetCustomerInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getCustomerInfo(requestParameters: EcommerceApiGetCustomerInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getCustomerInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific order line item.
     * @summary Get order line item
     * @param {EcommerceApiGetOrderLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getOrderLineItem(requestParameters: EcommerceApiGetOrderLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getOrderLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific product image.
     * @summary Get product image info
     * @param {EcommerceApiGetProductImageInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getProductImageInfo(requestParameters: EcommerceApiGetProductImageInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getProductImageInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a product\'s images.
     * @summary List product images
     * @param {EcommerceApiGetProductImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getProductImages(requestParameters: EcommerceApiGetProductImagesRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getProductImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific product variant.
     * @summary Get product variant info
     * @param {EcommerceApiGetProductVariantInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getProductVariantInfo(requestParameters: EcommerceApiGetProductVariantInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getProductVariantInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific promo code.
     * @summary Get promo code
     * @param {EcommerceApiGetPromoCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getPromoCode(requestParameters: EcommerceApiGetPromoCodeRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getPromoCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s carts.
     * @summary List carts
     * @param {EcommerceApiGetStoreCartsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreCarts(requestParameters: EcommerceApiGetStoreCartsRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreCarts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s customers.
     * @summary List customers
     * @param {EcommerceApiGetStoreCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreCustomers(requestParameters: EcommerceApiGetStoreCustomersRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreCustomers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific store.
     * @summary Get store info
     * @param {EcommerceApiGetStoreInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreInfo(requestParameters: EcommerceApiGetStoreInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific order.
     * @summary Get order info
     * @param {EcommerceApiGetStoreOrderInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreOrderInfo(requestParameters: EcommerceApiGetStoreOrderInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreOrderInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about an order\'s line items.
     * @summary List order line items
     * @param {EcommerceApiGetStoreOrderLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreOrderLines(requestParameters: EcommerceApiGetStoreOrderLinesRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreOrderLines(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific product.
     * @summary Get product info
     * @param {EcommerceApiGetStoreProductInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreProductInfo(requestParameters: EcommerceApiGetStoreProductInfoRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreProductInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s products.
     * @summary List product
     * @param {EcommerceApiGetStoreProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStoreProducts(requestParameters: EcommerceApiGetStoreProductsRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStoreProducts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s promo codes.
     * @summary List promo codes
     * @param {EcommerceApiGetStorePromoCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStorePromoCodes(requestParameters: EcommerceApiGetStorePromoCodesRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStorePromoCodes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific promo rule.
     * @summary Get promo rule
     * @param {EcommerceApiGetStorePromoRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStorePromoRule(requestParameters: EcommerceApiGetStorePromoRuleRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStorePromoRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s promo rules.
     * @summary List promo rules
     * @param {EcommerceApiGetStorePromoRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public getStorePromoRules(requestParameters: EcommerceApiGetStorePromoRulesRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).getStorePromoRules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about an account\'s orders.
     * @summary List account orders
     * @param {EcommerceApiListAccountOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public listAccountOrders(requestParameters: EcommerceApiListAccountOrdersRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).listAccountOrders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a cart\'s line items.
     * @summary List cart line items
     * @param {EcommerceApiListCartLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public listCartLines(requestParameters: EcommerceApiListCartLinesRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).listCartLines(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a product\'s variants.
     * @summary List product variants
     * @param {EcommerceApiListProductVariantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public listProductVariants(requestParameters: EcommerceApiListProductVariantsRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).listProductVariants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a store\'s orders.
     * @summary List orders
     * @param {EcommerceApiListStoreOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public listStoreOrders(requestParameters: EcommerceApiListStoreOrdersRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).listStoreOrders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about all stores in the account.
     * @summary List stores
     * @param {EcommerceApiListStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public listStores(requestParameters: EcommerceApiListStoresRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).listStores(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a cart.
     * @summary Delete cart
     * @param {EcommerceApiRemoveCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public removeCart(requestParameters: EcommerceApiRemoveCartRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).removeCart(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a customer from a store.
     * @summary Delete customer
     * @param {EcommerceApiRemoveCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public removeCustomer(requestParameters: EcommerceApiRemoveCustomerRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).removeCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific cart.
     * @summary Update cart
     * @param {EcommerceApiUpdateCartByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateCartById(requestParameters: EcommerceApiUpdateCartByIdRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateCartById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific cart line item.
     * @summary Update cart line item
     * @param {EcommerceApiUpdateCartLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateCartLineItem(requestParameters: EcommerceApiUpdateCartLineItemRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateCartLineItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a customer.
     * @summary Update customer
     * @param {EcommerceApiUpdateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateCustomer(requestParameters: EcommerceApiUpdateCustomerRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific order line item.
     * @summary Update order line item
     * @param {EcommerceApiUpdateOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateOrderLine(requestParameters: EcommerceApiUpdateOrderLineRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateOrderLine(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific product.
     * @summary Update product
     * @param {EcommerceApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateProduct(requestParameters: EcommerceApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a product image.
     * @summary Update product image
     * @param {EcommerceApiUpdateProductImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateProductImage(requestParameters: EcommerceApiUpdateProductImageRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateProductImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a product variant.
     * @summary Update product variant
     * @param {EcommerceApiUpdateProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateProductVariant(requestParameters: EcommerceApiUpdateProductVariantRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateProductVariant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a promo code.
     * @summary Update promo code
     * @param {EcommerceApiUpdatePromoCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updatePromoCode(requestParameters: EcommerceApiUpdatePromoCodeRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updatePromoCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a promo rule.
     * @summary Update promo rule
     * @param {EcommerceApiUpdatePromoRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updatePromoRule(requestParameters: EcommerceApiUpdatePromoRuleRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updatePromoRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific order.
     * @summary Update order
     * @param {EcommerceApiUpdateSpecificOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateSpecificOrder(requestParameters: EcommerceApiUpdateSpecificOrderRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateSpecificOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a store.
     * @summary Update store
     * @param {EcommerceApiUpdateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EcommerceApiGenerated
     */
    public updateStore(requestParameters: EcommerceApiUpdateStoreRequest, options?: AxiosRequestConfig) {
        return EcommerceApiFp(this.configuration).updateStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
