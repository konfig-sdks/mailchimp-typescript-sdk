/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CampaignFoldersAddNewFolder200Response } from '../models';
// @ts-ignore
import { CampaignFoldersAddNewFolderRequest } from '../models';
// @ts-ignore
import { CampaignFoldersAddNewFolderResponse } from '../models';
// @ts-ignore
import { CampaignFoldersAddNewFolderdefaultResponse } from '../models';
// @ts-ignore
import { CampaignFoldersDeleteFolderResponse } from '../models';
// @ts-ignore
import { CampaignFoldersDeleteFolderdefaultResponse } from '../models';
// @ts-ignore
import { CampaignFoldersGetFolderInfo200Response } from '../models';
// @ts-ignore
import { CampaignFoldersGetFolderInfoResponse } from '../models';
// @ts-ignore
import { CampaignFoldersGetFolderInfodefaultResponse } from '../models';
// @ts-ignore
import { CampaignFoldersListCampaignFolders200Response } from '../models';
// @ts-ignore
import { CampaignFoldersListCampaignFoldersResponse } from '../models';
// @ts-ignore
import { CampaignFoldersListCampaignFoldersdefaultResponse } from '../models';
// @ts-ignore
import { CampaignFoldersUpdateSpecificFolder200Response } from '../models';
// @ts-ignore
import { CampaignFoldersUpdateSpecificFolderResponse } from '../models';
// @ts-ignore
import { CampaignFoldersUpdateSpecificFolderdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CampaignFoldersApi - axios parameter creator
 * @export
 */
export const CampaignFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new campaign folder.
         * @summary Add campaign folder
         * @param {CampaignFoldersAddNewFolderRequest} campaignFoldersAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder: async (campaignFoldersAddNewFolderRequest: CampaignFoldersAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignFoldersAddNewFolderRequest' is not null or undefined
            assertParamExists('addNewFolder', 'campaignFoldersAddNewFolderRequest', campaignFoldersAddNewFolderRequest)
            const localVarPath = `/campaign-folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignFoldersAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaign-folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignFoldersAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific campaign folder, and mark all the campaigns in the folder as \'unfiled\'.
         * @summary Delete campaign folder
         * @param {string} folderId The unique id for the campaign folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolder', 'folderId', folderId)
            const localVarPath = `/campaign-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaign-folders/{folder_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific folder used to organize campaigns.
         * @summary Get campaign folder
         * @param {string} folderId The unique id for the campaign folder.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderInfo: async (folderId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderInfo', 'folderId', folderId)
            const localVarPath = `/campaign-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaign-folders/{folder_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all folders used to organize campaigns.
         * @summary List campaign folders
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignFolders: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaign-folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaign-folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific folder used to organize campaigns.
         * @summary Update campaign folder
         * @param {string} folderId The unique id for the campaign folder.
         * @param {CampaignFoldersAddNewFolderRequest} campaignFoldersAddNewFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder: async (folderId: string, campaignFoldersAddNewFolderRequest: CampaignFoldersAddNewFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('updateSpecificFolder', 'folderId', folderId)
            // verify required parameter 'campaignFoldersAddNewFolderRequest' is not null or undefined
            assertParamExists('updateSpecificFolder', 'campaignFoldersAddNewFolderRequest', campaignFoldersAddNewFolderRequest)
            const localVarPath = `/campaign-folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: campaignFoldersAddNewFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/campaign-folders/{folder_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(campaignFoldersAddNewFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignFoldersApi - functional programming interface
 * @export
 */
export const CampaignFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new campaign folder.
         * @summary Add campaign folder
         * @param {CampaignFoldersApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewFolder(requestParameters: CampaignFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFoldersAddNewFolderResponse>> {
            const campaignFoldersAddNewFolderRequest: CampaignFoldersAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewFolder(campaignFoldersAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific campaign folder, and mark all the campaigns in the folder as \'unfiled\'.
         * @summary Delete campaign folder
         * @param {CampaignFoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(requestParameters: CampaignFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific folder used to organize campaigns.
         * @summary Get campaign folder
         * @param {CampaignFoldersApiGetFolderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderInfo(requestParameters: CampaignFoldersApiGetFolderInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFoldersGetFolderInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderInfo(requestParameters.folderId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all folders used to organize campaigns.
         * @summary List campaign folders
         * @param {CampaignFoldersApiListCampaignFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignFolders(requestParameters: CampaignFoldersApiListCampaignFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFoldersListCampaignFoldersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignFolders(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific folder used to organize campaigns.
         * @summary Update campaign folder
         * @param {CampaignFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificFolder(requestParameters: CampaignFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFoldersUpdateSpecificFolderResponse>> {
            const campaignFoldersAddNewFolderRequest: CampaignFoldersAddNewFolderRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificFolder(requestParameters.folderId, campaignFoldersAddNewFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignFoldersApi - factory interface
 * @export
 */
export const CampaignFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignFoldersApiFp(configuration)
    return {
        /**
         * Create a new campaign folder.
         * @summary Add campaign folder
         * @param {CampaignFoldersApiAddNewFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFolder(requestParameters: CampaignFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignFoldersAddNewFolderResponse> {
            return localVarFp.addNewFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific campaign folder, and mark all the campaigns in the folder as \'unfiled\'.
         * @summary Delete campaign folder
         * @param {CampaignFoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(requestParameters: CampaignFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific folder used to organize campaigns.
         * @summary Get campaign folder
         * @param {CampaignFoldersApiGetFolderInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderInfo(requestParameters: CampaignFoldersApiGetFolderInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignFoldersGetFolderInfoResponse> {
            return localVarFp.getFolderInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all folders used to organize campaigns.
         * @summary List campaign folders
         * @param {CampaignFoldersApiListCampaignFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignFolders(requestParameters: CampaignFoldersApiListCampaignFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignFoldersListCampaignFoldersResponse> {
            return localVarFp.listCampaignFolders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific folder used to organize campaigns.
         * @summary Update campaign folder
         * @param {CampaignFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificFolder(requestParameters: CampaignFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<CampaignFoldersUpdateSpecificFolderResponse> {
            return localVarFp.updateSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewFolder operation in CampaignFoldersApi.
 * @export
 * @interface CampaignFoldersApiAddNewFolderRequest
 */
export type CampaignFoldersApiAddNewFolderRequest = {
    
} & CampaignFoldersAddNewFolderRequest

/**
 * Request parameters for deleteFolder operation in CampaignFoldersApi.
 * @export
 * @interface CampaignFoldersApiDeleteFolderRequest
 */
export type CampaignFoldersApiDeleteFolderRequest = {
    
    /**
    * The unique id for the campaign folder.
    * @type {string}
    * @memberof CampaignFoldersApiDeleteFolder
    */
    readonly folderId: string
    
}

/**
 * Request parameters for getFolderInfo operation in CampaignFoldersApi.
 * @export
 * @interface CampaignFoldersApiGetFolderInfoRequest
 */
export type CampaignFoldersApiGetFolderInfoRequest = {
    
    /**
    * The unique id for the campaign folder.
    * @type {string}
    * @memberof CampaignFoldersApiGetFolderInfo
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignFoldersApiGetFolderInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignFoldersApiGetFolderInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listCampaignFolders operation in CampaignFoldersApi.
 * @export
 * @interface CampaignFoldersApiListCampaignFoldersRequest
 */
export type CampaignFoldersApiListCampaignFoldersRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignFoldersApiListCampaignFolders
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof CampaignFoldersApiListCampaignFolders
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof CampaignFoldersApiListCampaignFolders
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof CampaignFoldersApiListCampaignFolders
    */
    readonly offset?: number
    
}

/**
 * Request parameters for updateSpecificFolder operation in CampaignFoldersApi.
 * @export
 * @interface CampaignFoldersApiUpdateSpecificFolderRequest
 */
export type CampaignFoldersApiUpdateSpecificFolderRequest = {
    
    /**
    * The unique id for the campaign folder.
    * @type {string}
    * @memberof CampaignFoldersApiUpdateSpecificFolder
    */
    readonly folderId: string
    
} & CampaignFoldersAddNewFolderRequest

/**
 * CampaignFoldersApiGenerated - object-oriented interface
 * @export
 * @class CampaignFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class CampaignFoldersApiGenerated extends BaseAPI {
    /**
     * Create a new campaign folder.
     * @summary Add campaign folder
     * @param {CampaignFoldersApiAddNewFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignFoldersApiGenerated
     */
    public addNewFolder(requestParameters: CampaignFoldersApiAddNewFolderRequest, options?: AxiosRequestConfig) {
        return CampaignFoldersApiFp(this.configuration).addNewFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific campaign folder, and mark all the campaigns in the folder as \'unfiled\'.
     * @summary Delete campaign folder
     * @param {CampaignFoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignFoldersApiGenerated
     */
    public deleteFolder(requestParameters: CampaignFoldersApiDeleteFolderRequest, options?: AxiosRequestConfig) {
        return CampaignFoldersApiFp(this.configuration).deleteFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific folder used to organize campaigns.
     * @summary Get campaign folder
     * @param {CampaignFoldersApiGetFolderInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignFoldersApiGenerated
     */
    public getFolderInfo(requestParameters: CampaignFoldersApiGetFolderInfoRequest, options?: AxiosRequestConfig) {
        return CampaignFoldersApiFp(this.configuration).getFolderInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all folders used to organize campaigns.
     * @summary List campaign folders
     * @param {CampaignFoldersApiListCampaignFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignFoldersApiGenerated
     */
    public listCampaignFolders(requestParameters: CampaignFoldersApiListCampaignFoldersRequest, options?: AxiosRequestConfig) {
        return CampaignFoldersApiFp(this.configuration).listCampaignFolders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific folder used to organize campaigns.
     * @summary Update campaign folder
     * @param {CampaignFoldersApiUpdateSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignFoldersApiGenerated
     */
    public updateSpecificFolder(requestParameters: CampaignFoldersApiUpdateSpecificFolderRequest, options?: AxiosRequestConfig) {
        return CampaignFoldersApiFp(this.configuration).updateSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
