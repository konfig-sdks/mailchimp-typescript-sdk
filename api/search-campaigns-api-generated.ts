/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SearchCampaignsByQueryTerms200Response } from '../models';
// @ts-ignore
import { SearchCampaignsByQueryTermsResponse } from '../models';
// @ts-ignore
import { SearchCampaignsByQueryTermsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchCampaignsApi - axios parameter creator
 * @export
 */
export const SearchCampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search all campaigns for the specified query terms.
         * @summary Search campaigns
         * @param {string} query The search query used to filter results.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byQueryTerms: async (query: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('byQueryTerms', 'query', query)
            const localVarPath = `/search-campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-campaigns',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchCampaignsApi - functional programming interface
 * @export
 */
export const SearchCampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchCampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Search all campaigns for the specified query terms.
         * @summary Search campaigns
         * @param {SearchCampaignsApiByQueryTermsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byQueryTerms(requestParameters: SearchCampaignsApiByQueryTermsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchCampaignsByQueryTermsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byQueryTerms(requestParameters.query, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchCampaignsApi - factory interface
 * @export
 */
export const SearchCampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchCampaignsApiFp(configuration)
    return {
        /**
         * Search all campaigns for the specified query terms.
         * @summary Search campaigns
         * @param {SearchCampaignsApiByQueryTermsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byQueryTerms(requestParameters: SearchCampaignsApiByQueryTermsRequest, options?: AxiosRequestConfig): AxiosPromise<SearchCampaignsByQueryTermsResponse> {
            return localVarFp.byQueryTerms(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byQueryTerms operation in SearchCampaignsApi.
 * @export
 * @interface SearchCampaignsApiByQueryTermsRequest
 */
export type SearchCampaignsApiByQueryTermsRequest = {
    
    /**
    * The search query used to filter results.
    * @type {string}
    * @memberof SearchCampaignsApiByQueryTerms
    */
    readonly query: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof SearchCampaignsApiByQueryTerms
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof SearchCampaignsApiByQueryTerms
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * SearchCampaignsApiGenerated - object-oriented interface
 * @export
 * @class SearchCampaignsApiGenerated
 * @extends {BaseAPI}
 */
export class SearchCampaignsApiGenerated extends BaseAPI {
    /**
     * Search all campaigns for the specified query terms.
     * @summary Search campaigns
     * @param {SearchCampaignsApiByQueryTermsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchCampaignsApiGenerated
     */
    public byQueryTerms(requestParameters: SearchCampaignsApiByQueryTermsRequest, options?: AxiosRequestConfig) {
        return SearchCampaignsApiFp(this.configuration).byQueryTerms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
