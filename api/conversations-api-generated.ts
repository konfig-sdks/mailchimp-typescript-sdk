/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConversationsGetAllConversations200Response } from '../models';
// @ts-ignore
import { ConversationsGetAllConversationsResponse } from '../models';
// @ts-ignore
import { ConversationsGetAllConversationsdefaultResponse } from '../models';
// @ts-ignore
import { ConversationsGetById200Response } from '../models';
// @ts-ignore
import { ConversationsGetByIdResponse } from '../models';
// @ts-ignore
import { ConversationsGetByIddefaultResponse } from '../models';
// @ts-ignore
import { ConversationsGetMessageById200Response } from '../models';
// @ts-ignore
import { ConversationsGetMessageByIdResponse } from '../models';
// @ts-ignore
import { ConversationsGetMessageByIddefaultResponse } from '../models';
// @ts-ignore
import { ConversationsListMessagesFromConversation200Response } from '../models';
// @ts-ignore
import { ConversationsListMessagesFromConversationResponse } from '../models';
// @ts-ignore
import { ConversationsListMessagesFromConversationdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export const ConversationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List conversations
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'true' | 'false'} [hasUnreadMessages] Whether the conversation has any unread messages.
         * @param {string} [listId] The unique id for the list.
         * @param {string} [campaignId] The unique id for the campaign.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllConversations: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, hasUnreadMessages?: 'true' | 'false', listId?: string, campaignId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (hasUnreadMessages !== undefined) {
                localVarQueryParameter['has_unread_messages'] = hasUnreadMessages;
            }

            if (listId !== undefined) {
                localVarQueryParameter['list_id'] = listId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = campaignId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get conversation
         * @param {string} conversationId The unique id for the conversation.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getById: async (conversationId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getById', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId !== undefined ? conversationId : `-conversation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/{conversation_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get message
         * @param {string} conversationId The unique id for the conversation.
         * @param {string} messageId The unique id for the conversation message.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getMessageById: async (conversationId: string, messageId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getMessageById', 'conversationId', conversationId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageById', 'messageId', messageId)
            const localVarPath = `/conversations/{conversation_id}/messages/{message_id}`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId !== undefined ? conversationId : `-conversation_id-`)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId !== undefined ? messageId : `-message_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/{conversation_id}/messages/{message_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List messages
         * @param {string} conversationId The unique id for the conversation.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {'true' | 'false'} [isRead] Whether a conversation message has been marked as read.
         * @param {string} [beforeTimestamp] Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceTimestamp] Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listMessagesFromConversation: async (conversationId: string, fields?: Array<string>, excludeFields?: Array<string>, isRead?: 'true' | 'false', beforeTimestamp?: string, sinceTimestamp?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('listMessagesFromConversation', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/messages`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId !== undefined ? conversationId : `-conversation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (isRead !== undefined) {
                localVarQueryParameter['is_read'] = isRead;
            }

            if (beforeTimestamp !== undefined) {
                localVarQueryParameter['before_timestamp'] = (beforeTimestamp as any instanceof Date) ?
                    (beforeTimestamp as any).toISOString() :
                    beforeTimestamp;
            }

            if (sinceTimestamp !== undefined) {
                localVarQueryParameter['since_timestamp'] = (sinceTimestamp as any instanceof Date) ?
                    (sinceTimestamp as any).toISOString() :
                    sinceTimestamp;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conversations/{conversation_id}/messages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationsApi - functional programming interface
 * @export
 */
export const ConversationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List conversations
         * @param {ConversationsApiGetAllConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getAllConversations(requestParameters: ConversationsApiGetAllConversationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsGetAllConversationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConversations(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.hasUnreadMessages, requestParameters.listId, requestParameters.campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get conversation
         * @param {ConversationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getById(requestParameters: ConversationsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.conversationId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get message
         * @param {ConversationsApiGetMessageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getMessageById(requestParameters: ConversationsApiGetMessageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsGetMessageByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageById(requestParameters.conversationId, requestParameters.messageId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List messages
         * @param {ConversationsApiListMessagesFromConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listMessagesFromConversation(requestParameters: ConversationsApiListMessagesFromConversationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationsListMessagesFromConversationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessagesFromConversation(requestParameters.conversationId, requestParameters.fields, requestParameters.excludeFields, requestParameters.isRead, requestParameters.beforeTimestamp, requestParameters.sinceTimestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConversationsApi - factory interface
 * @export
 */
export const ConversationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationsApiFp(configuration)
    return {
        /**
         * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List conversations
         * @param {ConversationsApiGetAllConversationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllConversations(requestParameters: ConversationsApiGetAllConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsGetAllConversationsResponse> {
            return localVarFp.getAllConversations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get conversation
         * @param {ConversationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getById(requestParameters: ConversationsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary Get message
         * @param {ConversationsApiGetMessageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getMessageById(requestParameters: ConversationsApiGetMessageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsGetMessageByIdResponse> {
            return localVarFp.getMessageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
         * @summary List messages
         * @param {ConversationsApiListMessagesFromConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listMessagesFromConversation(requestParameters: ConversationsApiListMessagesFromConversationRequest, options?: AxiosRequestConfig): AxiosPromise<ConversationsListMessagesFromConversationResponse> {
            return localVarFp.listMessagesFromConversation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllConversations operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetAllConversationsRequest
 */
export type ConversationsApiGetAllConversationsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly offset?: number
    
    /**
    * Whether the conversation has any unread messages.
    * @type {'true' | 'false'}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly hasUnreadMessages?: 'true' | 'false'
    
    /**
    * The unique id for the list.
    * @type {string}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly listId?: string
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ConversationsApiGetAllConversations
    */
    readonly campaignId?: string
    
}

/**
 * Request parameters for getById operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetByIdRequest
 */
export type ConversationsApiGetByIdRequest = {
    
    /**
    * The unique id for the conversation.
    * @type {string}
    * @memberof ConversationsApiGetById
    */
    readonly conversationId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetById
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetById
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getMessageById operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetMessageByIdRequest
 */
export type ConversationsApiGetMessageByIdRequest = {
    
    /**
    * The unique id for the conversation.
    * @type {string}
    * @memberof ConversationsApiGetMessageById
    */
    readonly conversationId: string
    
    /**
    * The unique id for the conversation message.
    * @type {string}
    * @memberof ConversationsApiGetMessageById
    */
    readonly messageId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetMessageById
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiGetMessageById
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listMessagesFromConversation operation in ConversationsApi.
 * @export
 * @interface ConversationsApiListMessagesFromConversationRequest
 */
export type ConversationsApiListMessagesFromConversationRequest = {
    
    /**
    * The unique id for the conversation.
    * @type {string}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly conversationId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly excludeFields?: Array<string>
    
    /**
    * Whether a conversation message has been marked as read.
    * @type {'true' | 'false'}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly isRead?: 'true' | 'false'
    
    /**
    * Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly beforeTimestamp?: string
    
    /**
    * Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ConversationsApiListMessagesFromConversation
    */
    readonly sinceTimestamp?: string
    
}

/**
 * ConversationsApiGenerated - object-oriented interface
 * @export
 * @class ConversationsApiGenerated
 * @extends {BaseAPI}
 */
export class ConversationsApiGenerated extends BaseAPI {
    /**
     * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @summary List conversations
     * @param {ConversationsApiGetAllConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ConversationsApiGenerated
     */
    public getAllConversations(requestParameters: ConversationsApiGetAllConversationsRequest, options?: AxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getAllConversations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @summary Get conversation
     * @param {ConversationsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ConversationsApiGenerated
     */
    public getById(requestParameters: ConversationsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @summary Get message
     * @param {ConversationsApiGetMessageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ConversationsApiGenerated
     */
    public getMessageById(requestParameters: ConversationsApiGetMessageByIdRequest, options?: AxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getMessageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don\'t include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.
     * @summary List messages
     * @param {ConversationsApiListMessagesFromConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ConversationsApiGenerated
     */
    public listMessagesFromConversation(requestParameters: ConversationsApiListMessagesFromConversationRequest, options?: AxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).listMessagesFromConversation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
