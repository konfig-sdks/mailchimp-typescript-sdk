/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportsCampaignRecipientInfo200Response } from '../models';
// @ts-ignore
import { ReportsCampaignRecipientInfoResponse } from '../models';
// @ts-ignore
import { ReportsCampaignRecipientInfodefaultResponse } from '../models';
// @ts-ignore
import { ReportsGetAbuseReport200Response } from '../models';
// @ts-ignore
import { ReportsGetAbuseReportResponse } from '../models';
// @ts-ignore
import { ReportsGetAbuseReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportsGetCampaignClickDetails200Response } from '../models';
// @ts-ignore
import { ReportsGetCampaignClickDetailsResponse } from '../models';
// @ts-ignore
import { ReportsGetCampaignClickDetailsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsGetCampaignProductActivity200Response } from '../models';
// @ts-ignore
import { ReportsGetCampaignProductActivityResponse } from '../models';
// @ts-ignore
import { ReportsGetCampaignProductActivitydefaultResponse } from '../models';
// @ts-ignore
import { ReportsGetSubscriberActivity200Response } from '../models';
// @ts-ignore
import { ReportsGetSubscriberActivityResponse } from '../models';
// @ts-ignore
import { ReportsGetSubscriberActivitydefaultResponse } from '../models';
// @ts-ignore
import { ReportsGetUnsubscribedMemberInfo200Response } from '../models';
// @ts-ignore
import { ReportsGetUnsubscribedMemberInfoResponse } from '../models';
// @ts-ignore
import { ReportsGetUnsubscribedMemberInfodefaultResponse } from '../models';
// @ts-ignore
import { ReportsListAbuseReports200Response } from '../models';
// @ts-ignore
import { ReportsListAbuseReportsResponse } from '../models';
// @ts-ignore
import { ReportsListAbuseReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignFeedback200Response } from '../models';
// @ts-ignore
import { ReportsListCampaignFeedbackResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignFeedbackdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignOpenDetails200Response } from '../models';
// @ts-ignore
import { ReportsListCampaignOpenDetailsResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignOpenDetailsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignRecipients200Response } from '../models';
// @ts-ignore
import { ReportsListCampaignRecipientsResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignRecipientsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignReports200Response } from '../models';
// @ts-ignore
import { ReportsListCampaignReportsResponse } from '../models';
// @ts-ignore
import { ReportsListCampaignReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListChildCampaignReports200Response } from '../models';
// @ts-ignore
import { ReportsListChildCampaignReportsResponse } from '../models';
// @ts-ignore
import { ReportsListChildCampaignReportsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListClickedLinkSubscribers200Response } from '../models';
// @ts-ignore
import { ReportsListClickedLinkSubscribersResponse } from '../models';
// @ts-ignore
import { ReportsListClickedLinkSubscribersdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListDomainPerformanceStats200Response } from '../models';
// @ts-ignore
import { ReportsListDomainPerformanceStatsResponse } from '../models';
// @ts-ignore
import { ReportsListDomainPerformanceStatsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListEepurlActivity200Response } from '../models';
// @ts-ignore
import { ReportsListEepurlActivityResponse } from '../models';
// @ts-ignore
import { ReportsListEepurlActivitydefaultResponse } from '../models';
// @ts-ignore
import { ReportsListEmailActivity200Response } from '../models';
// @ts-ignore
import { ReportsListEmailActivityResponse } from '../models';
// @ts-ignore
import { ReportsListEmailActivitydefaultResponse } from '../models';
// @ts-ignore
import { ReportsListTopOpenLocations200Response } from '../models';
// @ts-ignore
import { ReportsListTopOpenLocationsResponse } from '../models';
// @ts-ignore
import { ReportsListTopOpenLocationsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsListUnsubscribedMembers200Response } from '../models';
// @ts-ignore
import { ReportsListUnsubscribedMembersResponse } from '../models';
// @ts-ignore
import { ReportsListUnsubscribedMembersdefaultResponse } from '../models';
// @ts-ignore
import { ReportsOpenSubscriberDetails200Response } from '../models';
// @ts-ignore
import { ReportsOpenSubscriberDetailsResponse } from '../models';
// @ts-ignore
import { ReportsOpenSubscriberDetailsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsSpecificCampaignReport200Response } from '../models';
// @ts-ignore
import { ReportsSpecificCampaignReportResponse } from '../models';
// @ts-ignore
import { ReportsSpecificCampaignReportdefaultResponse } from '../models';
// @ts-ignore
import { ReportsSpecificLinkDetails200Response } from '../models';
// @ts-ignore
import { ReportsSpecificLinkDetailsResponse } from '../models';
// @ts-ignore
import { ReportsSpecificLinkDetailsdefaultResponse } from '../models';
// @ts-ignore
import { ReportsSpecificLinkSubscriber200Response } from '../models';
// @ts-ignore
import { ReportsSpecificLinkSubscriberResponse } from '../models';
// @ts-ignore
import { ReportsSpecificLinkSubscriberdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about a specific campaign recipient.
         * @summary Get campaign recipient info
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignRecipientInfo: async (campaignId: string, subscriberHash: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('campaignRecipientInfo', 'campaignId', campaignId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('campaignRecipientInfo', 'subscriberHash', subscriberHash)
            const localVarPath = `/reports/{campaign_id}/sent-to/{subscriber_hash}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/sent-to/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific abuse report for a campaign.
         * @summary Get abuse report
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} reportId The id for the abuse report.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbuseReport: async (campaignId: string, reportId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getAbuseReport', 'campaignId', campaignId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getAbuseReport', 'reportId', reportId)
            const localVarPath = `/reports/{campaign_id}/abuse-reports/{report_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-report_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/abuse-reports/{report_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about clicks on specific links in your Mailchimp campaigns.
         * @summary List campaign details
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'total_clicks' | 'unique_clicks'} [sortField] Returns click reports sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignClickDetails: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, sortField?: 'total_clicks' | 'unique_clicks', sortDir?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignClickDetails', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/click-details`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/click-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get breakdown of product activity for a campaign
         * @summary List campaign product activity
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'title' | 'total_revenue' | 'total_purchased'} [sortField] Returns files sorted by the specified field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProductActivity: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, sortField?: 'title' | 'total_revenue' | 'total_purchased', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignProductActivity', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/ecommerce-product-activity`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/ecommerce-product-activity',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific list member\'s activity in a campaign including opens, clicks, and bounces.
         * @summary Get subscriber email activity
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {string} [since] Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriberActivity: async (campaignId: string, subscriberHash: string, fields?: Array<string>, excludeFields?: Array<string>, since?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getSubscriberActivity', 'campaignId', campaignId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('getSubscriberActivity', 'subscriberHash', subscriberHash)
            const localVarPath = `/reports/{campaign_id}/email-activity/{subscriber_hash}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/email-activity/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific list member who unsubscribed from a campaign.
         * @summary Get unsubscribed member
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnsubscribedMemberInfo: async (campaignId: string, subscriberHash: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getUnsubscribedMemberInfo', 'campaignId', campaignId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('getUnsubscribedMemberInfo', 'subscriberHash', subscriberHash)
            const localVarPath = `/reports/{campaign_id}/unsubscribed/{subscriber_hash}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/unsubscribed/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of abuse complaints for a specific campaign.
         * @summary List abuse reports
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbuseReports: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listAbuseReports', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/abuse-reports`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/abuse-reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feedback based on a campaign\'s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
         * @summary List campaign feedback
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignFeedback: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listCampaignFeedback', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/advice`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/advice',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about any campaign emails that were opened by a list member.
         * @summary List campaign open details
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [since] Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {'opens_count'} [sortField] Returns open reports sorted by the specified field.
         * @param {'ASC' | 'DESC'} [sortDir] Determines the order direction for sorted results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignOpenDetails: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, since?: string, sortField?: 'opens_count', sortDir?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listCampaignOpenDetails', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/open-details`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/open-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about campaign recipients.
         * @summary List campaign recipients
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignRecipients: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listCampaignRecipients', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/sent-to`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/sent-to',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get campaign reports.
         * @summary List campaign reports
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'} [type] The campaign type.
         * @param {string} [beforeSendTime] Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {string} [sinceSendTime] Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignReports: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate', beforeSendTime?: string, sinceSendTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (beforeSendTime !== undefined) {
                localVarQueryParameter['before_send_time'] = (beforeSendTime as any instanceof Date) ?
                    (beforeSendTime as any).toISOString() :
                    beforeSendTime;
            }

            if (sinceSendTime !== undefined) {
                localVarQueryParameter['since_send_time'] = (sinceSendTime as any instanceof Date) ?
                    (sinceSendTime as any).toISOString() :
                    sinceSendTime;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of reports with child campaigns for a specific parent campaign.
         * @summary List child campaign reports
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChildCampaignReports: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listChildCampaignReports', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/sub-reports`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/sub-reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about list members who clicked on a specific link in a campaign.
         * @summary List clicked link subscribers
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} linkId The id for the link.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClickedLinkSubscribers: async (campaignId: string, linkId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listClickedLinkSubscribers', 'campaignId', campaignId)
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('listClickedLinkSubscribers', 'linkId', linkId)
            const localVarPath = `/reports/{campaign_id}/click-details/{link_id}/members`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/click-details/{link_id}/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get statistics for the top-performing email domains in a campaign.
         * @summary List domain performance stats
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainPerformanceStats: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listDomainPerformanceStats', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/domain-performance`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/domain-performance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of social activity for the campaign, tracked by EepURL.
         * @summary List EepURL activity
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEepurlActivity: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listEepurlActivity', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/eepurl`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/eepurl',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of member\'s subscriber activity in a specific campaign.
         * @summary List email activity
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {string} [since] Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailActivity: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, since?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listEmailActivity', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/email-activity`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/email-activity',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get top open locations for a specific campaign.
         * @summary List top open activities
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTopOpenLocations: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listTopOpenLocations', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/locations`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about members who have unsubscribed from a specific campaign.
         * @summary List unsubscribed members
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribedMembers: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listUnsubscribedMembers', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}/unsubscribed`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/unsubscribed',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific subscriber who opened a campaign.
         * @summary Get opened campaign subscriber
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openSubscriberDetails: async (campaignId: string, subscriberHash: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('openSubscriberDetails', 'campaignId', campaignId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('openSubscriberDetails', 'subscriberHash', subscriberHash)
            const localVarPath = `/reports/{campaign_id}/open-details/{subscriber_hash}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/open-details/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get report details for a specific sent campaign.
         * @summary Get campaign report
         * @param {string} campaignId The unique id for the campaign.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificCampaignReport: async (campaignId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('specificCampaignReport', 'campaignId', campaignId)
            const localVarPath = `/reports/{campaign_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get click details for a specific link in a campaign.
         * @summary Get campaign link details
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} linkId The id for the link.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificLinkDetails: async (campaignId: string, linkId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('specificLinkDetails', 'campaignId', campaignId)
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('specificLinkDetails', 'linkId', linkId)
            const localVarPath = `/reports/{campaign_id}/click-details/{link_id}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/click-details/{link_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific subscriber who clicked a link in a specific campaign.
         * @summary Get clicked link subscriber
         * @param {string} campaignId The unique id for the campaign.
         * @param {string} linkId The id for the link.
         * @param {string} subscriberHash The MD5 hash of the lowercase version of the list member\&#39;s email address.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificLinkSubscriber: async (campaignId: string, linkId: string, subscriberHash: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('specificLinkSubscriber', 'campaignId', campaignId)
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('specificLinkSubscriber', 'linkId', linkId)
            // verify required parameter 'subscriberHash' is not null or undefined
            assertParamExists('specificLinkSubscriber', 'subscriberHash', subscriberHash)
            const localVarPath = `/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}`
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId !== undefined ? campaignId : `-campaign_id-`)))
                .replace(`{${"link_id"}}`, encodeURIComponent(String(linkId !== undefined ? linkId : `-link_id-`)))
                .replace(`{${"subscriber_hash"}}`, encodeURIComponent(String(subscriberHash !== undefined ? subscriberHash : `-subscriber_hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about a specific campaign recipient.
         * @summary Get campaign recipient info
         * @param {ReportsApiCampaignRecipientInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignRecipientInfo(requestParameters: ReportsApiCampaignRecipientInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsCampaignRecipientInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignRecipientInfo(requestParameters.campaignId, requestParameters.subscriberHash, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific abuse report for a campaign.
         * @summary Get abuse report
         * @param {ReportsApiGetAbuseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbuseReport(requestParameters: ReportsApiGetAbuseReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetAbuseReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbuseReport(requestParameters.campaignId, requestParameters.reportId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about clicks on specific links in your Mailchimp campaigns.
         * @summary List campaign details
         * @param {ReportsApiGetCampaignClickDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignClickDetails(requestParameters: ReportsApiGetCampaignClickDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetCampaignClickDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignClickDetails(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.sortField, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get breakdown of product activity for a campaign
         * @summary List campaign product activity
         * @param {ReportsApiGetCampaignProductActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignProductActivity(requestParameters: ReportsApiGetCampaignProductActivityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetCampaignProductActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignProductActivity(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.sortField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific list member\'s activity in a campaign including opens, clicks, and bounces.
         * @summary Get subscriber email activity
         * @param {ReportsApiGetSubscriberActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriberActivity(requestParameters: ReportsApiGetSubscriberActivityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetSubscriberActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriberActivity(requestParameters.campaignId, requestParameters.subscriberHash, requestParameters.fields, requestParameters.excludeFields, requestParameters.since, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific list member who unsubscribed from a campaign.
         * @summary Get unsubscribed member
         * @param {ReportsApiGetUnsubscribedMemberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnsubscribedMemberInfo(requestParameters: ReportsApiGetUnsubscribedMemberInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetUnsubscribedMemberInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnsubscribedMemberInfo(requestParameters.campaignId, requestParameters.subscriberHash, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of abuse complaints for a specific campaign.
         * @summary List abuse reports
         * @param {ReportsApiListAbuseReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAbuseReports(requestParameters: ReportsApiListAbuseReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListAbuseReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAbuseReports(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get feedback based on a campaign\'s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
         * @summary List campaign feedback
         * @param {ReportsApiListCampaignFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignFeedback(requestParameters: ReportsApiListCampaignFeedbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListCampaignFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignFeedback(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed information about any campaign emails that were opened by a list member.
         * @summary List campaign open details
         * @param {ReportsApiListCampaignOpenDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignOpenDetails(requestParameters: ReportsApiListCampaignOpenDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListCampaignOpenDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignOpenDetails(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.since, requestParameters.sortField, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about campaign recipients.
         * @summary List campaign recipients
         * @param {ReportsApiListCampaignRecipientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignRecipients(requestParameters: ReportsApiListCampaignRecipientsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListCampaignRecipientsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignRecipients(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get campaign reports.
         * @summary List campaign reports
         * @param {ReportsApiListCampaignReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignReports(requestParameters: ReportsApiListCampaignReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListCampaignReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignReports(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.type, requestParameters.beforeSendTime, requestParameters.sinceSendTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of reports with child campaigns for a specific parent campaign.
         * @summary List child campaign reports
         * @param {ReportsApiListChildCampaignReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChildCampaignReports(requestParameters: ReportsApiListChildCampaignReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListChildCampaignReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChildCampaignReports(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about list members who clicked on a specific link in a campaign.
         * @summary List clicked link subscribers
         * @param {ReportsApiListClickedLinkSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClickedLinkSubscribers(requestParameters: ReportsApiListClickedLinkSubscribersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListClickedLinkSubscribersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClickedLinkSubscribers(requestParameters.campaignId, requestParameters.linkId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get statistics for the top-performing email domains in a campaign.
         * @summary List domain performance stats
         * @param {ReportsApiListDomainPerformanceStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDomainPerformanceStats(requestParameters: ReportsApiListDomainPerformanceStatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListDomainPerformanceStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDomainPerformanceStats(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a summary of social activity for the campaign, tracked by EepURL.
         * @summary List EepURL activity
         * @param {ReportsApiListEepurlActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEepurlActivity(requestParameters: ReportsApiListEepurlActivityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListEepurlActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEepurlActivity(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of member\'s subscriber activity in a specific campaign.
         * @summary List email activity
         * @param {ReportsApiListEmailActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmailActivity(requestParameters: ReportsApiListEmailActivityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListEmailActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmailActivity(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, requestParameters.since, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get top open locations for a specific campaign.
         * @summary List top open activities
         * @param {ReportsApiListTopOpenLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTopOpenLocations(requestParameters: ReportsApiListTopOpenLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListTopOpenLocationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTopOpenLocations(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about members who have unsubscribed from a specific campaign.
         * @summary List unsubscribed members
         * @param {ReportsApiListUnsubscribedMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUnsubscribedMembers(requestParameters: ReportsApiListUnsubscribedMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListUnsubscribedMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUnsubscribedMembers(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific subscriber who opened a campaign.
         * @summary Get opened campaign subscriber
         * @param {ReportsApiOpenSubscriberDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openSubscriberDetails(requestParameters: ReportsApiOpenSubscriberDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsOpenSubscriberDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openSubscriberDetails(requestParameters.campaignId, requestParameters.subscriberHash, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get report details for a specific sent campaign.
         * @summary Get campaign report
         * @param {ReportsApiSpecificCampaignReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificCampaignReport(requestParameters: ReportsApiSpecificCampaignReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsSpecificCampaignReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificCampaignReport(requestParameters.campaignId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get click details for a specific link in a campaign.
         * @summary Get campaign link details
         * @param {ReportsApiSpecificLinkDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificLinkDetails(requestParameters: ReportsApiSpecificLinkDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsSpecificLinkDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificLinkDetails(requestParameters.campaignId, requestParameters.linkId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific subscriber who clicked a link in a specific campaign.
         * @summary Get clicked link subscriber
         * @param {ReportsApiSpecificLinkSubscriberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificLinkSubscriber(requestParameters: ReportsApiSpecificLinkSubscriberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsSpecificLinkSubscriberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificLinkSubscriber(requestParameters.campaignId, requestParameters.linkId, requestParameters.subscriberHash, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Get information about a specific campaign recipient.
         * @summary Get campaign recipient info
         * @param {ReportsApiCampaignRecipientInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignRecipientInfo(requestParameters: ReportsApiCampaignRecipientInfoRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsCampaignRecipientInfoResponse> {
            return localVarFp.campaignRecipientInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific abuse report for a campaign.
         * @summary Get abuse report
         * @param {ReportsApiGetAbuseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbuseReport(requestParameters: ReportsApiGetAbuseReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetAbuseReportResponse> {
            return localVarFp.getAbuseReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about clicks on specific links in your Mailchimp campaigns.
         * @summary List campaign details
         * @param {ReportsApiGetCampaignClickDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignClickDetails(requestParameters: ReportsApiGetCampaignClickDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetCampaignClickDetailsResponse> {
            return localVarFp.getCampaignClickDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get breakdown of product activity for a campaign
         * @summary List campaign product activity
         * @param {ReportsApiGetCampaignProductActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignProductActivity(requestParameters: ReportsApiGetCampaignProductActivityRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetCampaignProductActivityResponse> {
            return localVarFp.getCampaignProductActivity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific list member\'s activity in a campaign including opens, clicks, and bounces.
         * @summary Get subscriber email activity
         * @param {ReportsApiGetSubscriberActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriberActivity(requestParameters: ReportsApiGetSubscriberActivityRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetSubscriberActivityResponse> {
            return localVarFp.getSubscriberActivity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific list member who unsubscribed from a campaign.
         * @summary Get unsubscribed member
         * @param {ReportsApiGetUnsubscribedMemberInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnsubscribedMemberInfo(requestParameters: ReportsApiGetUnsubscribedMemberInfoRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetUnsubscribedMemberInfoResponse> {
            return localVarFp.getUnsubscribedMemberInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of abuse complaints for a specific campaign.
         * @summary List abuse reports
         * @param {ReportsApiListAbuseReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbuseReports(requestParameters: ReportsApiListAbuseReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListAbuseReportsResponse> {
            return localVarFp.listAbuseReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feedback based on a campaign\'s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
         * @summary List campaign feedback
         * @param {ReportsApiListCampaignFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignFeedback(requestParameters: ReportsApiListCampaignFeedbackRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListCampaignFeedbackResponse> {
            return localVarFp.listCampaignFeedback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about any campaign emails that were opened by a list member.
         * @summary List campaign open details
         * @param {ReportsApiListCampaignOpenDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignOpenDetails(requestParameters: ReportsApiListCampaignOpenDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListCampaignOpenDetailsResponse> {
            return localVarFp.listCampaignOpenDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about campaign recipients.
         * @summary List campaign recipients
         * @param {ReportsApiListCampaignRecipientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignRecipients(requestParameters: ReportsApiListCampaignRecipientsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListCampaignRecipientsResponse> {
            return localVarFp.listCampaignRecipients(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get campaign reports.
         * @summary List campaign reports
         * @param {ReportsApiListCampaignReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignReports(requestParameters: ReportsApiListCampaignReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListCampaignReportsResponse> {
            return localVarFp.listCampaignReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of reports with child campaigns for a specific parent campaign.
         * @summary List child campaign reports
         * @param {ReportsApiListChildCampaignReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChildCampaignReports(requestParameters: ReportsApiListChildCampaignReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListChildCampaignReportsResponse> {
            return localVarFp.listChildCampaignReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about list members who clicked on a specific link in a campaign.
         * @summary List clicked link subscribers
         * @param {ReportsApiListClickedLinkSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClickedLinkSubscribers(requestParameters: ReportsApiListClickedLinkSubscribersRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListClickedLinkSubscribersResponse> {
            return localVarFp.listClickedLinkSubscribers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get statistics for the top-performing email domains in a campaign.
         * @summary List domain performance stats
         * @param {ReportsApiListDomainPerformanceStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainPerformanceStats(requestParameters: ReportsApiListDomainPerformanceStatsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListDomainPerformanceStatsResponse> {
            return localVarFp.listDomainPerformanceStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of social activity for the campaign, tracked by EepURL.
         * @summary List EepURL activity
         * @param {ReportsApiListEepurlActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEepurlActivity(requestParameters: ReportsApiListEepurlActivityRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListEepurlActivityResponse> {
            return localVarFp.listEepurlActivity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of member\'s subscriber activity in a specific campaign.
         * @summary List email activity
         * @param {ReportsApiListEmailActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailActivity(requestParameters: ReportsApiListEmailActivityRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListEmailActivityResponse> {
            return localVarFp.listEmailActivity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get top open locations for a specific campaign.
         * @summary List top open activities
         * @param {ReportsApiListTopOpenLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTopOpenLocations(requestParameters: ReportsApiListTopOpenLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListTopOpenLocationsResponse> {
            return localVarFp.listTopOpenLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about members who have unsubscribed from a specific campaign.
         * @summary List unsubscribed members
         * @param {ReportsApiListUnsubscribedMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribedMembers(requestParameters: ReportsApiListUnsubscribedMembersRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListUnsubscribedMembersResponse> {
            return localVarFp.listUnsubscribedMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific subscriber who opened a campaign.
         * @summary Get opened campaign subscriber
         * @param {ReportsApiOpenSubscriberDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openSubscriberDetails(requestParameters: ReportsApiOpenSubscriberDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsOpenSubscriberDetailsResponse> {
            return localVarFp.openSubscriberDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get report details for a specific sent campaign.
         * @summary Get campaign report
         * @param {ReportsApiSpecificCampaignReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificCampaignReport(requestParameters: ReportsApiSpecificCampaignReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsSpecificCampaignReportResponse> {
            return localVarFp.specificCampaignReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get click details for a specific link in a campaign.
         * @summary Get campaign link details
         * @param {ReportsApiSpecificLinkDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificLinkDetails(requestParameters: ReportsApiSpecificLinkDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsSpecificLinkDetailsResponse> {
            return localVarFp.specificLinkDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific subscriber who clicked a link in a specific campaign.
         * @summary Get clicked link subscriber
         * @param {ReportsApiSpecificLinkSubscriberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificLinkSubscriber(requestParameters: ReportsApiSpecificLinkSubscriberRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsSpecificLinkSubscriberResponse> {
            return localVarFp.specificLinkSubscriber(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for campaignRecipientInfo operation in ReportsApi.
 * @export
 * @interface ReportsApiCampaignRecipientInfoRequest
 */
export type ReportsApiCampaignRecipientInfoRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiCampaignRecipientInfo
    */
    readonly campaignId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof ReportsApiCampaignRecipientInfo
    */
    readonly subscriberHash: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiCampaignRecipientInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiCampaignRecipientInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getAbuseReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetAbuseReportRequest
 */
export type ReportsApiGetAbuseReportRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiGetAbuseReport
    */
    readonly campaignId: string
    
    /**
    * The id for the abuse report.
    * @type {string}
    * @memberof ReportsApiGetAbuseReport
    */
    readonly reportId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetAbuseReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetAbuseReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for getCampaignClickDetails operation in ReportsApi.
 * @export
 * @interface ReportsApiGetCampaignClickDetailsRequest
 */
export type ReportsApiGetCampaignClickDetailsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly offset?: number
    
    /**
    * Returns click reports sorted by the specified field.
    * @type {'total_clicks' | 'unique_clicks'}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly sortField?: 'total_clicks' | 'unique_clicks'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof ReportsApiGetCampaignClickDetails
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for getCampaignProductActivity operation in ReportsApi.
 * @export
 * @interface ReportsApiGetCampaignProductActivityRequest
 */
export type ReportsApiGetCampaignProductActivityRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly offset?: number
    
    /**
    * Returns files sorted by the specified field.
    * @type {'title' | 'total_revenue' | 'total_purchased'}
    * @memberof ReportsApiGetCampaignProductActivity
    */
    readonly sortField?: 'title' | 'total_revenue' | 'total_purchased'
    
}

/**
 * Request parameters for getSubscriberActivity operation in ReportsApi.
 * @export
 * @interface ReportsApiGetSubscriberActivityRequest
 */
export type ReportsApiGetSubscriberActivityRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiGetSubscriberActivity
    */
    readonly campaignId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof ReportsApiGetSubscriberActivity
    */
    readonly subscriberHash: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetSubscriberActivity
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetSubscriberActivity
    */
    readonly excludeFields?: Array<string>
    
    /**
    * Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ReportsApiGetSubscriberActivity
    */
    readonly since?: string
    
}

/**
 * Request parameters for getUnsubscribedMemberInfo operation in ReportsApi.
 * @export
 * @interface ReportsApiGetUnsubscribedMemberInfoRequest
 */
export type ReportsApiGetUnsubscribedMemberInfoRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiGetUnsubscribedMemberInfo
    */
    readonly campaignId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof ReportsApiGetUnsubscribedMemberInfo
    */
    readonly subscriberHash: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetUnsubscribedMemberInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiGetUnsubscribedMemberInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listAbuseReports operation in ReportsApi.
 * @export
 * @interface ReportsApiListAbuseReportsRequest
 */
export type ReportsApiListAbuseReportsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListAbuseReports
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListAbuseReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListAbuseReports
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listCampaignFeedback operation in ReportsApi.
 * @export
 * @interface ReportsApiListCampaignFeedbackRequest
 */
export type ReportsApiListCampaignFeedbackRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListCampaignFeedback
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignFeedback
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignFeedback
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listCampaignOpenDetails operation in ReportsApi.
 * @export
 * @interface ReportsApiListCampaignOpenDetailsRequest
 */
export type ReportsApiListCampaignOpenDetailsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly offset?: number
    
    /**
    * Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly since?: string
    
    /**
    * Returns open reports sorted by the specified field.
    * @type {'opens_count'}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly sortField?: 'opens_count'
    
    /**
    * Determines the order direction for sorted results.
    * @type {'ASC' | 'DESC'}
    * @memberof ReportsApiListCampaignOpenDetails
    */
    readonly sortDir?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for listCampaignRecipients operation in ReportsApi.
 * @export
 * @interface ReportsApiListCampaignRecipientsRequest
 */
export type ReportsApiListCampaignRecipientsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListCampaignRecipients
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignRecipients
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignRecipients
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListCampaignRecipients
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListCampaignRecipients
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listCampaignReports operation in ReportsApi.
 * @export
 * @interface ReportsApiListCampaignReportsRequest
 */
export type ReportsApiListCampaignReportsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListCampaignReports
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListCampaignReports
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListCampaignReports
    */
    readonly offset?: number
    
    /**
    * The campaign type.
    * @type {'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'}
    * @memberof ReportsApiListCampaignReports
    */
    readonly type?: 'regular' | 'plaintext' | 'absplit' | 'rss' | 'variate'
    
    /**
    * Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ReportsApiListCampaignReports
    */
    readonly beforeSendTime?: string
    
    /**
    * Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ReportsApiListCampaignReports
    */
    readonly sinceSendTime?: string
    
}

/**
 * Request parameters for listChildCampaignReports operation in ReportsApi.
 * @export
 * @interface ReportsApiListChildCampaignReportsRequest
 */
export type ReportsApiListChildCampaignReportsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListChildCampaignReports
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListChildCampaignReports
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListChildCampaignReports
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listClickedLinkSubscribers operation in ReportsApi.
 * @export
 * @interface ReportsApiListClickedLinkSubscribersRequest
 */
export type ReportsApiListClickedLinkSubscribersRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly campaignId: string
    
    /**
    * The id for the link.
    * @type {string}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly linkId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListClickedLinkSubscribers
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listDomainPerformanceStats operation in ReportsApi.
 * @export
 * @interface ReportsApiListDomainPerformanceStatsRequest
 */
export type ReportsApiListDomainPerformanceStatsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListDomainPerformanceStats
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListDomainPerformanceStats
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListDomainPerformanceStats
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listEepurlActivity operation in ReportsApi.
 * @export
 * @interface ReportsApiListEepurlActivityRequest
 */
export type ReportsApiListEepurlActivityRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListEepurlActivity
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListEepurlActivity
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListEepurlActivity
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listEmailActivity operation in ReportsApi.
 * @export
 * @interface ReportsApiListEmailActivityRequest
 */
export type ReportsApiListEmailActivityRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListEmailActivity
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListEmailActivity
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListEmailActivity
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListEmailActivity
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListEmailActivity
    */
    readonly offset?: number
    
    /**
    * Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
    * @type {string}
    * @memberof ReportsApiListEmailActivity
    */
    readonly since?: string
    
}

/**
 * Request parameters for listTopOpenLocations operation in ReportsApi.
 * @export
 * @interface ReportsApiListTopOpenLocationsRequest
 */
export type ReportsApiListTopOpenLocationsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListTopOpenLocations
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListTopOpenLocations
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListTopOpenLocations
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListTopOpenLocations
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListTopOpenLocations
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listUnsubscribedMembers operation in ReportsApi.
 * @export
 * @interface ReportsApiListUnsubscribedMembersRequest
 */
export type ReportsApiListUnsubscribedMembersRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiListUnsubscribedMembers
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListUnsubscribedMembers
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiListUnsubscribedMembers
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof ReportsApiListUnsubscribedMembers
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof ReportsApiListUnsubscribedMembers
    */
    readonly offset?: number
    
}

/**
 * Request parameters for openSubscriberDetails operation in ReportsApi.
 * @export
 * @interface ReportsApiOpenSubscriberDetailsRequest
 */
export type ReportsApiOpenSubscriberDetailsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiOpenSubscriberDetails
    */
    readonly campaignId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof ReportsApiOpenSubscriberDetails
    */
    readonly subscriberHash: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiOpenSubscriberDetails
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiOpenSubscriberDetails
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for specificCampaignReport operation in ReportsApi.
 * @export
 * @interface ReportsApiSpecificCampaignReportRequest
 */
export type ReportsApiSpecificCampaignReportRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiSpecificCampaignReport
    */
    readonly campaignId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificCampaignReport
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificCampaignReport
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for specificLinkDetails operation in ReportsApi.
 * @export
 * @interface ReportsApiSpecificLinkDetailsRequest
 */
export type ReportsApiSpecificLinkDetailsRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiSpecificLinkDetails
    */
    readonly campaignId: string
    
    /**
    * The id for the link.
    * @type {string}
    * @memberof ReportsApiSpecificLinkDetails
    */
    readonly linkId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificLinkDetails
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificLinkDetails
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for specificLinkSubscriber operation in ReportsApi.
 * @export
 * @interface ReportsApiSpecificLinkSubscriberRequest
 */
export type ReportsApiSpecificLinkSubscriberRequest = {
    
    /**
    * The unique id for the campaign.
    * @type {string}
    * @memberof ReportsApiSpecificLinkSubscriber
    */
    readonly campaignId: string
    
    /**
    * The id for the link.
    * @type {string}
    * @memberof ReportsApiSpecificLinkSubscriber
    */
    readonly linkId: string
    
    /**
    * The MD5 hash of the lowercase version of the list member\'s email address.
    * @type {string}
    * @memberof ReportsApiSpecificLinkSubscriber
    */
    readonly subscriberHash: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificLinkSubscriber
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof ReportsApiSpecificLinkSubscriber
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * Get information about a specific campaign recipient.
     * @summary Get campaign recipient info
     * @param {ReportsApiCampaignRecipientInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public campaignRecipientInfo(requestParameters: ReportsApiCampaignRecipientInfoRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).campaignRecipientInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific abuse report for a campaign.
     * @summary Get abuse report
     * @param {ReportsApiGetAbuseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getAbuseReport(requestParameters: ReportsApiGetAbuseReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getAbuseReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about clicks on specific links in your Mailchimp campaigns.
     * @summary List campaign details
     * @param {ReportsApiGetCampaignClickDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getCampaignClickDetails(requestParameters: ReportsApiGetCampaignClickDetailsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getCampaignClickDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get breakdown of product activity for a campaign
     * @summary List campaign product activity
     * @param {ReportsApiGetCampaignProductActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getCampaignProductActivity(requestParameters: ReportsApiGetCampaignProductActivityRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getCampaignProductActivity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific list member\'s activity in a campaign including opens, clicks, and bounces.
     * @summary Get subscriber email activity
     * @param {ReportsApiGetSubscriberActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getSubscriberActivity(requestParameters: ReportsApiGetSubscriberActivityRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getSubscriberActivity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific list member who unsubscribed from a campaign.
     * @summary Get unsubscribed member
     * @param {ReportsApiGetUnsubscribedMemberInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getUnsubscribedMemberInfo(requestParameters: ReportsApiGetUnsubscribedMemberInfoRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getUnsubscribedMemberInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of abuse complaints for a specific campaign.
     * @summary List abuse reports
     * @param {ReportsApiListAbuseReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listAbuseReports(requestParameters: ReportsApiListAbuseReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listAbuseReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feedback based on a campaign\'s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
     * @summary List campaign feedback
     * @param {ReportsApiListCampaignFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listCampaignFeedback(requestParameters: ReportsApiListCampaignFeedbackRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listCampaignFeedback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed information about any campaign emails that were opened by a list member.
     * @summary List campaign open details
     * @param {ReportsApiListCampaignOpenDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listCampaignOpenDetails(requestParameters: ReportsApiListCampaignOpenDetailsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listCampaignOpenDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about campaign recipients.
     * @summary List campaign recipients
     * @param {ReportsApiListCampaignRecipientsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listCampaignRecipients(requestParameters: ReportsApiListCampaignRecipientsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listCampaignRecipients(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get campaign reports.
     * @summary List campaign reports
     * @param {ReportsApiListCampaignReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listCampaignReports(requestParameters: ReportsApiListCampaignReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listCampaignReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of reports with child campaigns for a specific parent campaign.
     * @summary List child campaign reports
     * @param {ReportsApiListChildCampaignReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listChildCampaignReports(requestParameters: ReportsApiListChildCampaignReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listChildCampaignReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about list members who clicked on a specific link in a campaign.
     * @summary List clicked link subscribers
     * @param {ReportsApiListClickedLinkSubscribersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listClickedLinkSubscribers(requestParameters: ReportsApiListClickedLinkSubscribersRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listClickedLinkSubscribers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get statistics for the top-performing email domains in a campaign.
     * @summary List domain performance stats
     * @param {ReportsApiListDomainPerformanceStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listDomainPerformanceStats(requestParameters: ReportsApiListDomainPerformanceStatsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listDomainPerformanceStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of social activity for the campaign, tracked by EepURL.
     * @summary List EepURL activity
     * @param {ReportsApiListEepurlActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listEepurlActivity(requestParameters: ReportsApiListEepurlActivityRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listEepurlActivity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of member\'s subscriber activity in a specific campaign.
     * @summary List email activity
     * @param {ReportsApiListEmailActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listEmailActivity(requestParameters: ReportsApiListEmailActivityRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listEmailActivity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get top open locations for a specific campaign.
     * @summary List top open activities
     * @param {ReportsApiListTopOpenLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listTopOpenLocations(requestParameters: ReportsApiListTopOpenLocationsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listTopOpenLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about members who have unsubscribed from a specific campaign.
     * @summary List unsubscribed members
     * @param {ReportsApiListUnsubscribedMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listUnsubscribedMembers(requestParameters: ReportsApiListUnsubscribedMembersRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listUnsubscribedMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific subscriber who opened a campaign.
     * @summary Get opened campaign subscriber
     * @param {ReportsApiOpenSubscriberDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public openSubscriberDetails(requestParameters: ReportsApiOpenSubscriberDetailsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).openSubscriberDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get report details for a specific sent campaign.
     * @summary Get campaign report
     * @param {ReportsApiSpecificCampaignReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public specificCampaignReport(requestParameters: ReportsApiSpecificCampaignReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).specificCampaignReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get click details for a specific link in a campaign.
     * @summary Get campaign link details
     * @param {ReportsApiSpecificLinkDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public specificLinkDetails(requestParameters: ReportsApiSpecificLinkDetailsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).specificLinkDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific subscriber who clicked a link in a specific campaign.
     * @summary Get clicked link subscriber
     * @param {ReportsApiSpecificLinkSubscriberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public specificLinkSubscriber(requestParameters: ReportsApiSpecificLinkSubscriberRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).specificLinkSubscriber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
