/* tslint:disable */
/* eslint-disable */
/*
Mailchimp Marketing API

Mailchimp is a marketing platform for small businesses. It offers an all-in-one marketing solution that includes email marketing, ads, landing pages, and automation. With Mailchimp, businesses can design and send targeted campaigns, analyze their performance, and grow their audience.

The version of the OpenAPI document: 3.0.55
Contact: apihelp@mailchimp.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthorizedAppsGetInfo200Response } from '../models';
// @ts-ignore
import { AuthorizedAppsGetInfoResponse } from '../models';
// @ts-ignore
import { AuthorizedAppsGetInfodefaultResponse } from '../models';
// @ts-ignore
import { AuthorizedAppsListConnectedApplications200Response } from '../models';
// @ts-ignore
import { AuthorizedAppsListConnectedApplicationsResponse } from '../models';
// @ts-ignore
import { AuthorizedAppsListConnectedApplicationsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthorizedAppsApi - axios parameter creator
 * @export
 */
export const AuthorizedAppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about a specific authorized application.
         * @summary Get authorized app info
         * @param {string} appId The unique id for the connected authorized application.
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (appId: string, fields?: Array<string>, excludeFields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getInfo', 'appId', appId)
            const localVarPath = `/authorized-apps/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorized-apps/{app_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of an account\'s registered, connected applications.
         * @summary List authorized apps
         * @param {Array<string>} [fields] A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
         * @param {Array<string>} [excludeFields] A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
         * @param {number} [count] The number of records to return. Default value is 10. Maximum value is 1000
         * @param {number} [offset] Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnectedApplications: async (fields?: Array<string>, excludeFields?: Array<string>, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorized-apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (excludeFields) {
                localVarQueryParameter['exclude_fields'] = excludeFields.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorized-apps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizedAppsApi - functional programming interface
 * @export
 */
export const AuthorizedAppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizedAppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about a specific authorized application.
         * @summary Get authorized app info
         * @param {AuthorizedAppsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: AuthorizedAppsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedAppsGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.appId, requestParameters.fields, requestParameters.excludeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of an account\'s registered, connected applications.
         * @summary List authorized apps
         * @param {AuthorizedAppsApiListConnectedApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConnectedApplications(requestParameters: AuthorizedAppsApiListConnectedApplicationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedAppsListConnectedApplicationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConnectedApplications(requestParameters.fields, requestParameters.excludeFields, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizedAppsApi - factory interface
 * @export
 */
export const AuthorizedAppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizedAppsApiFp(configuration)
    return {
        /**
         * Get information about a specific authorized application.
         * @summary Get authorized app info
         * @param {AuthorizedAppsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: AuthorizedAppsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedAppsGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of an account\'s registered, connected applications.
         * @summary List authorized apps
         * @param {AuthorizedAppsApiListConnectedApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnectedApplications(requestParameters: AuthorizedAppsApiListConnectedApplicationsRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizedAppsListConnectedApplicationsResponse> {
            return localVarFp.listConnectedApplications(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInfo operation in AuthorizedAppsApi.
 * @export
 * @interface AuthorizedAppsApiGetInfoRequest
 */
export type AuthorizedAppsApiGetInfoRequest = {
    
    /**
    * The unique id for the connected authorized application.
    * @type {string}
    * @memberof AuthorizedAppsApiGetInfo
    */
    readonly appId: string
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AuthorizedAppsApiGetInfo
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AuthorizedAppsApiGetInfo
    */
    readonly excludeFields?: Array<string>
    
}

/**
 * Request parameters for listConnectedApplications operation in AuthorizedAppsApi.
 * @export
 * @interface AuthorizedAppsApiListConnectedApplicationsRequest
 */
export type AuthorizedAppsApiListConnectedApplicationsRequest = {
    
    /**
    * A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AuthorizedAppsApiListConnectedApplications
    */
    readonly fields?: Array<string>
    
    /**
    * A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
    * @type {Array<string>}
    * @memberof AuthorizedAppsApiListConnectedApplications
    */
    readonly excludeFields?: Array<string>
    
    /**
    * The number of records to return. Default value is 10. Maximum value is 1000
    * @type {number}
    * @memberof AuthorizedAppsApiListConnectedApplications
    */
    readonly count?: number
    
    /**
    * Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
    * @type {number}
    * @memberof AuthorizedAppsApiListConnectedApplications
    */
    readonly offset?: number
    
}

/**
 * AuthorizedAppsApiGenerated - object-oriented interface
 * @export
 * @class AuthorizedAppsApiGenerated
 * @extends {BaseAPI}
 */
export class AuthorizedAppsApiGenerated extends BaseAPI {
    /**
     * Get information about a specific authorized application.
     * @summary Get authorized app info
     * @param {AuthorizedAppsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAppsApiGenerated
     */
    public getInfo(requestParameters: AuthorizedAppsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return AuthorizedAppsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of an account\'s registered, connected applications.
     * @summary List authorized apps
     * @param {AuthorizedAppsApiListConnectedApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizedAppsApiGenerated
     */
    public listConnectedApplications(requestParameters: AuthorizedAppsApiListConnectedApplicationsRequest, options?: AxiosRequestConfig) {
        return AuthorizedAppsApiFp(this.configuration).listConnectedApplications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
